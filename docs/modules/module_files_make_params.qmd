---
title: "Make params"
namespace: "Files"
description: "Looks for files in a directory and turn it in a params file."
toc: false
---

::: {.column-margin}

### Info

ID: `make_params`  
Namespace: `files`

### Links
[Source](https://github.com/openpipelines-bio/openpipeline/blob/main/src/files/make_params){.btn-action .btn-sm .btn-info .btn role="button"}

:::



## Example commands

You can run the pipeline using `nextflow run`.

### View help

You can use `--help` as a parameter to get an overview of the possible parameters.

```bash
nextflow run openpipelines-bio/openpipeline \
  -r main_build -latest \
  -main-script target/nextflow/files/make_params/main.nf \
  --help
```

### Run command

<details>
<summary>Example of `params.yaml`</summary>
```yaml
# Arguments
base_dir: # please fill in - example: "/path/to/dir"
pattern: # please fill in - example: "*.fastq.gz"
n_dirname_drop: 0
n_basename_id: 0
id_name: "id"
path_name: "path"
# group_name: "param_list"
# output: "$id.$key.output.yaml"

# Nextflow input-output arguments
publish_dir: # please fill in - example: "output/"
# param_list: "my_params.yaml"
```
</details>

```bash
nextflow run openpipelines-bio/openpipeline \
  -r main_build -latest \
  -profile docker \
  -main-script target/nextflow/files/make_params/main.nf \
  -params-file params.yaml
```

:::{.callout-note}
Replace `-profile docker` with `-profile podman` or `-profile singularity` depending on the desired backend.
:::

## Argument group

### Arguments

|Name               |Description                                                                                         |Attributes                                  |
|:------------------|:---------------------------------------------------------------------------------------------------|:-------------------------------------------|
|`--base_dir`       |Base directory to search recursively                                                                |`file`, required, example: `"/path/to/dir"` |
|`--pattern`        |An optional regular expression. Only file names which match the regular expression will be matched. |`string`, required, example: `"*.fastq.gz"` |
|`--n_dirname_drop` |For every matched file, the parent directory will be traversed N times.                             |`integer`, default: `0`                     |
|`--n_basename_id`  |The unique identifiers will consist of at least N dirnames.                                         |`integer`, default: `0`                     |
|`--id_name`        |The name for storing the identifier field in the yaml.                                              |`string`, default: `"id"`                   |
|`--path_name`      |The name for storing the path field in the yaml.                                                    |`string`, default: `"path"`                 |
|`--group_name`     |Top level name for the group of entries.                                                            |`string`, example: `"param_list"`           |
|`--output`         |Output YAML file.                                                                                   |`file`, required, example: `"params.yaml"`  |

## Authors

  * Angela Pisco [{{< fa brands github >}}](https://github.com/aopisco) [{{< fa brands orcid >}}](https://orcid.org/0000-0003-0142-2355) (author)
  * Robrecht Cannoodt [{{< fa brands github >}}](https://github.com/rcannood) [{{< fa brands orcid >}}](https://orcid.org/0000-0003-3641-729X) (maintainer, author)
