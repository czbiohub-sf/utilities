{
    "$schema": "http://json-schema.org/draft-07/schema",
    "title": "rna_multisample",
    "description": "Processing unimodal multi-sample RNA transcriptomics data.",
    "type": "object",
    "definitions": {
      "inputs" : {
        "title": "Inputs",
        "type": "object",
        "description": "No description",
        "properties": {
          "id": {
            "type": "string",
            "description": "ID of the concatenated file",
            "default": ""
          },
          "sample_id": {
            "type": "string",
            "description": "IDs of the sample.",
            "default": ""
          },
          "input": {
            "type": "string",
            "description": "Path to the samples.",
            "default": ""
          }
          
        }
      },
      "sample id options" : {
        "title": "Sample ID options",
        "type": "object",
        "description": "Options for adding the id to .obs on the MuData object. Having a sample \nid present in a requirement of several components for this pipeline.\n",
        "properties": {
          "add_id_to_obs": {
            "type": "boolean",
            "description": "Add the value passed with --id to .obs.",
            "default": "True"
          },
          "add_id_obs_output": {
            "type": "string",
            "description": ".Obs column to add the sample IDs to. Required and only used when ","help_text": ".Obs column to add the sample IDs to. Required and only used when \n--add_id_to_obs is set to \u0027true\u0027\n",
            "default": "sample_id"
          },
          "add_id_make_observation_keys_unique": {
            "type": "boolean",
            "description": "Join the id to the .obs index (.obs_names). ","help_text": "Join the id to the .obs index (.obs_names). \nOnly used when --add_id_to_obs is set to \u0027true\u0027.\n",
            "default": "True"
          }
          
        }
      },
      "filtering highly variable genes" : {
        "title": "Filtering highly variable genes",
        "type": "object",
        "description": "No description",
        "properties": {
          "filter_with_hvg_var_output": {
            "type": "string",
            "description": "In which .var slot to store a boolean array corresponding to the highly variable genes.",
            "default": "filter_with_hvg"
          },
          "filter_with_hvg_obs_batch_key": {
            "type": "string",
            "description": "If specified, highly-variable genes are selected within each batch separately and merged. This simple ","help_text": "If specified, highly-variable genes are selected within each batch separately and merged. This simple \nprocess avoids the selection of batch-specific genes and acts as a lightweight batch correction method. \nFor all flavors, genes are first sorted by how many batches they are a HVG. For dispersion-based flavors \nties are broken by normalized dispersion. If flavor = \u0027seurat_v3\u0027, ties are broken by the median (across\nbatches) rank based on within-batch normalized variance.\n",
            "default": "sample_id"
          },
          "filter_with_hvg_flavor": {
            "type": "string",
            "description": "Choose the flavor for identifying highly variable genes. For the dispersion based methods","help_text": "Choose the flavor for identifying highly variable genes. For the dispersion based methods\nin their default workflows, Seurat passes the cutoffs whereas Cell Ranger passes n_top_genes.\n","enum": ["seurat", "cell_ranger", "seurat_v3"],
            "default": "seurat"
          },
          "filter_with_hvg_n_top_genes": {
            "type": "integer",
            "description": "Number of highly-variable genes to keep. Mandatory if filter_with_hvg_flavor is set to \u0027seurat_v3\u0027.",
            "default": ""
          }
          
        }
      },
      "qc metrics calculation options" : {
        "title": "QC metrics calculation options",
        "type": "object",
        "description": "No description",
        "properties": {
          "var_qc_metrics": {
            "type": "string",
            "description": "Keys to select a boolean (containing only True or False) column from .var.","help_text": "Keys to select a boolean (containing only True or False) column from .var.\nFor each cell, calculate the proportion of total values for genes which are labeled \u0027True\u0027, \ncompared to the total sum of the values for all genes.\n",
            "default": "['filter_with_hvg']"
          },
          "top_n_vars": {
            "type": "integer",
            "description": "Number of top vars to be used to calculate cumulative proportions.","help_text": "Number of top vars to be used to calculate cumulative proportions.\nIf not specified, proportions are not calculated. `--top_n_vars 20,50` finds\ncumulative proportion to the 20th and 50th most expressed vars.\n",
            "default": "[50, 100, 200, 500]"
          }
          
        }
      },
      "nextflow input-output arguments" : {
        "title": "Nextflow input-output arguments",
        "type": "object",
        "description": "Input/output parameters for Nextflow itself. Please note that both publishDir and publish_dir are supported but at least one has to be configured.",
        "properties": {
          "publish_dir": {
            "type": "string",
            "description": "Path to an output directory.",
            "default": ""
          },
          "param_list": {
            "type": "string",
            "description": "Allows inputting multiple parameter sets to initialise a Nextflow channel. A `param_list` can either be a list of maps, a csv file, a json file, a yaml file, or simply a yaml blob.","help_text": "Allows inputting multiple parameter sets to initialise a Nextflow channel. A `param_list` can either be a list of maps, a csv file, a json file, a yaml file, or simply a yaml blob.\n\n* A list of maps (as-is) where the keys of each map corresponds to the arguments of the pipeline. Example: in a `nextflow.config` file: `param_list: [ [\u0027id\u0027: \u0027foo\u0027, \u0027input\u0027: \u0027foo.txt\u0027], [\u0027id\u0027: \u0027bar\u0027, \u0027input\u0027: \u0027bar.txt\u0027] ]`.\n* A csv file should have column names which correspond to the different arguments of this pipeline. Example: `--param_list data.csv` with columns `id,input`.\n* A json or a yaml file should be a list of maps, each of which has keys corresponding to the arguments of the pipeline. Example: `--param_list data.json` with contents `[ {\u0027id\u0027: \u0027foo\u0027, \u0027input\u0027: \u0027foo.txt\u0027}, {\u0027id\u0027: \u0027bar\u0027, \u0027input\u0027: \u0027bar.txt\u0027} ]`.\n* A yaml blob can also be passed directly as a string. Example: `--param_list \"[ {\u0027id\u0027: \u0027foo\u0027, \u0027input\u0027: \u0027foo.txt\u0027}, {\u0027id\u0027: \u0027bar\u0027, \u0027input\u0027: \u0027bar.txt\u0027} ]\"`.\n\nWhen passing a csv, json or yaml file, relative path names are relativized to the location of the parameter file. No relativation is performed when `param_list` is a list of maps (as-is) or a yaml blob.","hidden": true,
            "default": ""
          }
          
        }
      }
    },
    "allOf": [
      {
        "$ref": "#/definitions/inputs"
      },
      {
        "$ref": "#/definitions/sample id options"
      },
      {
        "$ref": "#/definitions/filtering highly variable genes"
      },
      {
        "$ref": "#/definitions/qc metrics calculation options"
      },
      {
        "$ref": "#/definitions/nextflow input-output arguments"
      }
      ]
}
