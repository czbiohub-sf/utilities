{
    "$schema": "http://json-schema.org/draft-07/schema",
    "title": "cellranger_mapping",
    "description": "A pipeline for running Cell Ranger mapping.",
    "type": "object",
    "definitions": {
      "inputs" : {
        "title": "Inputs",
        "type": "object",
        "description": "No description",
        "properties": {
          "id": {
            "type": "string",
            "description": "ID of the sample.",
            "default": ""
          },
          "input": {
            "type": "string",
            "description": "The fastq.gz files to align. Can also be a single directory containing fastq.gz files.",
            "default": ""
          },
          "reference": {
            "type": "string",
            "description": "The path to Cell Ranger reference tar.gz file.",
            "default": ""
          }
          
        }
      },
      "outputs" : {
        "title": "Outputs",
        "type": "object",
        "description": "No description",
        "properties": {
          "output_raw": {
            "type": "string",
            "description": "The raw output folder.",
            "default": "$id.$key.output_raw.output_raw"
          },
          "output_h5mu": {
            "type": "string",
            "description": "The converted h5mu file.",
            "default": "$id.$key.output_h5mu.h5mu"
          },
          "obsm_metrics": {
            "type": "string",
            "description": "Name of the .obsm slot under which to QC metrics (if any).",
            "default": "metrics_summary"
          }
          
        }
      },
      "cell ranger arguments" : {
        "title": "Cell Ranger arguments",
        "type": "object",
        "description": "No description",
        "properties": {
          "expect_cells": {
            "type": "integer",
            "description": "Expected number of recovered cells, used as input to cell calling algorithm.",
            "default": ""
          },
          "chemistry": {
            "type": "string",
            "description": "Assay configuration.","help_text": "Assay configuration.\n- auto: autodetect mode\n- threeprime: Single Cell 3\u0027\n- fiveprime: Single Cell 5\u0027\n- SC3Pv1: Single Cell 3\u0027 v1\n- SC3Pv2: Single Cell 3\u0027 v2\n- SC3Pv3: Single Cell 3\u0027 v3\n- SC3Pv3LT: Single Cell 3\u0027 v3 LT\n- SC3Pv3HT: Single Cell 3\u0027 v3 HT\n- SC5P-PE: Single Cell 5\u0027 paired-end\n- SC5P-R2: Single Cell 5\u0027 R2-only\n- SC-FB: Single Cell Antibody-only 3\u0027 v2 or 5\u0027\nSee https://kb.10xgenomics.com/hc/en-us/articles/115003764132-How-does-Cell-Ranger-auto-detect-chemistry- for more information.\n","enum": ["auto", "threeprime", "fiveprime", "SC3Pv1", "SC3Pv2", "SC3Pv3", "SC3Pv3LT", "SC3Pv3HT", "SC5P-PE", "SC5P-R2", "SC-FB"],
            "default": "auto"
          },
          "secondary_analysis": {
            "type": "boolean",
            "description": "Whether or not to run the secondary analysis e.g. clustering.",
            "default": "False"
          },
          "generate_bam": {
            "type": "boolean",
            "description": "Whether to generate a BAM file.",
            "default": "True"
          },
          "include_introns": {
            "type": "boolean",
            "description": "Include intronic reads in count (default=true unless --target-panel is specified in which case default=false)",
            "default": "True"
          }
          
        }
      },
      "nextflow input-output arguments" : {
        "title": "Nextflow input-output arguments",
        "type": "object",
        "description": "Input/output parameters for Nextflow itself. Please note that both publishDir and publish_dir are supported but at least one has to be configured.",
        "properties": {
          "publish_dir": {
            "type": "string",
            "description": "Path to an output directory.",
            "default": ""
          },
          "param_list": {
            "type": "string",
            "description": "Allows inputting multiple parameter sets to initialise a Nextflow channel. A `param_list` can either be a list of maps, a csv file, a json file, a yaml file, or simply a yaml blob.","help_text": "Allows inputting multiple parameter sets to initialise a Nextflow channel. A `param_list` can either be a list of maps, a csv file, a json file, a yaml file, or simply a yaml blob.\n\n* A list of maps (as-is) where the keys of each map corresponds to the arguments of the pipeline. Example: in a `nextflow.config` file: `param_list: [ [\u0027id\u0027: \u0027foo\u0027, \u0027input\u0027: \u0027foo.txt\u0027], [\u0027id\u0027: \u0027bar\u0027, \u0027input\u0027: \u0027bar.txt\u0027] ]`.\n* A csv file should have column names which correspond to the different arguments of this pipeline. Example: `--param_list data.csv` with columns `id,input`.\n* A json or a yaml file should be a list of maps, each of which has keys corresponding to the arguments of the pipeline. Example: `--param_list data.json` with contents `[ {\u0027id\u0027: \u0027foo\u0027, \u0027input\u0027: \u0027foo.txt\u0027}, {\u0027id\u0027: \u0027bar\u0027, \u0027input\u0027: \u0027bar.txt\u0027} ]`.\n* A yaml blob can also be passed directly as a string. Example: `--param_list \"[ {\u0027id\u0027: \u0027foo\u0027, \u0027input\u0027: \u0027foo.txt\u0027}, {\u0027id\u0027: \u0027bar\u0027, \u0027input\u0027: \u0027bar.txt\u0027} ]\"`.\n\nWhen passing a csv, json or yaml file, relative path names are relativized to the location of the parameter file. No relativation is performed when `param_list` is a list of maps (as-is) or a yaml blob.","hidden": true,
            "default": ""
          }
          
        }
      }
    },
    "allOf": [
      {
        "$ref": "#/definitions/inputs"
      },
      {
        "$ref": "#/definitions/outputs"
      },
      {
        "$ref": "#/definitions/cell ranger arguments"
      },
      {
        "$ref": "#/definitions/nextflow input-output arguments"
      }
      ]
}
