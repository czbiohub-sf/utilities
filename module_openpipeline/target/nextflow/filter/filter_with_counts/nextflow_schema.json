{
    "$schema": "http://json-schema.org/draft-07/schema",
    "title": "filter_with_counts",
    "description": "Filter scRNA-seq data based on the primary QC metrics. \nThis is based on both the UMI counts, the gene counts \nand the mitochondrial genes (genes starting with mt/MT).\n",
    "type": "object",
    "definitions": {
      "inputs" : {
        "title": "Inputs",
        "type": "object",
        "description": "No description",
        "properties": {
          "input": {
            "type": "string",
            "description": "Input h5mu file",
            "default": ""
          },
          "modality": {
            "type": "string",
            "description": "No description",
            "default": "rna"
          },
          "layer": {
            "type": "string",
            "description": "No description",
            "default": ""
          },
          "var_gene_names": {
            "type": "string",
            "description": ".var column name to be used to detect mitochondrial genes instead of .var_names (default if not set). ","help_text": ".var column name to be used to detect mitochondrial genes instead of .var_names (default if not set). \nGene names matching with the regex value from --mitochondrial_gene_regex will be identified\nas a mitochondrial gene.\n",
            "default": ""
          },
          "mitochondrial_gene_regex": {
            "type": "string",
            "description": "Regex string that identifies mitochondrial genes from --var_gene_names.","help_text": "Regex string that identifies mitochondrial genes from --var_gene_names.\nBy default will detect human and mouse mitochondrial genes from a gene symbol.\n",
            "default": "^[mM][tT]-"
          }
          
        }
      },
      "outputs" : {
        "title": "Outputs",
        "type": "object",
        "description": "No description",
        "properties": {
          "output": {
            "type": "string",
            "description": "Output h5mu file.",
            "default": "$id.$key.output.h5mu"
          },
          "output_compression": {
            "type": "string",
            "description": "The compression format to be used on the output h5mu object.","enum": ["gzip", "lzf"],
            "default": ""
          },
          "do_subset": {
            "type": "boolean",
            "description": "Whether to subset before storing the output.",
            "default": "False"
          },
          "obs_name_filter": {
            "type": "string",
            "description": "In which .obs slot to store a boolean array corresponding to which observations should be removed.",
            "default": "filter_with_counts"
          },
          "var_name_filter": {
            "type": "string",
            "description": "In which .var slot to store a boolean array corresponding to which variables should be removed.",
            "default": "filter_with_counts"
          }
          
        }
      },
      "arguments" : {
        "title": "Arguments",
        "type": "object",
        "description": "No description",
        "properties": {
          "min_counts": {
            "type": "integer",
            "description": "Minimum number of counts captured per cell.",
            "default": ""
          },
          "max_counts": {
            "type": "integer",
            "description": "Maximum number of counts captured per cell.",
            "default": ""
          },
          "min_genes_per_cell": {
            "type": "integer",
            "description": "Minimum of non-zero values per cell.",
            "default": ""
          },
          "max_genes_per_cell": {
            "type": "integer",
            "description": "Maximum of non-zero values per cell.",
            "default": ""
          },
          "min_cells_per_gene": {
            "type": "integer",
            "description": "Minimum of non-zero values per gene.",
            "default": ""
          },
          "min_fraction_mito": {
            "type": "number",
            "description": "Minimum fraction of UMIs that are mitochondrial.",
            "default": ""
          },
          "max_fraction_mito": {
            "type": "number",
            "description": "Maximum fraction of UMIs that are mitochondrial.",
            "default": ""
          }
          
        }
      },
      "nextflow input-output arguments" : {
        "title": "Nextflow input-output arguments",
        "type": "object",
        "description": "Input/output parameters for Nextflow itself. Please note that both publishDir and publish_dir are supported but at least one has to be configured.",
        "properties": {
          "publish_dir": {
            "type": "string",
            "description": "Path to an output directory.",
            "default": ""
          },
          "param_list": {
            "type": "string",
            "description": "Allows inputting multiple parameter sets to initialise a Nextflow channel. A `param_list` can either be a list of maps, a csv file, a json file, a yaml file, or simply a yaml blob.","help_text": "Allows inputting multiple parameter sets to initialise a Nextflow channel. A `param_list` can either be a list of maps, a csv file, a json file, a yaml file, or simply a yaml blob.\n\n* A list of maps (as-is) where the keys of each map corresponds to the arguments of the pipeline. Example: in a `nextflow.config` file: `param_list: [ [\u0027id\u0027: \u0027foo\u0027, \u0027input\u0027: \u0027foo.txt\u0027], [\u0027id\u0027: \u0027bar\u0027, \u0027input\u0027: \u0027bar.txt\u0027] ]`.\n* A csv file should have column names which correspond to the different arguments of this pipeline. Example: `--param_list data.csv` with columns `id,input`.\n* A json or a yaml file should be a list of maps, each of which has keys corresponding to the arguments of the pipeline. Example: `--param_list data.json` with contents `[ {\u0027id\u0027: \u0027foo\u0027, \u0027input\u0027: \u0027foo.txt\u0027}, {\u0027id\u0027: \u0027bar\u0027, \u0027input\u0027: \u0027bar.txt\u0027} ]`.\n* A yaml blob can also be passed directly as a string. Example: `--param_list \"[ {\u0027id\u0027: \u0027foo\u0027, \u0027input\u0027: \u0027foo.txt\u0027}, {\u0027id\u0027: \u0027bar\u0027, \u0027input\u0027: \u0027bar.txt\u0027} ]\"`.\n\nWhen passing a csv, json or yaml file, relative path names are relativized to the location of the parameter file. No relativation is performed when `param_list` is a list of maps (as-is) or a yaml blob.","hidden": true,
            "default": ""
          }
          
        }
      }
    },
    "allOf": [
      {
        "$ref": "#/definitions/inputs"
      },
      {
        "$ref": "#/definitions/outputs"
      },
      {
        "$ref": "#/definitions/arguments"
      },
      {
        "$ref": "#/definitions/nextflow input-output arguments"
      }
      ]
}
