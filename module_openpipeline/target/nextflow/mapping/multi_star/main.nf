// multi_star main_build
// 
// This wrapper script is auto-generated by viash 0.7.0 and is thus a derivative
// work thereof. This software comes with ABSOLUTELY NO WARRANTY from Data
// Intuitive.
// 
// The component may contain files which fall under a different license. The
// authors of this component should specify the license in the header of such
// files, or include a separate license file detailing the licenses of all included
// files.
// 
// Component authors:
//  * Angela Pisco (author) {github: aopisco, orcid: 0000-0003-0142-2355}
//  * Robrecht Cannoodt <robrecht@data-intuitive.com> (author, maintainer) {github:
// rcannood, orcid: 0000-0003-3641-729X}

nextflow.enable.dsl=2

// Required imports
import groovy.json.JsonSlurper

// initialise slurper
def jsonSlurper = new JsonSlurper()

// DEFINE CUSTOM CODE

// functionality metadata
thisConfig = processConfig(jsonSlurper.parseText('''{
  "functionality" : {
    "name" : "multi_star",
    "namespace" : "mapping",
    "version" : "main_build",
    "authors" : [
      {
        "name" : "Angela Pisco",
        "roles" : [
          "author"
        ],
        "props" : {
          "github" : "aopisco",
          "orcid" : "0000-0003-0142-2355"
        }
      },
      {
        "name" : "Robrecht Cannoodt",
        "email" : "robrecht@data-intuitive.com",
        "roles" : [
          "author",
          "maintainer"
        ],
        "props" : {
          "github" : "rcannood",
          "orcid" : "0000-0003-3641-729X"
        }
      }
    ],
    "argument_groups" : [
      {
        "name" : "Input/Output",
        "arguments" : [
          {
            "type" : "string",
            "name" : "--input_id",
            "description" : "The ID of the sample being processed. This vector should have the same length as the `--input_r1` argument.",
            "example" : [
              "mysample",
              "mysample"
            ],
            "required" : true,
            "direction" : "input",
            "multiple" : true,
            "multiple_sep" : ";",
            "dest" : "par"
          },
          {
            "type" : "file",
            "name" : "--input_r1",
            "description" : "Paths to the sequences to be mapped. If using Illumina paired-end reads, only the R1 files should be passed.",
            "example" : [
              "mysample_S1_L001_R1_001.fastq.gz",
              "mysample_S1_L002_R1_001.fastq.gz"
            ],
            "must_exist" : true,
            "create_parent" : true,
            "required" : true,
            "direction" : "input",
            "multiple" : true,
            "multiple_sep" : ";",
            "dest" : "par"
          },
          {
            "type" : "file",
            "name" : "--input_r2",
            "description" : "Paths to the sequences to be mapped. If using Illumina paired-end reads, only the R2 files should be passed.",
            "example" : [
              "mysample_S1_L001_R2_001.fastq.gz",
              "mysample_S1_L002_R2_001.fastq.gz"
            ],
            "must_exist" : true,
            "create_parent" : true,
            "required" : false,
            "direction" : "input",
            "multiple" : true,
            "multiple_sep" : ";",
            "dest" : "par"
          },
          {
            "type" : "file",
            "name" : "--reference_index",
            "alternatives" : [
              "--genomeDir"
            ],
            "description" : "Path to the reference built by star_build_reference. Corresponds to the --genomeDir argument in the STAR command.",
            "example" : [
              "/path/to/reference"
            ],
            "must_exist" : true,
            "create_parent" : true,
            "required" : true,
            "direction" : "input",
            "multiple" : false,
            "multiple_sep" : ":",
            "dest" : "par"
          },
          {
            "type" : "file",
            "name" : "--reference_gtf",
            "description" : "Path to the gtf reference file.",
            "example" : [
              "genes.gtf"
            ],
            "must_exist" : true,
            "create_parent" : true,
            "required" : true,
            "direction" : "input",
            "multiple" : false,
            "multiple_sep" : ":",
            "dest" : "par"
          },
          {
            "type" : "file",
            "name" : "--output",
            "alternatives" : [
              "--outFileNamePrefix"
            ],
            "description" : "Path to output directory. Corresponds to the --outFileNamePrefix argument in the STAR command.",
            "example" : [
              "/path/to/foo"
            ],
            "must_exist" : true,
            "create_parent" : true,
            "required" : true,
            "direction" : "output",
            "multiple" : false,
            "multiple_sep" : ":",
            "dest" : "par"
          }
        ]
      },
      {
        "name" : "Processing arguments",
        "arguments" : [
          {
            "type" : "boolean",
            "name" : "--run_htseq_count",
            "description" : "Whether or not to also run htseq-count after STAR.",
            "default" : [
              true
            ],
            "required" : false,
            "direction" : "input",
            "multiple" : false,
            "multiple_sep" : ":",
            "dest" : "par"
          },
          {
            "type" : "boolean",
            "name" : "--run_multiqc",
            "description" : "Whether or not to also run MultiQC at the end.",
            "default" : [
              true
            ],
            "required" : false,
            "direction" : "input",
            "multiple" : false,
            "multiple_sep" : ":",
            "dest" : "par"
          }
        ]
      },
      {
        "name" : "Run Parameters",
        "arguments" : [
          {
            "type" : "integer",
            "name" : "--runRNGseed",
            "description" : "random number generator seed.",
            "info" : {
              "step" : "star",
              "orig_arg" : "--runRNGseed"
            },
            "example" : [
              777
            ],
            "required" : false,
            "direction" : "input",
            "multiple" : false,
            "multiple_sep" : ":",
            "dest" : "par"
          }
        ]
      },
      {
        "name" : "Genome Parameters",
        "arguments" : [
          {
            "type" : "file",
            "name" : "--genomeFastaFiles",
            "description" : "path(s) to the fasta files with the genome sequences, separated by spaces. These files should be plain text FASTA files, they *cannot* be zipped.\n\nRequired for the genome generation (--runMode genomeGenerate). Can also be used in the mapping (--runMode alignReads) to add extra (new) sequences to the genome (e.g. spike-ins).",
            "info" : {
              "step" : "star",
              "orig_arg" : "--genomeFastaFiles"
            },
            "must_exist" : true,
            "create_parent" : true,
            "required" : false,
            "direction" : "input",
            "multiple" : true,
            "multiple_sep" : ";",
            "dest" : "par"
          }
        ]
      },
      {
        "name" : "Splice Junctions Database",
        "arguments" : [
          {
            "type" : "string",
            "name" : "--sjdbFileChrStartEnd",
            "description" : "path to the files with genomic coordinates (chr <tab> start <tab> end <tab> strand) for the splice junction introns. Multiple files can be supplied and will be concatenated.",
            "info" : {
              "step" : "star",
              "orig_arg" : "--sjdbFileChrStartEnd"
            },
            "required" : false,
            "direction" : "input",
            "multiple" : true,
            "multiple_sep" : ";",
            "dest" : "par"
          },
          {
            "type" : "file",
            "name" : "--sjdbGTFfile",
            "description" : "path to the GTF file with annotations",
            "info" : {
              "step" : "star",
              "orig_arg" : "--sjdbGTFfile"
            },
            "must_exist" : true,
            "create_parent" : true,
            "required" : false,
            "direction" : "input",
            "multiple" : false,
            "multiple_sep" : ":",
            "dest" : "par"
          },
          {
            "type" : "string",
            "name" : "--sjdbGTFchrPrefix",
            "description" : "prefix for chromosome names in a GTF file (e.g. 'chr' for using ENSMEBL annotations with UCSC genomes)",
            "info" : {
              "step" : "star",
              "orig_arg" : "--sjdbGTFchrPrefix"
            },
            "required" : false,
            "direction" : "input",
            "multiple" : false,
            "multiple_sep" : ":",
            "dest" : "par"
          },
          {
            "type" : "string",
            "name" : "--sjdbGTFfeatureExon",
            "description" : "feature type in GTF file to be used as exons for building transcripts",
            "info" : {
              "step" : "star",
              "orig_arg" : "--sjdbGTFfeatureExon"
            },
            "example" : [
              "exon"
            ],
            "required" : false,
            "direction" : "input",
            "multiple" : false,
            "multiple_sep" : ":",
            "dest" : "par"
          },
          {
            "type" : "string",
            "name" : "--sjdbGTFtagExonParentTranscript",
            "description" : "GTF attribute name for parent transcript ID (default \\"transcript_id\\" works for GTF files)",
            "info" : {
              "step" : "star",
              "orig_arg" : "--sjdbGTFtagExonParentTranscript"
            },
            "example" : [
              "transcript_id"
            ],
            "required" : false,
            "direction" : "input",
            "multiple" : false,
            "multiple_sep" : ":",
            "dest" : "par"
          },
          {
            "type" : "string",
            "name" : "--sjdbGTFtagExonParentGene",
            "description" : "GTF attribute name for parent gene ID (default \\"gene_id\\" works for GTF files)",
            "info" : {
              "step" : "star",
              "orig_arg" : "--sjdbGTFtagExonParentGene"
            },
            "example" : [
              "gene_id"
            ],
            "required" : false,
            "direction" : "input",
            "multiple" : false,
            "multiple_sep" : ":",
            "dest" : "par"
          },
          {
            "type" : "string",
            "name" : "--sjdbGTFtagExonParentGeneName",
            "description" : "GTF attribute name for parent gene name",
            "info" : {
              "step" : "star",
              "orig_arg" : "--sjdbGTFtagExonParentGeneName"
            },
            "example" : [
              "gene_name"
            ],
            "required" : false,
            "direction" : "input",
            "multiple" : true,
            "multiple_sep" : ";",
            "dest" : "par"
          },
          {
            "type" : "string",
            "name" : "--sjdbGTFtagExonParentGeneType",
            "description" : "GTF attribute name for parent gene type",
            "info" : {
              "step" : "star",
              "orig_arg" : "--sjdbGTFtagExonParentGeneType"
            },
            "example" : [
              "gene_type",
              "gene_biotype"
            ],
            "required" : false,
            "direction" : "input",
            "multiple" : true,
            "multiple_sep" : ";",
            "dest" : "par"
          },
          {
            "type" : "integer",
            "name" : "--sjdbOverhang",
            "description" : "length of the donor/acceptor sequence on each side of the junctions, ideally = (mate_length - 1)",
            "info" : {
              "step" : "star",
              "orig_arg" : "--sjdbOverhang"
            },
            "example" : [
              100
            ],
            "required" : false,
            "direction" : "input",
            "multiple" : false,
            "multiple_sep" : ":",
            "dest" : "par"
          },
          {
            "type" : "integer",
            "name" : "--sjdbScore",
            "description" : "extra alignment score for alignments that cross database junctions",
            "info" : {
              "step" : "star",
              "orig_arg" : "--sjdbScore"
            },
            "example" : [
              2
            ],
            "required" : false,
            "direction" : "input",
            "multiple" : false,
            "multiple_sep" : ":",
            "dest" : "par"
          },
          {
            "type" : "string",
            "name" : "--sjdbInsertSave",
            "description" : "which files to save when sjdb junctions are inserted on the fly at the mapping step\n\n- Basic ... only small junction / transcript files\n- All   ... all files including big Genome, SA and SAindex - this will create a complete genome directory",
            "info" : {
              "step" : "star",
              "orig_arg" : "--sjdbInsertSave"
            },
            "example" : [
              "Basic"
            ],
            "required" : false,
            "direction" : "input",
            "multiple" : false,
            "multiple_sep" : ":",
            "dest" : "par"
          }
        ]
      },
      {
        "name" : "Variation parameters",
        "arguments" : [
          {
            "type" : "string",
            "name" : "--varVCFfile",
            "description" : "path to the VCF file that contains variation data. The 10th column should contain the genotype information, e.g. 0/1",
            "info" : {
              "step" : "star",
              "orig_arg" : "--varVCFfile"
            },
            "required" : false,
            "direction" : "input",
            "multiple" : false,
            "multiple_sep" : ":",
            "dest" : "par"
          }
        ]
      },
      {
        "name" : "Read Parameters",
        "arguments" : [
          {
            "type" : "string",
            "name" : "--readFilesType",
            "description" : "format of input read files\n\n- Fastx       ... FASTA or FASTQ\n- SAM SE      ... SAM or BAM single-end reads; for BAM use --readFilesCommand samtools view\n- SAM PE      ... SAM or BAM paired-end reads; for BAM use --readFilesCommand samtools view",
            "info" : {
              "step" : "star",
              "orig_arg" : "--readFilesType"
            },
            "example" : [
              "Fastx"
            ],
            "required" : false,
            "direction" : "input",
            "multiple" : false,
            "multiple_sep" : ":",
            "dest" : "par"
          },
          {
            "type" : "string",
            "name" : "--readFilesSAMattrKeep",
            "description" : "for --readFilesType SAM SE/PE, which SAM tags to keep in the output BAM, e.g.: --readFilesSAMtagsKeep RG PL\n\n- All     ... keep all tags\n- None    ... do not keep any tags",
            "info" : {
              "step" : "star",
              "orig_arg" : "--readFilesSAMattrKeep"
            },
            "example" : [
              "All"
            ],
            "required" : false,
            "direction" : "input",
            "multiple" : true,
            "multiple_sep" : ";",
            "dest" : "par"
          },
          {
            "type" : "file",
            "name" : "--readFilesManifest",
            "description" : "path to the \\"manifest\\" file with the names of read files. The manifest file should contain 3 tab-separated columns:\n\npaired-end reads: read1_file_name $tab$ read2_file_name $tab$ read_group_line.\nsingle-end reads: read1_file_name $tab$ -               $tab$ read_group_line.\nSpaces, but not tabs are allowed in file names.\nIf read_group_line does not start with ID:, it can only contain one ID field, and ID: will be added to it.\nIf read_group_line starts with ID:, it can contain several fields separated by $tab$, and all fields will be be copied verbatim into SAM @RG header line.",
            "info" : {
              "step" : "star",
              "orig_arg" : "--readFilesManifest"
            },
            "must_exist" : true,
            "create_parent" : true,
            "required" : false,
            "direction" : "input",
            "multiple" : false,
            "multiple_sep" : ":",
            "dest" : "par"
          },
          {
            "type" : "string",
            "name" : "--readFilesPrefix",
            "description" : "prefix for the read files names, i.e. it will be added in front of the strings in --readFilesIn",
            "info" : {
              "step" : "star",
              "orig_arg" : "--readFilesPrefix"
            },
            "required" : false,
            "direction" : "input",
            "multiple" : false,
            "multiple_sep" : ":",
            "dest" : "par"
          },
          {
            "type" : "string",
            "name" : "--readFilesCommand",
            "description" : "command line to execute for each of the input file. This command should generate FASTA or FASTQ text and send it to stdout\n\nFor example: zcat - to uncompress .gz files, bzcat - to uncompress .bz2 files, etc.",
            "info" : {
              "step" : "star",
              "orig_arg" : "--readFilesCommand"
            },
            "required" : false,
            "direction" : "input",
            "multiple" : true,
            "multiple_sep" : ";",
            "dest" : "par"
          },
          {
            "type" : "integer",
            "name" : "--readMapNumber",
            "description" : "number of reads to map from the beginning of the file\n\n-1: map all reads",
            "info" : {
              "step" : "star",
              "orig_arg" : "--readMapNumber"
            },
            "example" : [
              -1
            ],
            "required" : false,
            "direction" : "input",
            "multiple" : false,
            "multiple_sep" : ":",
            "dest" : "par"
          },
          {
            "type" : "string",
            "name" : "--readMatesLengthsIn",
            "description" : "Equal/NotEqual - lengths of names,sequences,qualities for both mates are the same  / not the same. NotEqual is safe in all situations.",
            "info" : {
              "step" : "star",
              "orig_arg" : "--readMatesLengthsIn"
            },
            "example" : [
              "NotEqual"
            ],
            "required" : false,
            "direction" : "input",
            "multiple" : false,
            "multiple_sep" : ":",
            "dest" : "par"
          },
          {
            "type" : "string",
            "name" : "--readNameSeparator",
            "description" : "character(s) separating the part of the read names that will be trimmed in output (read name after space is always trimmed)",
            "info" : {
              "step" : "star",
              "orig_arg" : "--readNameSeparator"
            },
            "example" : [
              "/"
            ],
            "required" : false,
            "direction" : "input",
            "multiple" : true,
            "multiple_sep" : ";",
            "dest" : "par"
          },
          {
            "type" : "integer",
            "name" : "--readQualityScoreBase",
            "description" : "number to be subtracted from the ASCII code to get Phred quality score",
            "info" : {
              "step" : "star",
              "orig_arg" : "--readQualityScoreBase"
            },
            "example" : [
              33
            ],
            "required" : false,
            "direction" : "input",
            "multiple" : false,
            "multiple_sep" : ":",
            "dest" : "par"
          }
        ]
      },
      {
        "name" : "Read Clipping",
        "arguments" : [
          {
            "type" : "string",
            "name" : "--clipAdapterType",
            "description" : "adapter clipping type\n\n- Hamming ... adapter clipping based on Hamming distance, with the number of mismatches controlled by --clip5pAdapterMMp\n- CellRanger4 ... 5p and 3p adapter clipping similar to CellRanger4. Utilizes Opal package by Martin Šošić: https://github.com/Martinsos/opal\n- None ... no adapter clipping, all other clip* parameters are disregarded",
            "info" : {
              "step" : "star",
              "orig_arg" : "--clipAdapterType"
            },
            "example" : [
              "Hamming"
            ],
            "required" : false,
            "direction" : "input",
            "multiple" : false,
            "multiple_sep" : ":",
            "dest" : "par"
          },
          {
            "type" : "integer",
            "name" : "--clip3pNbases",
            "description" : "number(s) of bases to clip from 3p of each mate. If one value is given, it will be assumed the same for both mates.",
            "info" : {
              "step" : "star",
              "orig_arg" : "--clip3pNbases"
            },
            "example" : [
              0
            ],
            "required" : false,
            "direction" : "input",
            "multiple" : true,
            "multiple_sep" : ";",
            "dest" : "par"
          },
          {
            "type" : "string",
            "name" : "--clip3pAdapterSeq",
            "description" : "adapter sequences to clip from 3p of each mate.  If one value is given, it will be assumed the same for both mates.\n\n- polyA ... polyA sequence with the length equal to read length",
            "info" : {
              "step" : "star",
              "orig_arg" : "--clip3pAdapterSeq"
            },
            "required" : false,
            "direction" : "input",
            "multiple" : true,
            "multiple_sep" : ";",
            "dest" : "par"
          },
          {
            "type" : "double",
            "name" : "--clip3pAdapterMMp",
            "description" : "max proportion of mismatches for 3p adapter clipping for each mate.  If one value is given, it will be assumed the same for both mates.",
            "info" : {
              "step" : "star",
              "orig_arg" : "--clip3pAdapterMMp"
            },
            "example" : [
              0.1
            ],
            "required" : false,
            "direction" : "input",
            "multiple" : true,
            "multiple_sep" : ";",
            "dest" : "par"
          },
          {
            "type" : "integer",
            "name" : "--clip3pAfterAdapterNbases",
            "description" : "number of bases to clip from 3p of each mate after the adapter clipping. If one value is given, it will be assumed the same for both mates.",
            "info" : {
              "step" : "star",
              "orig_arg" : "--clip3pAfterAdapterNbases"
            },
            "example" : [
              0
            ],
            "required" : false,
            "direction" : "input",
            "multiple" : true,
            "multiple_sep" : ";",
            "dest" : "par"
          },
          {
            "type" : "integer",
            "name" : "--clip5pNbases",
            "description" : "number(s) of bases to clip from 5p of each mate. If one value is given, it will be assumed the same for both mates.",
            "info" : {
              "step" : "star",
              "orig_arg" : "--clip5pNbases"
            },
            "example" : [
              0
            ],
            "required" : false,
            "direction" : "input",
            "multiple" : true,
            "multiple_sep" : ";",
            "dest" : "par"
          }
        ]
      },
      {
        "name" : "Limits",
        "arguments" : [
          {
            "type" : "long",
            "name" : "--limitGenomeGenerateRAM",
            "description" : "maximum available RAM (bytes) for genome generation",
            "info" : {
              "step" : "star",
              "orig_arg" : "--limitGenomeGenerateRAM"
            },
            "example" : [
              31000000000
            ],
            "required" : false,
            "direction" : "input",
            "multiple" : false,
            "multiple_sep" : ":",
            "dest" : "par"
          },
          {
            "type" : "long",
            "name" : "--limitIObufferSize",
            "description" : "max available buffers size (bytes) for input/output, per thread",
            "info" : {
              "step" : "star",
              "orig_arg" : "--limitIObufferSize"
            },
            "example" : [
              30000000,
              50000000
            ],
            "required" : false,
            "direction" : "input",
            "multiple" : true,
            "multiple_sep" : ";",
            "dest" : "par"
          },
          {
            "type" : "long",
            "name" : "--limitOutSAMoneReadBytes",
            "description" : "max size of the SAM record (bytes) for one read. Recommended value: >(2*(LengthMate1+LengthMate2+100)*outFilterMultimapNmax",
            "info" : {
              "step" : "star",
              "orig_arg" : "--limitOutSAMoneReadBytes"
            },
            "example" : [
              100000
            ],
            "required" : false,
            "direction" : "input",
            "multiple" : false,
            "multiple_sep" : ":",
            "dest" : "par"
          },
          {
            "type" : "integer",
            "name" : "--limitOutSJoneRead",
            "description" : "max number of junctions for one read (including all multi-mappers)",
            "info" : {
              "step" : "star",
              "orig_arg" : "--limitOutSJoneRead"
            },
            "example" : [
              1000
            ],
            "required" : false,
            "direction" : "input",
            "multiple" : false,
            "multiple_sep" : ":",
            "dest" : "par"
          },
          {
            "type" : "integer",
            "name" : "--limitOutSJcollapsed",
            "description" : "max number of collapsed junctions",
            "info" : {
              "step" : "star",
              "orig_arg" : "--limitOutSJcollapsed"
            },
            "example" : [
              1000000
            ],
            "required" : false,
            "direction" : "input",
            "multiple" : false,
            "multiple_sep" : ":",
            "dest" : "par"
          },
          {
            "type" : "long",
            "name" : "--limitBAMsortRAM",
            "description" : "maximum available RAM (bytes) for sorting BAM. If =0, it will be set to the genome index size. 0 value can only be used with --genomeLoad NoSharedMemory option.",
            "info" : {
              "step" : "star",
              "orig_arg" : "--limitBAMsortRAM"
            },
            "example" : [
              0
            ],
            "required" : false,
            "direction" : "input",
            "multiple" : false,
            "multiple_sep" : ":",
            "dest" : "par"
          },
          {
            "type" : "integer",
            "name" : "--limitSjdbInsertNsj",
            "description" : "maximum number of junctions to be inserted to the genome on the fly at the mapping stage, including those from annotations and those detected in the 1st step of the 2-pass run",
            "info" : {
              "step" : "star",
              "orig_arg" : "--limitSjdbInsertNsj"
            },
            "example" : [
              1000000
            ],
            "required" : false,
            "direction" : "input",
            "multiple" : false,
            "multiple_sep" : ":",
            "dest" : "par"
          },
          {
            "type" : "integer",
            "name" : "--limitNreadsSoft",
            "description" : "soft limit on the number of reads",
            "info" : {
              "step" : "star",
              "orig_arg" : "--limitNreadsSoft"
            },
            "example" : [
              -1
            ],
            "required" : false,
            "direction" : "input",
            "multiple" : false,
            "multiple_sep" : ":",
            "dest" : "par"
          }
        ]
      },
      {
        "name" : "Output: general",
        "arguments" : [
          {
            "type" : "string",
            "name" : "--outTmpKeep",
            "description" : "whether to keep the temporary files after STAR runs is finished\n\n- None ... remove all temporary files\n- All ... keep all files",
            "info" : {
              "step" : "star",
              "orig_arg" : "--outTmpKeep"
            },
            "required" : false,
            "direction" : "input",
            "multiple" : false,
            "multiple_sep" : ":",
            "dest" : "par"
          },
          {
            "type" : "string",
            "name" : "--outStd",
            "description" : "which output will be directed to stdout (standard out)\n\n- Log                    ... log messages\n- SAM                    ... alignments in SAM format (which normally are output to Aligned.out.sam file), normal standard output will go into Log.std.out\n- BAM_Unsorted           ... alignments in BAM format, unsorted. Requires --outSAMtype BAM Unsorted\n- BAM_SortedByCoordinate ... alignments in BAM format, sorted by coordinate. Requires --outSAMtype BAM SortedByCoordinate\n- BAM_Quant              ... alignments to transcriptome in BAM format, unsorted. Requires --quantMode TranscriptomeSAM",
            "info" : {
              "step" : "star",
              "orig_arg" : "--outStd"
            },
            "example" : [
              "Log"
            ],
            "required" : false,
            "direction" : "input",
            "multiple" : false,
            "multiple_sep" : ":",
            "dest" : "par"
          },
          {
            "type" : "string",
            "name" : "--outReadsUnmapped",
            "description" : "output of unmapped and partially mapped (i.e. mapped only one mate of a paired end read) reads in separate file(s).\n\n- None    ... no output\n- Fastx   ... output in separate fasta/fastq files, Unmapped.out.mate1/2",
            "info" : {
              "step" : "star",
              "orig_arg" : "--outReadsUnmapped"
            },
            "required" : false,
            "direction" : "input",
            "multiple" : false,
            "multiple_sep" : ":",
            "dest" : "par"
          },
          {
            "type" : "integer",
            "name" : "--outQSconversionAdd",
            "description" : "add this number to the quality score (e.g. to convert from Illumina to Sanger, use -31)",
            "info" : {
              "step" : "star",
              "orig_arg" : "--outQSconversionAdd"
            },
            "example" : [
              0
            ],
            "required" : false,
            "direction" : "input",
            "multiple" : false,
            "multiple_sep" : ":",
            "dest" : "par"
          },
          {
            "type" : "string",
            "name" : "--outMultimapperOrder",
            "description" : "order of multimapping alignments in the output files\n\n- Old_2.4             ... quasi-random order used before 2.5.0\n- Random              ... random order of alignments for each multi-mapper. Read mates (pairs) are always adjacent, all alignment for each read stay together. This option will become default in the future releases.",
            "info" : {
              "step" : "star",
              "orig_arg" : "--outMultimapperOrder"
            },
            "example" : [
              "Old_2.4"
            ],
            "required" : false,
            "direction" : "input",
            "multiple" : false,
            "multiple_sep" : ":",
            "dest" : "par"
          }
        ]
      },
      {
        "name" : "Output: SAM and BAM",
        "arguments" : [
          {
            "type" : "string",
            "name" : "--outSAMmode",
            "description" : "mode of SAM output\n\n- None ... no SAM output\n- Full ... full SAM output\n- NoQS ... full SAM but without quality scores",
            "info" : {
              "step" : "star",
              "orig_arg" : "--outSAMmode"
            },
            "example" : [
              "Full"
            ],
            "required" : false,
            "direction" : "input",
            "multiple" : false,
            "multiple_sep" : ":",
            "dest" : "par"
          },
          {
            "type" : "string",
            "name" : "--outSAMstrandField",
            "description" : "Cufflinks-like strand field flag\n\n- None        ... not used\n- intronMotif ... strand derived from the intron motif. This option changes the output alignments: reads with inconsistent and/or non-canonical introns are filtered out.",
            "info" : {
              "step" : "star",
              "orig_arg" : "--outSAMstrandField"
            },
            "required" : false,
            "direction" : "input",
            "multiple" : false,
            "multiple_sep" : ":",
            "dest" : "par"
          },
          {
            "type" : "string",
            "name" : "--outSAMattributes",
            "description" : "a string of desired SAM attributes, in the order desired for the output SAM. Tags can be listed in any combination/order.\n\n***Presets:\n- None        ... no attributes\n- Standard    ... NH HI AS nM\n- All         ... NH HI AS nM NM MD jM jI MC ch\n***Alignment:\n- NH          ... number of loci the reads maps to: =1 for unique mappers, >1 for multimappers. Standard SAM tag.\n- HI          ... multiple alignment index, starts with --outSAMattrIHstart (=1 by default). Standard SAM tag.\n- AS          ... local alignment score, +1/-1 for matches/mismateches, score* penalties for indels and gaps. For PE reads, total score for two mates. Stadnard SAM tag.\n- nM          ... number of mismatches. For PE reads, sum over two mates.\n- NM          ... edit distance to the reference (number of mismatched + inserted + deleted bases) for each mate. Standard SAM tag.\n- MD          ... string encoding mismatched and deleted reference bases (see standard SAM specifications). Standard SAM tag.\n- jM          ... intron motifs for all junctions (i.e. N in CIGAR): 0: non-canonical; 1: GT/AG, 2: CT/AC, 3: GC/AG, 4: CT/GC, 5: AT/AC, 6: GT/AT. If splice junctions database is used, and a junction is annotated, 20 is added to its motif value.\n- jI          ... start and end of introns for all junctions (1-based).\n- XS          ... alignment strand according to --outSAMstrandField.\n- MC          ... mate's CIGAR string. Standard SAM tag.\n- ch          ... marks all segment of all chimeric alingments for --chimOutType WithinBAM output.\n- cN          ... number of bases clipped from the read ends: 5' and 3'\n***Variation:\n- vA          ... variant allele\n- vG          ... genomic coordinate of the variant overlapped by the read.\n- vW          ... 1 - alignment passes WASP filtering; 2,3,4,5,6,7 - alignment does not pass WASP filtering. Requires --waspOutputMode SAMtag.\n***STARsolo:\n- CR CY UR UY ... sequences and quality scores of cell barcodes and UMIs for the solo* demultiplexing.\n- GX GN       ... gene ID and gene name for unique-gene reads.\n- gx gn       ... gene IDs and gene names for unique- and multi-gene reads.\n- CB UB       ... error-corrected cell barcodes and UMIs for solo* demultiplexing. Requires --outSAMtype BAM SortedByCoordinate.\n- sM          ... assessment of CB and UMI.\n- sS          ... sequence of the entire barcode (CB,UMI,adapter).\n- sQ          ... quality of the entire barcode.\n***Unsupported/undocumented:\n- ha          ... haplotype (1/2) when mapping to the diploid genome. Requires genome generated with --genomeTransformType Diploid .\n- rB          ... alignment block read/genomic coordinates.\n- vR          ... read coordinate of the variant.",
            "info" : {
              "step" : "star",
              "orig_arg" : "--outSAMattributes"
            },
            "example" : [
              "Standard"
            ],
            "required" : false,
            "direction" : "input",
            "multiple" : true,
            "multiple_sep" : ";",
            "dest" : "par"
          },
          {
            "type" : "integer",
            "name" : "--outSAMattrIHstart",
            "description" : "start value for the IH attribute. 0 may be required by some downstream software, such as Cufflinks or StringTie.",
            "info" : {
              "step" : "star",
              "orig_arg" : "--outSAMattrIHstart"
            },
            "example" : [
              1
            ],
            "required" : false,
            "direction" : "input",
            "multiple" : false,
            "multiple_sep" : ":",
            "dest" : "par"
          },
          {
            "type" : "string",
            "name" : "--outSAMunmapped",
            "description" : "output of unmapped reads in the SAM format\n\n1st word:\n- None   ... no output\n- Within ... output unmapped reads within the main SAM file (i.e. Aligned.out.sam)\n2nd word:\n- KeepPairs ... record unmapped mate for each alignment, and, in case of unsorted output, keep it adjacent to its mapped mate. Only affects multi-mapping reads.",
            "info" : {
              "step" : "star",
              "orig_arg" : "--outSAMunmapped"
            },
            "required" : false,
            "direction" : "input",
            "multiple" : true,
            "multiple_sep" : ";",
            "dest" : "par"
          },
          {
            "type" : "string",
            "name" : "--outSAMorder",
            "description" : "type of sorting for the SAM output\n\nPaired: one mate after the other for all paired alignments\nPairedKeepInputOrder: one mate after the other for all paired alignments, the order is kept the same as in the input FASTQ files",
            "info" : {
              "step" : "star",
              "orig_arg" : "--outSAMorder"
            },
            "example" : [
              "Paired"
            ],
            "required" : false,
            "direction" : "input",
            "multiple" : false,
            "multiple_sep" : ":",
            "dest" : "par"
          },
          {
            "type" : "string",
            "name" : "--outSAMprimaryFlag",
            "description" : "which alignments are considered primary - all others will be marked with 0x100 bit in the FLAG\n\n- OneBestScore ... only one alignment with the best score is primary\n- AllBestScore ... all alignments with the best score are primary",
            "info" : {
              "step" : "star",
              "orig_arg" : "--outSAMprimaryFlag"
            },
            "example" : [
              "OneBestScore"
            ],
            "required" : false,
            "direction" : "input",
            "multiple" : false,
            "multiple_sep" : ":",
            "dest" : "par"
          },
          {
            "type" : "string",
            "name" : "--outSAMreadID",
            "description" : "read ID record type\n\n- Standard ... first word (until space) from the FASTx read ID line, removing /1,/2 from the end\n- Number   ... read number (index) in the FASTx file",
            "info" : {
              "step" : "star",
              "orig_arg" : "--outSAMreadID"
            },
            "example" : [
              "Standard"
            ],
            "required" : false,
            "direction" : "input",
            "multiple" : false,
            "multiple_sep" : ":",
            "dest" : "par"
          },
          {
            "type" : "integer",
            "name" : "--outSAMmapqUnique",
            "description" : "0 to 255: the MAPQ value for unique mappers",
            "info" : {
              "step" : "star",
              "orig_arg" : "--outSAMmapqUnique"
            },
            "example" : [
              255
            ],
            "required" : false,
            "direction" : "input",
            "multiple" : false,
            "multiple_sep" : ":",
            "dest" : "par"
          },
          {
            "type" : "integer",
            "name" : "--outSAMflagOR",
            "description" : "0 to 65535: sam FLAG will be bitwise OR'd with this value, i.e. FLAG=FLAG | outSAMflagOR. This is applied after all flags have been set by STAR, and after outSAMflagAND. Can be used to set specific bits that are not set otherwise.",
            "info" : {
              "step" : "star",
              "orig_arg" : "--outSAMflagOR"
            },
            "example" : [
              0
            ],
            "required" : false,
            "direction" : "input",
            "multiple" : false,
            "multiple_sep" : ":",
            "dest" : "par"
          },
          {
            "type" : "integer",
            "name" : "--outSAMflagAND",
            "description" : "0 to 65535: sam FLAG will be bitwise AND'd with this value, i.e. FLAG=FLAG & outSAMflagOR. This is applied after all flags have been set by STAR, but before outSAMflagOR. Can be used to unset specific bits that are not set otherwise.",
            "info" : {
              "step" : "star",
              "orig_arg" : "--outSAMflagAND"
            },
            "example" : [
              65535
            ],
            "required" : false,
            "direction" : "input",
            "multiple" : false,
            "multiple_sep" : ":",
            "dest" : "par"
          },
          {
            "type" : "string",
            "name" : "--outSAMattrRGline",
            "description" : "SAM/BAM read group line. The first word contains the read group identifier and must start with \\"ID:\\", e.g. --outSAMattrRGline ID:xxx CN:yy \\"DS:z z z\\".\n\nxxx will be added as RG tag to each output alignment. Any spaces in the tag values have to be double quoted.\nComma separated RG lines correspons to different (comma separated) input files in --readFilesIn. Commas have to be surrounded by spaces, e.g.\n--outSAMattrRGline ID:xxx , ID:zzz \\"DS:z z\\" , ID:yyy DS:yyyy",
            "info" : {
              "step" : "star",
              "orig_arg" : "--outSAMattrRGline"
            },
            "required" : false,
            "direction" : "input",
            "multiple" : true,
            "multiple_sep" : ";",
            "dest" : "par"
          },
          {
            "type" : "string",
            "name" : "--outSAMheaderHD",
            "description" : "@HD (header) line of the SAM header",
            "info" : {
              "step" : "star",
              "orig_arg" : "--outSAMheaderHD"
            },
            "required" : false,
            "direction" : "input",
            "multiple" : true,
            "multiple_sep" : ";",
            "dest" : "par"
          },
          {
            "type" : "string",
            "name" : "--outSAMheaderPG",
            "description" : "extra @PG (software) line of the SAM header (in addition to STAR)",
            "info" : {
              "step" : "star",
              "orig_arg" : "--outSAMheaderPG"
            },
            "required" : false,
            "direction" : "input",
            "multiple" : true,
            "multiple_sep" : ";",
            "dest" : "par"
          },
          {
            "type" : "string",
            "name" : "--outSAMheaderCommentFile",
            "description" : "path to the file with @CO (comment) lines of the SAM header",
            "info" : {
              "step" : "star",
              "orig_arg" : "--outSAMheaderCommentFile"
            },
            "required" : false,
            "direction" : "input",
            "multiple" : false,
            "multiple_sep" : ":",
            "dest" : "par"
          },
          {
            "type" : "string",
            "name" : "--outSAMfilter",
            "description" : "filter the output into main SAM/BAM files\n\n- KeepOnlyAddedReferences ... only keep the reads for which all alignments are to the extra reference sequences added with --genomeFastaFiles at the mapping stage.\n- KeepAllAddedReferences ...  keep all alignments to the extra reference sequences added with --genomeFastaFiles at the mapping stage.",
            "info" : {
              "step" : "star",
              "orig_arg" : "--outSAMfilter"
            },
            "required" : false,
            "direction" : "input",
            "multiple" : true,
            "multiple_sep" : ";",
            "dest" : "par"
          },
          {
            "type" : "integer",
            "name" : "--outSAMmultNmax",
            "description" : "max number of multiple alignments for a read that will be output to the SAM/BAM files. Note that if this value is not equal to -1, the top scoring alignment will be output first\n\n- -1 ... all alignments (up to --outFilterMultimapNmax) will be output",
            "info" : {
              "step" : "star",
              "orig_arg" : "--outSAMmultNmax"
            },
            "example" : [
              -1
            ],
            "required" : false,
            "direction" : "input",
            "multiple" : false,
            "multiple_sep" : ":",
            "dest" : "par"
          },
          {
            "type" : "integer",
            "name" : "--outSAMtlen",
            "description" : "calculation method for the TLEN field in the SAM/BAM files\n\n- 1 ... leftmost base of the (+)strand mate to rightmost base of the (-)mate. (+)sign for the (+)strand mate\n- 2 ... leftmost base of any mate to rightmost base of any mate. (+)sign for the mate with the leftmost base. This is different from 1 for overlapping mates with protruding ends",
            "info" : {
              "step" : "star",
              "orig_arg" : "--outSAMtlen"
            },
            "example" : [
              1
            ],
            "required" : false,
            "direction" : "input",
            "multiple" : false,
            "multiple_sep" : ":",
            "dest" : "par"
          },
          {
            "type" : "integer",
            "name" : "--outBAMcompression",
            "description" : "-1 to 10  BAM compression level, -1=default compression (6?), 0=no compression, 10=maximum compression",
            "info" : {
              "step" : "star",
              "orig_arg" : "--outBAMcompression"
            },
            "example" : [
              1
            ],
            "required" : false,
            "direction" : "input",
            "multiple" : false,
            "multiple_sep" : ":",
            "dest" : "par"
          },
          {
            "type" : "integer",
            "name" : "--outBAMsortingThreadN",
            "description" : ">=0: number of threads for BAM sorting. 0 will default to min(6,--runThreadN).",
            "info" : {
              "step" : "star",
              "orig_arg" : "--outBAMsortingThreadN"
            },
            "example" : [
              0
            ],
            "required" : false,
            "direction" : "input",
            "multiple" : false,
            "multiple_sep" : ":",
            "dest" : "par"
          },
          {
            "type" : "integer",
            "name" : "--outBAMsortingBinsN",
            "description" : ">0:  number of genome bins for coordinate-sorting",
            "info" : {
              "step" : "star",
              "orig_arg" : "--outBAMsortingBinsN"
            },
            "example" : [
              50
            ],
            "required" : false,
            "direction" : "input",
            "multiple" : false,
            "multiple_sep" : ":",
            "dest" : "par"
          }
        ]
      },
      {
        "name" : "BAM processing",
        "arguments" : [
          {
            "type" : "string",
            "name" : "--bamRemoveDuplicatesType",
            "description" : "mark duplicates in the BAM file, for now only works with (i) sorted BAM fed with inputBAMfile, and (ii) for paired-end alignments only\n\n- -                       ... no duplicate removal/marking\n- UniqueIdentical         ... mark all multimappers, and duplicate unique mappers. The coordinates, FLAG, CIGAR must be identical\n- UniqueIdenticalNotMulti  ... mark duplicate unique mappers but not multimappers.",
            "info" : {
              "step" : "star",
              "orig_arg" : "--bamRemoveDuplicatesType"
            },
            "required" : false,
            "direction" : "input",
            "multiple" : false,
            "multiple_sep" : ":",
            "dest" : "par"
          },
          {
            "type" : "integer",
            "name" : "--bamRemoveDuplicatesMate2basesN",
            "description" : "number of bases from the 5' of mate 2 to use in collapsing (e.g. for RAMPAGE)",
            "info" : {
              "step" : "star",
              "orig_arg" : "--bamRemoveDuplicatesMate2basesN"
            },
            "example" : [
              0
            ],
            "required" : false,
            "direction" : "input",
            "multiple" : false,
            "multiple_sep" : ":",
            "dest" : "par"
          }
        ]
      },
      {
        "name" : "Output Wiggle",
        "arguments" : [
          {
            "type" : "string",
            "name" : "--outWigType",
            "description" : "type of signal output, e.g. \\"bedGraph\\" OR \\"bedGraph read1_5p\\". Requires sorted BAM: --outSAMtype BAM SortedByCoordinate .\n\n1st word:\n- None       ... no signal output\n- bedGraph   ... bedGraph format\n- wiggle     ... wiggle format\n2nd word:\n- read1_5p   ... signal from only 5' of the 1st read, useful for CAGE/RAMPAGE etc\n- read2      ... signal from only 2nd read",
            "info" : {
              "step" : "star",
              "orig_arg" : "--outWigType"
            },
            "required" : false,
            "direction" : "input",
            "multiple" : true,
            "multiple_sep" : ";",
            "dest" : "par"
          },
          {
            "type" : "string",
            "name" : "--outWigStrand",
            "description" : "strandedness of wiggle/bedGraph output\n\n- Stranded   ...  separate strands, str1 and str2\n- Unstranded ...  collapsed strands",
            "info" : {
              "step" : "star",
              "orig_arg" : "--outWigStrand"
            },
            "example" : [
              "Stranded"
            ],
            "required" : false,
            "direction" : "input",
            "multiple" : false,
            "multiple_sep" : ":",
            "dest" : "par"
          },
          {
            "type" : "string",
            "name" : "--outWigReferencesPrefix",
            "description" : "prefix matching reference names to include in the output wiggle file, e.g. \\"chr\\", default \\"-\\" - include all references",
            "info" : {
              "step" : "star",
              "orig_arg" : "--outWigReferencesPrefix"
            },
            "required" : false,
            "direction" : "input",
            "multiple" : false,
            "multiple_sep" : ":",
            "dest" : "par"
          },
          {
            "type" : "string",
            "name" : "--outWigNorm",
            "description" : "type of normalization for the signal\n\n- RPM    ... reads per million of mapped reads\n- None   ... no normalization, \\"raw\\" counts",
            "info" : {
              "step" : "star",
              "orig_arg" : "--outWigNorm"
            },
            "example" : [
              "RPM"
            ],
            "required" : false,
            "direction" : "input",
            "multiple" : false,
            "multiple_sep" : ":",
            "dest" : "par"
          }
        ]
      },
      {
        "name" : "Output Filtering",
        "arguments" : [
          {
            "type" : "string",
            "name" : "--outFilterType",
            "description" : "type of filtering\n\n- Normal  ... standard filtering using only current alignment\n- BySJout ... keep only those reads that contain junctions that passed filtering into SJ.out.tab",
            "info" : {
              "step" : "star",
              "orig_arg" : "--outFilterType"
            },
            "example" : [
              "Normal"
            ],
            "required" : false,
            "direction" : "input",
            "multiple" : false,
            "multiple_sep" : ":",
            "dest" : "par"
          },
          {
            "type" : "integer",
            "name" : "--outFilterMultimapScoreRange",
            "description" : "the score range below the maximum score for multimapping alignments",
            "info" : {
              "step" : "star",
              "orig_arg" : "--outFilterMultimapScoreRange"
            },
            "example" : [
              1
            ],
            "required" : false,
            "direction" : "input",
            "multiple" : false,
            "multiple_sep" : ":",
            "dest" : "par"
          },
          {
            "type" : "integer",
            "name" : "--outFilterMultimapNmax",
            "description" : "maximum number of loci the read is allowed to map to. Alignments (all of them) will be output only if the read maps to no more loci than this value.\n\nOtherwise no alignments will be output, and the read will be counted as \\"mapped to too many loci\\" in the Log.final.out .",
            "info" : {
              "step" : "star",
              "orig_arg" : "--outFilterMultimapNmax"
            },
            "example" : [
              10
            ],
            "required" : false,
            "direction" : "input",
            "multiple" : false,
            "multiple_sep" : ":",
            "dest" : "par"
          },
          {
            "type" : "integer",
            "name" : "--outFilterMismatchNmax",
            "description" : "alignment will be output only if it has no more mismatches than this value.",
            "info" : {
              "step" : "star",
              "orig_arg" : "--outFilterMismatchNmax"
            },
            "example" : [
              10
            ],
            "required" : false,
            "direction" : "input",
            "multiple" : false,
            "multiple_sep" : ":",
            "dest" : "par"
          },
          {
            "type" : "double",
            "name" : "--outFilterMismatchNoverLmax",
            "description" : "alignment will be output only if its ratio of mismatches to *mapped* length is less than or equal to this value.",
            "info" : {
              "step" : "star",
              "orig_arg" : "--outFilterMismatchNoverLmax"
            },
            "example" : [
              0.3
            ],
            "required" : false,
            "direction" : "input",
            "multiple" : false,
            "multiple_sep" : ":",
            "dest" : "par"
          },
          {
            "type" : "double",
            "name" : "--outFilterMismatchNoverReadLmax",
            "description" : "alignment will be output only if its ratio of mismatches to *read* length is less than or equal to this value.",
            "info" : {
              "step" : "star",
              "orig_arg" : "--outFilterMismatchNoverReadLmax"
            },
            "example" : [
              1.0
            ],
            "required" : false,
            "direction" : "input",
            "multiple" : false,
            "multiple_sep" : ":",
            "dest" : "par"
          },
          {
            "type" : "integer",
            "name" : "--outFilterScoreMin",
            "description" : "alignment will be output only if its score is higher than or equal to this value.",
            "info" : {
              "step" : "star",
              "orig_arg" : "--outFilterScoreMin"
            },
            "example" : [
              0
            ],
            "required" : false,
            "direction" : "input",
            "multiple" : false,
            "multiple_sep" : ":",
            "dest" : "par"
          },
          {
            "type" : "double",
            "name" : "--outFilterScoreMinOverLread",
            "description" : "same as outFilterScoreMin, but normalized to read length (sum of mates' lengths for paired-end reads)",
            "info" : {
              "step" : "star",
              "orig_arg" : "--outFilterScoreMinOverLread"
            },
            "example" : [
              0.66
            ],
            "required" : false,
            "direction" : "input",
            "multiple" : false,
            "multiple_sep" : ":",
            "dest" : "par"
          },
          {
            "type" : "integer",
            "name" : "--outFilterMatchNmin",
            "description" : "alignment will be output only if the number of matched bases is higher than or equal to this value.",
            "info" : {
              "step" : "star",
              "orig_arg" : "--outFilterMatchNmin"
            },
            "example" : [
              0
            ],
            "required" : false,
            "direction" : "input",
            "multiple" : false,
            "multiple_sep" : ":",
            "dest" : "par"
          },
          {
            "type" : "double",
            "name" : "--outFilterMatchNminOverLread",
            "description" : "sam as outFilterMatchNmin, but normalized to the read length (sum of mates' lengths for paired-end reads).",
            "info" : {
              "step" : "star",
              "orig_arg" : "--outFilterMatchNminOverLread"
            },
            "example" : [
              0.66
            ],
            "required" : false,
            "direction" : "input",
            "multiple" : false,
            "multiple_sep" : ":",
            "dest" : "par"
          },
          {
            "type" : "string",
            "name" : "--outFilterIntronMotifs",
            "description" : "filter alignment using their motifs\n\n- None                           ... no filtering\n- RemoveNoncanonical             ... filter out alignments that contain non-canonical junctions\n- RemoveNoncanonicalUnannotated  ... filter out alignments that contain non-canonical unannotated junctions when using annotated splice junctions database. The annotated non-canonical junctions will be kept.",
            "info" : {
              "step" : "star",
              "orig_arg" : "--outFilterIntronMotifs"
            },
            "required" : false,
            "direction" : "input",
            "multiple" : false,
            "multiple_sep" : ":",
            "dest" : "par"
          },
          {
            "type" : "string",
            "name" : "--outFilterIntronStrands",
            "description" : "filter alignments\n\n- RemoveInconsistentStrands      ... remove alignments that have junctions with inconsistent strands\n- None                           ... no filtering",
            "info" : {
              "step" : "star",
              "orig_arg" : "--outFilterIntronStrands"
            },
            "example" : [
              "RemoveInconsistentStrands"
            ],
            "required" : false,
            "direction" : "input",
            "multiple" : false,
            "multiple_sep" : ":",
            "dest" : "par"
          }
        ]
      },
      {
        "name" : "Output splice junctions (SJ.out.tab)",
        "arguments" : [
          {
            "type" : "string",
            "name" : "--outSJtype",
            "description" : "type of splice junction output\n\n- Standard    ... standard SJ.out.tab output\n- None        ... no splice junction output",
            "info" : {
              "step" : "star",
              "orig_arg" : "--outSJtype"
            },
            "example" : [
              "Standard"
            ],
            "required" : false,
            "direction" : "input",
            "multiple" : false,
            "multiple_sep" : ":",
            "dest" : "par"
          }
        ]
      },
      {
        "name" : "Output Filtering: Splice Junctions",
        "arguments" : [
          {
            "type" : "string",
            "name" : "--outSJfilterReads",
            "description" : "which reads to consider for collapsed splice junctions output\n\n- All     ... all reads, unique- and multi-mappers\n- Unique  ... uniquely mapping reads only",
            "info" : {
              "step" : "star",
              "orig_arg" : "--outSJfilterReads"
            },
            "example" : [
              "All"
            ],
            "required" : false,
            "direction" : "input",
            "multiple" : false,
            "multiple_sep" : ":",
            "dest" : "par"
          },
          {
            "type" : "integer",
            "name" : "--outSJfilterOverhangMin",
            "description" : "minimum overhang length for splice junctions on both sides for: (1) non-canonical motifs, (2) GT/AG and CT/AC motif, (3) GC/AG and CT/GC motif, (4) AT/AC and GT/AT motif. -1 means no output for that motif\n\ndoes not apply to annotated junctions",
            "info" : {
              "step" : "star",
              "orig_arg" : "--outSJfilterOverhangMin"
            },
            "example" : [
              30,
              12,
              12,
              12
            ],
            "required" : false,
            "direction" : "input",
            "multiple" : true,
            "multiple_sep" : ";",
            "dest" : "par"
          },
          {
            "type" : "integer",
            "name" : "--outSJfilterCountUniqueMin",
            "description" : "minimum uniquely mapping read count per junction for: (1) non-canonical motifs, (2) GT/AG and CT/AC motif, (3) GC/AG and CT/GC motif, (4) AT/AC and GT/AT motif. -1 means no output for that motif\n\nJunctions are output if one of outSJfilterCountUniqueMin OR outSJfilterCountTotalMin conditions are satisfied\ndoes not apply to annotated junctions",
            "info" : {
              "step" : "star",
              "orig_arg" : "--outSJfilterCountUniqueMin"
            },
            "example" : [
              3,
              1,
              1,
              1
            ],
            "required" : false,
            "direction" : "input",
            "multiple" : true,
            "multiple_sep" : ";",
            "dest" : "par"
          },
          {
            "type" : "integer",
            "name" : "--outSJfilterCountTotalMin",
            "description" : "minimum total (multi-mapping+unique) read count per junction for: (1) non-canonical motifs, (2) GT/AG and CT/AC motif, (3) GC/AG and CT/GC motif, (4) AT/AC and GT/AT motif. -1 means no output for that motif\n\nJunctions are output if one of outSJfilterCountUniqueMin OR outSJfilterCountTotalMin conditions are satisfied\ndoes not apply to annotated junctions",
            "info" : {
              "step" : "star",
              "orig_arg" : "--outSJfilterCountTotalMin"
            },
            "example" : [
              3,
              1,
              1,
              1
            ],
            "required" : false,
            "direction" : "input",
            "multiple" : true,
            "multiple_sep" : ";",
            "dest" : "par"
          },
          {
            "type" : "integer",
            "name" : "--outSJfilterDistToOtherSJmin",
            "description" : "minimum allowed distance to other junctions' donor/acceptor\n\ndoes not apply to annotated junctions",
            "info" : {
              "step" : "star",
              "orig_arg" : "--outSJfilterDistToOtherSJmin"
            },
            "example" : [
              10,
              0,
              5,
              10
            ],
            "required" : false,
            "direction" : "input",
            "multiple" : true,
            "multiple_sep" : ";",
            "dest" : "par"
          },
          {
            "type" : "integer",
            "name" : "--outSJfilterIntronMaxVsReadN",
            "description" : "maximum gap allowed for junctions supported by 1,2,3,,,N reads\n\ni.e. by default junctions supported by 1 read can have gaps <=50000b, by 2 reads: <=100000b, by 3 reads: <=200000. by >=4 reads any gap <=alignIntronMax\ndoes not apply to annotated junctions",
            "info" : {
              "step" : "star",
              "orig_arg" : "--outSJfilterIntronMaxVsReadN"
            },
            "example" : [
              50000,
              100000,
              200000
            ],
            "required" : false,
            "direction" : "input",
            "multiple" : true,
            "multiple_sep" : ";",
            "dest" : "par"
          }
        ]
      },
      {
        "name" : "Scoring",
        "arguments" : [
          {
            "type" : "integer",
            "name" : "--scoreGap",
            "description" : "splice junction penalty (independent on intron motif)",
            "info" : {
              "step" : "star",
              "orig_arg" : "--scoreGap"
            },
            "example" : [
              0
            ],
            "required" : false,
            "direction" : "input",
            "multiple" : false,
            "multiple_sep" : ":",
            "dest" : "par"
          },
          {
            "type" : "integer",
            "name" : "--scoreGapNoncan",
''' + '''            "description" : "non-canonical junction penalty (in addition to scoreGap)",
            "info" : {
              "step" : "star",
              "orig_arg" : "--scoreGapNoncan"
            },
            "example" : [
              -8
            ],
            "required" : false,
            "direction" : "input",
            "multiple" : false,
            "multiple_sep" : ":",
            "dest" : "par"
          },
          {
            "type" : "integer",
            "name" : "--scoreGapGCAG",
            "description" : "GC/AG and CT/GC junction penalty (in addition to scoreGap)",
            "info" : {
              "step" : "star",
              "orig_arg" : "--scoreGapGCAG"
            },
            "example" : [
              -4
            ],
            "required" : false,
            "direction" : "input",
            "multiple" : false,
            "multiple_sep" : ":",
            "dest" : "par"
          },
          {
            "type" : "integer",
            "name" : "--scoreGapATAC",
            "description" : "AT/AC  and GT/AT junction penalty  (in addition to scoreGap)",
            "info" : {
              "step" : "star",
              "orig_arg" : "--scoreGapATAC"
            },
            "example" : [
              -8
            ],
            "required" : false,
            "direction" : "input",
            "multiple" : false,
            "multiple_sep" : ":",
            "dest" : "par"
          },
          {
            "type" : "integer",
            "name" : "--scoreGenomicLengthLog2scale",
            "description" : "extra score logarithmically scaled with genomic length of the alignment: scoreGenomicLengthLog2scale*log2(genomicLength)",
            "info" : {
              "step" : "star",
              "orig_arg" : "--scoreGenomicLengthLog2scale"
            },
            "example" : [
              0
            ],
            "required" : false,
            "direction" : "input",
            "multiple" : false,
            "multiple_sep" : ":",
            "dest" : "par"
          },
          {
            "type" : "integer",
            "name" : "--scoreDelOpen",
            "description" : "deletion open penalty",
            "info" : {
              "step" : "star",
              "orig_arg" : "--scoreDelOpen"
            },
            "example" : [
              -2
            ],
            "required" : false,
            "direction" : "input",
            "multiple" : false,
            "multiple_sep" : ":",
            "dest" : "par"
          },
          {
            "type" : "integer",
            "name" : "--scoreDelBase",
            "description" : "deletion extension penalty per base (in addition to scoreDelOpen)",
            "info" : {
              "step" : "star",
              "orig_arg" : "--scoreDelBase"
            },
            "example" : [
              -2
            ],
            "required" : false,
            "direction" : "input",
            "multiple" : false,
            "multiple_sep" : ":",
            "dest" : "par"
          },
          {
            "type" : "integer",
            "name" : "--scoreInsOpen",
            "description" : "insertion open penalty",
            "info" : {
              "step" : "star",
              "orig_arg" : "--scoreInsOpen"
            },
            "example" : [
              -2
            ],
            "required" : false,
            "direction" : "input",
            "multiple" : false,
            "multiple_sep" : ":",
            "dest" : "par"
          },
          {
            "type" : "integer",
            "name" : "--scoreInsBase",
            "description" : "insertion extension penalty per base (in addition to scoreInsOpen)",
            "info" : {
              "step" : "star",
              "orig_arg" : "--scoreInsBase"
            },
            "example" : [
              -2
            ],
            "required" : false,
            "direction" : "input",
            "multiple" : false,
            "multiple_sep" : ":",
            "dest" : "par"
          },
          {
            "type" : "integer",
            "name" : "--scoreStitchSJshift",
            "description" : "maximum score reduction while searching for SJ boundaries in the stitching step",
            "info" : {
              "step" : "star",
              "orig_arg" : "--scoreStitchSJshift"
            },
            "example" : [
              1
            ],
            "required" : false,
            "direction" : "input",
            "multiple" : false,
            "multiple_sep" : ":",
            "dest" : "par"
          }
        ]
      },
      {
        "name" : "Alignments and Seeding",
        "arguments" : [
          {
            "type" : "integer",
            "name" : "--seedSearchStartLmax",
            "description" : "defines the search start point through the read - the read is split into pieces no longer than this value",
            "info" : {
              "step" : "star",
              "orig_arg" : "--seedSearchStartLmax"
            },
            "example" : [
              50
            ],
            "required" : false,
            "direction" : "input",
            "multiple" : false,
            "multiple_sep" : ":",
            "dest" : "par"
          },
          {
            "type" : "double",
            "name" : "--seedSearchStartLmaxOverLread",
            "description" : "seedSearchStartLmax normalized to read length (sum of mates' lengths for paired-end reads)",
            "info" : {
              "step" : "star",
              "orig_arg" : "--seedSearchStartLmaxOverLread"
            },
            "example" : [
              1.0
            ],
            "required" : false,
            "direction" : "input",
            "multiple" : false,
            "multiple_sep" : ":",
            "dest" : "par"
          },
          {
            "type" : "integer",
            "name" : "--seedSearchLmax",
            "description" : "defines the maximum length of the seeds, if =0 seed length is not limited",
            "info" : {
              "step" : "star",
              "orig_arg" : "--seedSearchLmax"
            },
            "example" : [
              0
            ],
            "required" : false,
            "direction" : "input",
            "multiple" : false,
            "multiple_sep" : ":",
            "dest" : "par"
          },
          {
            "type" : "integer",
            "name" : "--seedMultimapNmax",
            "description" : "only pieces that map fewer than this value are utilized in the stitching procedure",
            "info" : {
              "step" : "star",
              "orig_arg" : "--seedMultimapNmax"
            },
            "example" : [
              10000
            ],
            "required" : false,
            "direction" : "input",
            "multiple" : false,
            "multiple_sep" : ":",
            "dest" : "par"
          },
          {
            "type" : "integer",
            "name" : "--seedPerReadNmax",
            "description" : "max number of seeds per read",
            "info" : {
              "step" : "star",
              "orig_arg" : "--seedPerReadNmax"
            },
            "example" : [
              1000
            ],
            "required" : false,
            "direction" : "input",
            "multiple" : false,
            "multiple_sep" : ":",
            "dest" : "par"
          },
          {
            "type" : "integer",
            "name" : "--seedPerWindowNmax",
            "description" : "max number of seeds per window",
            "info" : {
              "step" : "star",
              "orig_arg" : "--seedPerWindowNmax"
            },
            "example" : [
              50
            ],
            "required" : false,
            "direction" : "input",
            "multiple" : false,
            "multiple_sep" : ":",
            "dest" : "par"
          },
          {
            "type" : "integer",
            "name" : "--seedNoneLociPerWindow",
            "description" : "max number of one seed loci per window",
            "info" : {
              "step" : "star",
              "orig_arg" : "--seedNoneLociPerWindow"
            },
            "example" : [
              10
            ],
            "required" : false,
            "direction" : "input",
            "multiple" : false,
            "multiple_sep" : ":",
            "dest" : "par"
          },
          {
            "type" : "integer",
            "name" : "--seedSplitMin",
            "description" : "min length of the seed sequences split by Ns or mate gap",
            "info" : {
              "step" : "star",
              "orig_arg" : "--seedSplitMin"
            },
            "example" : [
              12
            ],
            "required" : false,
            "direction" : "input",
            "multiple" : false,
            "multiple_sep" : ":",
            "dest" : "par"
          },
          {
            "type" : "integer",
            "name" : "--seedMapMin",
            "description" : "min length of seeds to be mapped",
            "info" : {
              "step" : "star",
              "orig_arg" : "--seedMapMin"
            },
            "example" : [
              5
            ],
            "required" : false,
            "direction" : "input",
            "multiple" : false,
            "multiple_sep" : ":",
            "dest" : "par"
          },
          {
            "type" : "integer",
            "name" : "--alignIntronMin",
            "description" : "minimum intron size, genomic gap is considered intron if its length>=alignIntronMin, otherwise it is considered Deletion",
            "info" : {
              "step" : "star",
              "orig_arg" : "--alignIntronMin"
            },
            "example" : [
              21
            ],
            "required" : false,
            "direction" : "input",
            "multiple" : false,
            "multiple_sep" : ":",
            "dest" : "par"
          },
          {
            "type" : "integer",
            "name" : "--alignIntronMax",
            "description" : "maximum intron size, if 0, max intron size will be determined by (2^winBinNbits)*winAnchorDistNbins",
            "info" : {
              "step" : "star",
              "orig_arg" : "--alignIntronMax"
            },
            "example" : [
              0
            ],
            "required" : false,
            "direction" : "input",
            "multiple" : false,
            "multiple_sep" : ":",
            "dest" : "par"
          },
          {
            "type" : "integer",
            "name" : "--alignMatesGapMax",
            "description" : "maximum gap between two mates, if 0, max intron gap will be determined by (2^winBinNbits)*winAnchorDistNbins",
            "info" : {
              "step" : "star",
              "orig_arg" : "--alignMatesGapMax"
            },
            "example" : [
              0
            ],
            "required" : false,
            "direction" : "input",
            "multiple" : false,
            "multiple_sep" : ":",
            "dest" : "par"
          },
          {
            "type" : "integer",
            "name" : "--alignSJoverhangMin",
            "description" : "minimum overhang (i.e. block size) for spliced alignments",
            "info" : {
              "step" : "star",
              "orig_arg" : "--alignSJoverhangMin"
            },
            "example" : [
              5
            ],
            "required" : false,
            "direction" : "input",
            "multiple" : false,
            "multiple_sep" : ":",
            "dest" : "par"
          },
          {
            "type" : "integer",
            "name" : "--alignSJstitchMismatchNmax",
            "description" : "maximum number of mismatches for stitching of the splice junctions (-1: no limit).\n\n(1) non-canonical motifs, (2) GT/AG and CT/AC motif, (3) GC/AG and CT/GC motif, (4) AT/AC and GT/AT motif.",
            "info" : {
              "step" : "star",
              "orig_arg" : "--alignSJstitchMismatchNmax"
            },
            "example" : [
              0,
              -1,
              0,
              0
            ],
            "required" : false,
            "direction" : "input",
            "multiple" : true,
            "multiple_sep" : ";",
            "dest" : "par"
          },
          {
            "type" : "integer",
            "name" : "--alignSJDBoverhangMin",
            "description" : "minimum overhang (i.e. block size) for annotated (sjdb) spliced alignments",
            "info" : {
              "step" : "star",
              "orig_arg" : "--alignSJDBoverhangMin"
            },
            "example" : [
              3
            ],
            "required" : false,
            "direction" : "input",
            "multiple" : false,
            "multiple_sep" : ":",
            "dest" : "par"
          },
          {
            "type" : "integer",
            "name" : "--alignSplicedMateMapLmin",
            "description" : "minimum mapped length for a read mate that is spliced",
            "info" : {
              "step" : "star",
              "orig_arg" : "--alignSplicedMateMapLmin"
            },
            "example" : [
              0
            ],
            "required" : false,
            "direction" : "input",
            "multiple" : false,
            "multiple_sep" : ":",
            "dest" : "par"
          },
          {
            "type" : "double",
            "name" : "--alignSplicedMateMapLminOverLmate",
            "description" : "alignSplicedMateMapLmin normalized to mate length",
            "info" : {
              "step" : "star",
              "orig_arg" : "--alignSplicedMateMapLminOverLmate"
            },
            "example" : [
              0.66
            ],
            "required" : false,
            "direction" : "input",
            "multiple" : false,
            "multiple_sep" : ":",
            "dest" : "par"
          },
          {
            "type" : "integer",
            "name" : "--alignWindowsPerReadNmax",
            "description" : "max number of windows per read",
            "info" : {
              "step" : "star",
              "orig_arg" : "--alignWindowsPerReadNmax"
            },
            "example" : [
              10000
            ],
            "required" : false,
            "direction" : "input",
            "multiple" : false,
            "multiple_sep" : ":",
            "dest" : "par"
          },
          {
            "type" : "integer",
            "name" : "--alignTranscriptsPerWindowNmax",
            "description" : "max number of transcripts per window",
            "info" : {
              "step" : "star",
              "orig_arg" : "--alignTranscriptsPerWindowNmax"
            },
            "example" : [
              100
            ],
            "required" : false,
            "direction" : "input",
            "multiple" : false,
            "multiple_sep" : ":",
            "dest" : "par"
          },
          {
            "type" : "integer",
            "name" : "--alignTranscriptsPerReadNmax",
            "description" : "max number of different alignments per read to consider",
            "info" : {
              "step" : "star",
              "orig_arg" : "--alignTranscriptsPerReadNmax"
            },
            "example" : [
              10000
            ],
            "required" : false,
            "direction" : "input",
            "multiple" : false,
            "multiple_sep" : ":",
            "dest" : "par"
          },
          {
            "type" : "string",
            "name" : "--alignEndsType",
            "description" : "type of read ends alignment\n\n- Local             ... standard local alignment with soft-clipping allowed\n- EndToEnd          ... force end-to-end read alignment, do not soft-clip\n- Extend5pOfRead1   ... fully extend only the 5p of the read1, all other ends: local alignment\n- Extend5pOfReads12 ... fully extend only the 5p of the both read1 and read2, all other ends: local alignment",
            "info" : {
              "step" : "star",
              "orig_arg" : "--alignEndsType"
            },
            "example" : [
              "Local"
            ],
            "required" : false,
            "direction" : "input",
            "multiple" : false,
            "multiple_sep" : ":",
            "dest" : "par"
          },
          {
            "type" : "string",
            "name" : "--alignEndsProtrude",
            "description" : "allow protrusion of alignment ends, i.e. start (end) of the +strand mate downstream of the start (end) of the -strand mate\n\n1st word: int: maximum number of protrusion bases allowed\n2nd word: string:\n-                     ConcordantPair ... report alignments with non-zero protrusion as concordant pairs\n-                     DiscordantPair ... report alignments with non-zero protrusion as discordant pairs",
            "info" : {
              "step" : "star",
              "orig_arg" : "--alignEndsProtrude"
            },
            "example" : [
              "0    ConcordantPair"
            ],
            "required" : false,
            "direction" : "input",
            "multiple" : false,
            "multiple_sep" : ":",
            "dest" : "par"
          },
          {
            "type" : "string",
            "name" : "--alignSoftClipAtReferenceEnds",
            "description" : "allow the soft-clipping of the alignments past the end of the chromosomes\n\n- Yes ... allow\n- No  ... prohibit, useful for compatibility with Cufflinks",
            "info" : {
              "step" : "star",
              "orig_arg" : "--alignSoftClipAtReferenceEnds"
            },
            "example" : [
              "Yes"
            ],
            "required" : false,
            "direction" : "input",
            "multiple" : false,
            "multiple_sep" : ":",
            "dest" : "par"
          },
          {
            "type" : "string",
            "name" : "--alignInsertionFlush",
            "description" : "how to flush ambiguous insertion positions\n\n- None    ... insertions are not flushed\n- Right   ... insertions are flushed to the right",
            "info" : {
              "step" : "star",
              "orig_arg" : "--alignInsertionFlush"
            },
            "required" : false,
            "direction" : "input",
            "multiple" : false,
            "multiple_sep" : ":",
            "dest" : "par"
          }
        ]
      },
      {
        "name" : "Paired-End reads",
        "arguments" : [
          {
            "type" : "integer",
            "name" : "--peOverlapNbasesMin",
            "description" : "minimum number of overlapping bases to trigger mates merging and realignment. Specify >0 value to switch on the \\"merginf of overlapping mates\\" algorithm.",
            "info" : {
              "step" : "star",
              "orig_arg" : "--peOverlapNbasesMin"
            },
            "example" : [
              0
            ],
            "required" : false,
            "direction" : "input",
            "multiple" : false,
            "multiple_sep" : ":",
            "dest" : "par"
          },
          {
            "type" : "double",
            "name" : "--peOverlapMMp",
            "description" : "maximum proportion of mismatched bases in the overlap area",
            "info" : {
              "step" : "star",
              "orig_arg" : "--peOverlapMMp"
            },
            "example" : [
              0.01
            ],
            "required" : false,
            "direction" : "input",
            "multiple" : false,
            "multiple_sep" : ":",
            "dest" : "par"
          }
        ]
      },
      {
        "name" : "Windows, Anchors, Binning",
        "arguments" : [
          {
            "type" : "integer",
            "name" : "--winAnchorMultimapNmax",
            "description" : "max number of loci anchors are allowed to map to",
            "info" : {
              "step" : "star",
              "orig_arg" : "--winAnchorMultimapNmax"
            },
            "example" : [
              50
            ],
            "required" : false,
            "direction" : "input",
            "multiple" : false,
            "multiple_sep" : ":",
            "dest" : "par"
          },
          {
            "type" : "integer",
            "name" : "--winBinNbits",
            "description" : "=log2(winBin), where winBin is the size of the bin for the windows/clustering, each window will occupy an integer number of bins.",
            "info" : {
              "step" : "star",
              "orig_arg" : "--winBinNbits"
            },
            "example" : [
              16
            ],
            "required" : false,
            "direction" : "input",
            "multiple" : false,
            "multiple_sep" : ":",
            "dest" : "par"
          },
          {
            "type" : "integer",
            "name" : "--winAnchorDistNbins",
            "description" : "max number of bins between two anchors that allows aggregation of anchors into one window",
            "info" : {
              "step" : "star",
              "orig_arg" : "--winAnchorDistNbins"
            },
            "example" : [
              9
            ],
            "required" : false,
            "direction" : "input",
            "multiple" : false,
            "multiple_sep" : ":",
            "dest" : "par"
          },
          {
            "type" : "integer",
            "name" : "--winFlankNbins",
            "description" : "log2(winFlank), where win Flank is the size of the left and right flanking regions for each window",
            "info" : {
              "step" : "star",
              "orig_arg" : "--winFlankNbins"
            },
            "example" : [
              4
            ],
            "required" : false,
            "direction" : "input",
            "multiple" : false,
            "multiple_sep" : ":",
            "dest" : "par"
          },
          {
            "type" : "double",
            "name" : "--winReadCoverageRelativeMin",
            "description" : "minimum relative coverage of the read sequence by the seeds in a window, for STARlong algorithm only.",
            "info" : {
              "step" : "star",
              "orig_arg" : "--winReadCoverageRelativeMin"
            },
            "example" : [
              0.5
            ],
            "required" : false,
            "direction" : "input",
            "multiple" : false,
            "multiple_sep" : ":",
            "dest" : "par"
          },
          {
            "type" : "integer",
            "name" : "--winReadCoverageBasesMin",
            "description" : "minimum number of bases covered by the seeds in a window , for STARlong algorithm only.",
            "info" : {
              "step" : "star",
              "orig_arg" : "--winReadCoverageBasesMin"
            },
            "example" : [
              0
            ],
            "required" : false,
            "direction" : "input",
            "multiple" : false,
            "multiple_sep" : ":",
            "dest" : "par"
          }
        ]
      },
      {
        "name" : "Chimeric Alignments",
        "arguments" : [
          {
            "type" : "string",
            "name" : "--chimOutType",
            "description" : "type of chimeric output\n\n- Junctions       ... Chimeric.out.junction\n- SeparateSAMold  ... output old SAM into separate Chimeric.out.sam file\n- WithinBAM       ... output into main aligned BAM files (Aligned.*.bam)\n- WithinBAM HardClip  ... (default) hard-clipping in the CIGAR for supplemental chimeric alignments (default if no 2nd word is present)\n- WithinBAM SoftClip  ... soft-clipping in the CIGAR for supplemental chimeric alignments",
            "info" : {
              "step" : "star",
              "orig_arg" : "--chimOutType"
            },
            "example" : [
              "Junctions"
            ],
            "required" : false,
            "direction" : "input",
            "multiple" : true,
            "multiple_sep" : ";",
            "dest" : "par"
          },
          {
            "type" : "integer",
            "name" : "--chimSegmentMin",
            "description" : "minimum length of chimeric segment length, if ==0, no chimeric output",
            "info" : {
              "step" : "star",
              "orig_arg" : "--chimSegmentMin"
            },
            "example" : [
              0
            ],
            "required" : false,
            "direction" : "input",
            "multiple" : false,
            "multiple_sep" : ":",
            "dest" : "par"
          },
          {
            "type" : "integer",
            "name" : "--chimScoreMin",
            "description" : "minimum total (summed) score of the chimeric segments",
            "info" : {
              "step" : "star",
              "orig_arg" : "--chimScoreMin"
            },
            "example" : [
              0
            ],
            "required" : false,
            "direction" : "input",
            "multiple" : false,
            "multiple_sep" : ":",
            "dest" : "par"
          },
          {
            "type" : "integer",
            "name" : "--chimScoreDropMax",
            "description" : "max drop (difference) of chimeric score (the sum of scores of all chimeric segments) from the read length",
            "info" : {
              "step" : "star",
              "orig_arg" : "--chimScoreDropMax"
            },
            "example" : [
              20
            ],
            "required" : false,
            "direction" : "input",
            "multiple" : false,
            "multiple_sep" : ":",
            "dest" : "par"
          },
          {
            "type" : "integer",
            "name" : "--chimScoreSeparation",
            "description" : "minimum difference (separation) between the best chimeric score and the next one",
            "info" : {
              "step" : "star",
              "orig_arg" : "--chimScoreSeparation"
            },
            "example" : [
              10
            ],
            "required" : false,
            "direction" : "input",
            "multiple" : false,
            "multiple_sep" : ":",
            "dest" : "par"
          },
          {
            "type" : "integer",
            "name" : "--chimScoreJunctionNonGTAG",
            "description" : "penalty for a non-GT/AG chimeric junction",
            "info" : {
              "step" : "star",
              "orig_arg" : "--chimScoreJunctionNonGTAG"
            },
            "example" : [
              -1
            ],
            "required" : false,
            "direction" : "input",
            "multiple" : false,
            "multiple_sep" : ":",
            "dest" : "par"
          },
          {
            "type" : "integer",
            "name" : "--chimJunctionOverhangMin",
            "description" : "minimum overhang for a chimeric junction",
            "info" : {
              "step" : "star",
              "orig_arg" : "--chimJunctionOverhangMin"
            },
            "example" : [
              20
            ],
            "required" : false,
            "direction" : "input",
            "multiple" : false,
            "multiple_sep" : ":",
            "dest" : "par"
          },
          {
            "type" : "integer",
            "name" : "--chimSegmentReadGapMax",
            "description" : "maximum gap in the read sequence between chimeric segments",
            "info" : {
              "step" : "star",
              "orig_arg" : "--chimSegmentReadGapMax"
            },
            "example" : [
              0
            ],
            "required" : false,
            "direction" : "input",
            "multiple" : false,
            "multiple_sep" : ":",
            "dest" : "par"
          },
          {
            "type" : "string",
            "name" : "--chimFilter",
            "description" : "different filters for chimeric alignments\n\n- None ... no filtering\n- banGenomicN ... Ns are not allowed in the genome sequence around the chimeric junction",
            "info" : {
              "step" : "star",
              "orig_arg" : "--chimFilter"
            },
            "example" : [
              "banGenomicN"
            ],
            "required" : false,
            "direction" : "input",
            "multiple" : true,
            "multiple_sep" : ";",
            "dest" : "par"
          },
          {
            "type" : "integer",
            "name" : "--chimMainSegmentMultNmax",
            "description" : "maximum number of multi-alignments for the main chimeric segment. =1 will prohibit multimapping main segments.",
            "info" : {
              "step" : "star",
              "orig_arg" : "--chimMainSegmentMultNmax"
            },
            "example" : [
              10
            ],
            "required" : false,
            "direction" : "input",
            "multiple" : false,
            "multiple_sep" : ":",
            "dest" : "par"
          },
          {
            "type" : "integer",
            "name" : "--chimMultimapNmax",
            "description" : "maximum number of chimeric multi-alignments\n\n- 0 ... use the old scheme for chimeric detection which only considered unique alignments",
            "info" : {
              "step" : "star",
              "orig_arg" : "--chimMultimapNmax"
            },
            "example" : [
              0
            ],
            "required" : false,
            "direction" : "input",
            "multiple" : false,
            "multiple_sep" : ":",
            "dest" : "par"
          },
          {
            "type" : "integer",
            "name" : "--chimMultimapScoreRange",
            "description" : "the score range for multi-mapping chimeras below the best chimeric score. Only works with --chimMultimapNmax > 1",
            "info" : {
              "step" : "star",
              "orig_arg" : "--chimMultimapScoreRange"
            },
            "example" : [
              1
            ],
            "required" : false,
            "direction" : "input",
            "multiple" : false,
            "multiple_sep" : ":",
            "dest" : "par"
          },
          {
            "type" : "integer",
            "name" : "--chimNonchimScoreDropMin",
            "description" : "to trigger chimeric detection, the drop in the best non-chimeric alignment score with respect to the read length has to be greater than this value",
            "info" : {
              "step" : "star",
              "orig_arg" : "--chimNonchimScoreDropMin"
            },
            "example" : [
              20
            ],
            "required" : false,
            "direction" : "input",
            "multiple" : false,
            "multiple_sep" : ":",
            "dest" : "par"
          },
          {
            "type" : "integer",
            "name" : "--chimOutJunctionFormat",
            "description" : "formatting type for the Chimeric.out.junction file\n\n- 0 ... no comment lines/headers\n- 1 ... comment lines at the end of the file: command line and Nreads: total, unique/multi-mapping",
            "info" : {
              "step" : "star",
              "orig_arg" : "--chimOutJunctionFormat"
            },
            "example" : [
              0
            ],
            "required" : false,
            "direction" : "input",
            "multiple" : false,
            "multiple_sep" : ":",
            "dest" : "par"
          }
        ]
      },
      {
        "name" : "Quantification of Annotations",
        "arguments" : [
          {
            "type" : "string",
            "name" : "--quantMode",
            "description" : "types of quantification requested\n\n- -                ... none\n- TranscriptomeSAM ... output SAM/BAM alignments to transcriptome into a separate file\n- GeneCounts       ... count reads per gene",
            "info" : {
              "step" : "star",
              "orig_arg" : "--quantMode"
            },
            "required" : false,
            "direction" : "input",
            "multiple" : true,
            "multiple_sep" : ";",
            "dest" : "par"
          },
          {
            "type" : "integer",
            "name" : "--quantTranscriptomeBAMcompression",
            "description" : "-2 to 10  transcriptome BAM compression level\n\n- -2  ... no BAM output\n- -1  ... default compression (6?)\n-  0  ... no compression\n-  10 ... maximum compression",
            "info" : {
              "step" : "star",
              "orig_arg" : "--quantTranscriptomeBAMcompression"
            },
            "example" : [
              1
            ],
            "required" : false,
            "direction" : "input",
            "multiple" : false,
            "multiple_sep" : ":",
            "dest" : "par"
          },
          {
            "type" : "string",
            "name" : "--quantTranscriptomeBan",
            "description" : "prohibit various alignment type\n\n- IndelSoftclipSingleend  ... prohibit indels, soft clipping and single-end alignments - compatible with RSEM\n- Singleend               ... prohibit single-end alignments",
            "info" : {
              "step" : "star",
              "orig_arg" : "--quantTranscriptomeBan"
            },
            "example" : [
              "IndelSoftclipSingleend"
            ],
            "required" : false,
            "direction" : "input",
            "multiple" : false,
            "multiple_sep" : ":",
            "dest" : "par"
          }
        ]
      },
      {
        "name" : "2-pass Mapping",
        "arguments" : [
          {
            "type" : "string",
            "name" : "--twopassMode",
            "description" : "2-pass mapping mode.\n\n- None        ... 1-pass mapping\n- Basic       ... basic 2-pass mapping, with all 1st pass junctions inserted into the genome indices on the fly",
            "info" : {
              "step" : "star",
              "orig_arg" : "--twopassMode"
            },
            "required" : false,
            "direction" : "input",
            "multiple" : false,
            "multiple_sep" : ":",
            "dest" : "par"
          },
          {
            "type" : "integer",
            "name" : "--twopass1readsN",
            "description" : "number of reads to process for the 1st step. Use very large number (or default -1) to map all reads in the first step.",
            "info" : {
              "step" : "star",
              "orig_arg" : "--twopass1readsN"
            },
            "example" : [
              -1
            ],
            "required" : false,
            "direction" : "input",
            "multiple" : false,
            "multiple_sep" : ":",
            "dest" : "par"
          }
        ]
      },
      {
        "name" : "WASP parameters",
        "arguments" : [
          {
            "type" : "string",
            "name" : "--waspOutputMode",
            "description" : "WASP allele-specific output type. This is re-implementation of the original WASP mappability filtering by Bryce van de Geijn, Graham McVicker, Yoav Gilad & Jonathan K Pritchard. Please cite the original WASP paper: Nature Methods 12, 1061–1063 (2015), https://www.nature.com/articles/nmeth.3582 .\n\n- SAMtag      ... add WASP tags to the alignments that pass WASP filtering",
            "info" : {
              "step" : "star",
              "orig_arg" : "--waspOutputMode"
            },
            "required" : false,
            "direction" : "input",
            "multiple" : false,
            "multiple_sep" : ":",
            "dest" : "par"
          }
        ]
      },
      {
        "name" : "STARsolo (single cell RNA-seq) parameters",
        "arguments" : [
          {
            "type" : "string",
            "name" : "--soloType",
            "description" : "type of single-cell RNA-seq\n\n- CB_UMI_Simple   ... (a.k.a. Droplet) one UMI and one Cell Barcode of fixed length in read2, e.g. Drop-seq and 10X Chromium.\n- CB_UMI_Complex  ... multiple Cell Barcodes of varying length, one UMI of fixed length and one adapter sequence of fixed length are allowed in read2 only (e.g. inDrop, ddSeq).\n- CB_samTagOut    ... output Cell Barcode as CR and/or CB SAm tag. No UMI counting. --readFilesIn cDNA_read1 [cDNA_read2 if paired-end] CellBarcode_read . Requires --outSAMtype BAM Unsorted [and/or SortedByCoordinate]\n- SmartSeq        ... Smart-seq: each cell in a separate FASTQ (paired- or single-end), barcodes are corresponding read-groups, no UMI sequences, alignments deduplicated according to alignment start and end (after extending soft-clipped bases)",
            "info" : {
              "step" : "star",
              "orig_arg" : "--soloType"
            },
            "required" : false,
            "direction" : "input",
            "multiple" : true,
            "multiple_sep" : ";",
            "dest" : "par"
          },
          {
            "type" : "string",
            "name" : "--soloCBwhitelist",
            "description" : "file(s) with whitelist(s) of cell barcodes. Only --soloType CB_UMI_Complex allows more than one whitelist file.\n\n- None            ... no whitelist: all cell barcodes are allowed",
            "info" : {
              "step" : "star",
              "orig_arg" : "--soloCBwhitelist"
            },
            "required" : false,
            "direction" : "input",
            "multiple" : true,
            "multiple_sep" : ";",
            "dest" : "par"
          },
          {
            "type" : "integer",
            "name" : "--soloCBstart",
            "description" : "cell barcode start base",
            "info" : {
              "step" : "star",
              "orig_arg" : "--soloCBstart"
            },
            "example" : [
              1
            ],
            "required" : false,
            "direction" : "input",
            "multiple" : false,
            "multiple_sep" : ":",
            "dest" : "par"
          },
          {
            "type" : "integer",
            "name" : "--soloCBlen",
            "description" : "cell barcode length",
            "info" : {
              "step" : "star",
              "orig_arg" : "--soloCBlen"
            },
            "example" : [
              16
            ],
            "required" : false,
            "direction" : "input",
            "multiple" : false,
            "multiple_sep" : ":",
            "dest" : "par"
          },
          {
            "type" : "integer",
            "name" : "--soloUMIstart",
            "description" : "UMI start base",
            "info" : {
              "step" : "star",
              "orig_arg" : "--soloUMIstart"
            },
            "example" : [
              17
            ],
            "required" : false,
            "direction" : "input",
            "multiple" : false,
            "multiple_sep" : ":",
            "dest" : "par"
          },
          {
            "type" : "integer",
            "name" : "--soloUMIlen",
            "description" : "UMI length",
            "info" : {
              "step" : "star",
              "orig_arg" : "--soloUMIlen"
            },
            "example" : [
              10
            ],
            "required" : false,
            "direction" : "input",
            "multiple" : false,
            "multiple_sep" : ":",
            "dest" : "par"
          },
          {
            "type" : "integer",
            "name" : "--soloBarcodeReadLength",
            "description" : "length of the barcode read\n\n- 1   ... equal to sum of soloCBlen+soloUMIlen\n- 0   ... not defined, do not check",
            "info" : {
              "step" : "star",
              "orig_arg" : "--soloBarcodeReadLength"
            },
            "example" : [
              1
            ],
            "required" : false,
            "direction" : "input",
            "multiple" : false,
            "multiple_sep" : ":",
            "dest" : "par"
          },
          {
            "type" : "integer",
            "name" : "--soloBarcodeMate",
            "description" : "identifies which read mate contains the barcode (CB+UMI) sequence\n\n- 0   ... barcode sequence is on separate read, which should always be the last file in the --readFilesIn listed\n- 1   ... barcode sequence is a part of mate 1\n- 2   ... barcode sequence is a part of mate 2",
            "info" : {
              "step" : "star",
              "orig_arg" : "--soloBarcodeMate"
            },
            "example" : [
              0
            ],
            "required" : false,
            "direction" : "input",
            "multiple" : false,
            "multiple_sep" : ":",
            "dest" : "par"
          },
          {
            "type" : "string",
            "name" : "--soloCBposition",
            "description" : "position of Cell Barcode(s) on the barcode read.\n\nPresently only works with --soloType CB_UMI_Complex, and barcodes are assumed to be on Read2.\nFormat for each barcode: startAnchor_startPosition_endAnchor_endPosition\nstart(end)Anchor defines the Anchor Base for the CB: 0: read start; 1: read end; 2: adapter start; 3: adapter end\nstart(end)Position is the 0-based position with of the CB start(end) with respect to the Anchor Base\nString for different barcodes are separated by space.\nExample: inDrop (Zilionis et al, Nat. Protocols, 2017):\n--soloCBposition  0_0_2_-1  3_1_3_8",
            "info" : {
              "step" : "star",
              "orig_arg" : "--soloCBposition"
            },
            "required" : false,
            "direction" : "input",
            "multiple" : true,
            "multiple_sep" : ";",
            "dest" : "par"
          },
          {
            "type" : "string",
            "name" : "--soloUMIposition",
            "description" : "position of the UMI on the barcode read, same as soloCBposition\n\nExample: inDrop (Zilionis et al, Nat. Protocols, 2017):\n--soloCBposition  3_9_3_14",
            "info" : {
              "step" : "star",
              "orig_arg" : "--soloUMIposition"
            },
            "required" : false,
            "direction" : "input",
            "multiple" : false,
            "multiple_sep" : ":",
            "dest" : "par"
          },
          {
            "type" : "string",
            "name" : "--soloAdapterSequence",
            "description" : "adapter sequence to anchor barcodes. Only one adapter sequence is allowed.",
            "info" : {
              "step" : "star",
              "orig_arg" : "--soloAdapterSequence"
            },
            "required" : false,
            "direction" : "input",
            "multiple" : false,
            "multiple_sep" : ":",
            "dest" : "par"
          },
          {
            "type" : "integer",
            "name" : "--soloAdapterMismatchesNmax",
            "description" : "maximum number of mismatches allowed in adapter sequence.",
            "info" : {
              "step" : "star",
              "orig_arg" : "--soloAdapterMismatchesNmax"
            },
            "example" : [
              1
            ],
            "required" : false,
            "direction" : "input",
            "multiple" : false,
            "multiple_sep" : ":",
            "dest" : "par"
          },
          {
            "type" : "string",
            "name" : "--soloCBmatchWLtype",
            "description" : "matching the Cell Barcodes to the WhiteList\n\n- Exact                           ... only exact matches allowed\n- 1MM                             ... only one match in whitelist with 1 mismatched base allowed. Allowed CBs have to have at least one read with exact match.\n- 1MM_multi                       ... multiple matches in whitelist with 1 mismatched base allowed, posterior probability calculation is used choose one of the matches.\nAllowed CBs have to have at least one read with exact match. This option matches best with CellRanger 2.2.0\n- 1MM_multi_pseudocounts          ... same as 1MM_Multi, but pseudocounts of 1 are added to all whitelist barcodes.\n- 1MM_multi_Nbase_pseudocounts    ... same as 1MM_multi_pseudocounts, multimatching to WL is allowed for CBs with N-bases. This option matches best with CellRanger >= 3.0.0\n- EditDist_2                    ... allow up to edit distance of 3 fpr each of the barcodes. May include one deletion + one insertion. Only works with --soloType CB_UMI_Complex. Matches to multiple passlist barcdoes are not allowed. Similar to ParseBio Split-seq pipeline.",
            "info" : {
              "step" : "star",
              "orig_arg" : "--soloCBmatchWLtype"
            },
            "example" : [
              "1MM_multi"
            ],
            "required" : false,
            "direction" : "input",
            "multiple" : false,
            "multiple_sep" : ":",
            "dest" : "par"
          },
          {
            "type" : "string",
            "name" : "--soloInputSAMattrBarcodeSeq",
            "description" : "when inputting reads from a SAM file (--readsFileType SAM SE/PE), these SAM attributes mark the barcode sequence (in proper order).\n\nFor instance, for 10X CellRanger or STARsolo BAMs, use --soloInputSAMattrBarcodeSeq CR UR .\nThis parameter is required when running STARsolo with input from SAM.",
            "info" : {
              "step" : "star",
              "orig_arg" : "--soloInputSAMattrBarcodeSeq"
            },
            "required" : false,
            "direction" : "input",
            "multiple" : true,
            "multiple_sep" : ";",
            "dest" : "par"
          },
          {
            "type" : "string",
            "name" : "--soloInputSAMattrBarcodeQual",
            "description" : "when inputting reads from a SAM file (--readsFileType SAM SE/PE), these SAM attributes mark the barcode qualities (in proper order).\n\nFor instance, for 10X CellRanger or STARsolo BAMs, use --soloInputSAMattrBarcodeQual CY UY .\nIf this parameter is '-' (default), the quality 'H' will be assigned to all bases.",
            "info" : {
              "step" : "star",
              "orig_arg" : "--soloInputSAMattrBarcodeQual"
            },
            "required" : false,
            "direction" : "input",
            "multiple" : true,
            "multiple_sep" : ";",
            "dest" : "par"
          },
          {
            "type" : "string",
            "name" : "--soloStrand",
            "description" : "strandedness of the solo libraries:\n\n- Unstranded  ... no strand information\n- Forward     ... read strand same as the original RNA molecule\n- Reverse     ... read strand opposite to the original RNA molecule",
            "info" : {
              "step" : "star",
              "orig_arg" : "--soloStrand"
            },
            "example" : [
              "Forward"
            ],
            "required" : false,
            "direction" : "input",
            "multiple" : false,
            "multiple_sep" : ":",
            "dest" : "par"
          },
          {
            "type" : "string",
            "name" : "--soloFeatures",
            "description" : "genomic features for which the UMI counts per Cell Barcode are collected\n\n- Gene            ... genes: reads match the gene transcript\n- SJ              ... splice junctions: reported in SJ.out.tab\n- GeneFull        ... full gene (pre-mRNA): count all reads overlapping genes' exons and introns\n- GeneFull_ExonOverIntron ... full gene (pre-mRNA): count all reads overlapping genes' exons and introns: prioritize 100% overlap with exons\n- GeneFull_Ex50pAS        ... full gene (pre-RNA): count all reads overlapping genes' exons and introns: prioritize >50% overlap with exons. Do not count reads with 100% exonic overlap in the antisense direction.",
            "info" : {
              "step" : "star",
              "orig_arg" : "--soloFeatures"
            },
            "example" : [
              "Gene"
            ],
            "required" : false,
            "direction" : "input",
            "multiple" : true,
            "multiple_sep" : ";",
            "dest" : "par"
          },
          {
            "type" : "string",
            "name" : "--soloMultiMappers",
            "description" : "counting method for reads mapping to multiple genes\n\n- Unique     ... count only reads that map to unique genes\n- Uniform    ... uniformly distribute multi-genic UMIs to all genes\n- Rescue     ... distribute UMIs proportionally to unique+uniform counts (~ first iteration of EM)\n- PropUnique ... distribute UMIs proportionally to unique mappers, if present, and uniformly if not.\n- EM         ... multi-gene UMIs are distributed using Expectation Maximization algorithm",
            "info" : {
              "step" : "star",
              "orig_arg" : "--soloMultiMappers"
            },
            "example" : [
              "Unique"
            ],
            "required" : false,
            "direction" : "input",
            "multiple" : true,
            "multiple_sep" : ";",
            "dest" : "par"
          },
          {
            "type" : "string",
            "name" : "--soloUMIdedup",
            "description" : "type of UMI deduplication (collapsing) algorithm\n\n- 1MM_All                     ... all UMIs with 1 mismatch distance to each other are collapsed (i.e. counted once).\n- 1MM_Directional_UMItools    ... follows the \\"directional\\" method from the UMI-tools by Smith, Heger and Sudbery (Genome Research 2017).\n- 1MM_Directional             ... same as 1MM_Directional_UMItools, but with more stringent criteria for duplicate UMIs\n- Exact                       ... only exactly matching UMIs are collapsed.\n- NoDedup                     ... no deduplication of UMIs, count all reads.\n- 1MM_CR                      ... CellRanger2-4 algorithm for 1MM UMI collapsing.",
            "info" : {
              "step" : "star",
              "orig_arg" : "--soloUMIdedup"
            },
            "example" : [
              "1MM_All"
            ],
            "required" : false,
            "direction" : "input",
            "multiple" : true,
            "multiple_sep" : ";",
            "dest" : "par"
          },
          {
            "type" : "string",
            "name" : "--soloUMIfiltering",
            "description" : "type of UMI filtering (for reads uniquely mapping to genes)\n\n- -                  ... basic filtering: remove UMIs with N and homopolymers (similar to CellRanger 2.2.0).\n- MultiGeneUMI       ... basic + remove lower-count UMIs that map to more than one gene.\n- MultiGeneUMI_All   ... basic + remove all UMIs that map to more than one gene.\n- MultiGeneUMI_CR    ... basic + remove lower-count UMIs that map to more than one gene, matching CellRanger > 3.0.0 .\nOnly works with --soloUMIdedup 1MM_CR",
            "info" : {
              "step" : "star",
              "orig_arg" : "--soloUMIfiltering"
            },
            "required" : false,
            "direction" : "input",
            "multiple" : true,
            "multiple_sep" : ";",
            "dest" : "par"
          },
          {
            "type" : "string",
            "name" : "--soloOutFileNames",
            "description" : "file names for STARsolo output:\n\nfile_name_prefix   gene_names   barcode_sequences   cell_feature_count_matrix",
            "info" : {
              "step" : "star",
              "orig_arg" : "--soloOutFileNames"
            },
            "example" : [
              "Solo.out/",
              "features.tsv",
              "barcodes.tsv",
              "matrix.mtx"
            ],
            "required" : false,
            "direction" : "input",
            "multiple" : true,
            "multiple_sep" : ";",
            "dest" : "par"
          },
          {
            "type" : "string",
            "name" : "--soloCellFilter",
            "description" : "cell filtering type and parameters\n\n- None            ... do not output filtered cells\n- TopCells        ... only report top cells by UMI count, followed by the exact number of cells\n- CellRanger2.2   ... simple filtering of CellRanger 2.2.\nCan be followed by numbers: number of expected cells, robust maximum percentile for UMI count, maximum to minimum ratio for UMI count\nThe harcoded values are from CellRanger: nExpectedCells=3000;  maxPercentile=0.99;  maxMinRatio=10\n- EmptyDrops_CR   ... EmptyDrops filtering in CellRanger flavor. Please cite the original EmptyDrops paper: A.T.L Lun et al, Genome Biology, 20, 63 (2019): https://genomebiology.biomedcentral.com/articles/10.1186/s13059-019-1662-y\nCan be followed by 10 numeric parameters:  nExpectedCells   maxPercentile   maxMinRatio   indMin   indMax   umiMin   umiMinFracMedian   candMaxN   FDR   simN\nThe harcoded values are from CellRanger:             3000            0.99            10    45000    90000      500               0.01      20000  0.01  10000",
            "info" : {
              "step" : "star",
              "orig_arg" : "--soloCellFilter"
            },
            "example" : [
              "CellRanger2.2",
              "3000",
              "0.99",
              "10"
            ],
            "required" : false,
            "direction" : "input",
            "multiple" : true,
            "multiple_sep" : ";",
            "dest" : "par"
          },
          {
            "type" : "string",
            "name" : "--soloOutFormatFeaturesGeneField3",
            "description" : "field 3 in the Gene features.tsv file. If \\"-\\", then no 3rd field is output.",
            "info" : {
              "step" : "star",
              "orig_arg" : "--soloOutFormatFeaturesGeneField3"
            },
            "example" : [
              "Gene Expression"
            ],
            "required" : false,
            "direction" : "input",
            "multiple" : true,
            "multiple_sep" : ";",
            "dest" : "par"
          },
          {
            "type" : "string",
            "name" : "--soloCellReadStats",
            "description" : "Output reads statistics for each CB\n\n- Standard    ... standard output",
            "info" : {
              "step" : "star",
              "orig_arg" : "--soloCellReadStats"
            },
            "required" : false,
            "direction" : "input",
            "multiple" : false,
            "multiple_sep" : ":",
            "dest" : "par"
          }
        ]
      },
      {
        "name" : "HTSeq arguments",
        "arguments" : [
          {
            "type" : "string",
            "name" : "--stranded",
            "alternatives" : [
              "-s"
            ],
            "description" : "Whether the data is from a strand-specific assay. 'reverse' means 'yes' with reversed strand interpretation.",
            "info" : {
              "step" : "htseq",
              "orig_arg" : "--stranded"
            },
            "default" : [
              "yes"
            ],
            "required" : false,
            "choices" : [
              "yes",
              "no",
              "reverse"
            ],
            "direction" : "input",
            "multiple" : false,
            "multiple_sep" : ":",
            "dest" : "par"
          },
          {
            "type" : "integer",
            "name" : "--minimum_alignment_quality",
            "alternatives" : [
              "-a",
              "--minaqual"
            ],
            "description" : "Skip all reads with MAPQ alignment quality lower than the given minimum value. \nMAPQ is the 5th column of a SAM/BAM file and its usage depends on the software \nused to map the reads.\n",
            "info" : {
              "step" : "htseq",
              "orig_arg" : "--minaqual"
            },
            "default" : [
              10
            ],
            "required" : false,
            "direction" : "input",
            "multiple" : false,
            "multiple_sep" : ":",
            "dest" : "par"
          },
          {
            "type" : "string",
            "name" : "--type",
            "alternatives" : [
              "-t"
            ],
            "description" : "Feature type (3rd column in GTF file) to be used, all features of other type are ignored (default, suitable for Ensembl GTF files: exon)",
            "info" : {
              "step" : "htseq",
              "orig_arg" : "--type"
            },
            "example" : [
              "exon"
            ],
            "required" : false,
            "direction" : "input",
            "multiple" : false,
            "multiple_sep" : ":",
            "dest" : "par"
          },
          {
            "type" : "string",
            "name" : "--id_attribute",
            "alternatives" : [
              "-i"
            ],
            "description" : "GTF attribute to be used as feature ID (default, suitable for Ensembl GTF files: gene_id).\nAll feature of the right type (see -t option) within the same GTF attribute will be added\ntogether. The typical way of using this option is to count all exonic reads from each gene\nand add the exons but other uses are possible as well. You can call this option multiple\ntimes: in that case, the combination of all attributes separated by colons (:) will be used\nas a unique identifier, e.g. for exons you might use -i gene_id -i exon_number.\n",
            "info" : {
              "step" : "htseq",
              "orig_arg" : "--idattr"
            },
            "example" : [
              "gene_id"
            ],
            "required" : false,
            "direction" : "input",
            "multiple" : true,
            "multiple_sep" : ":",
            "dest" : "par"
          },
          {
            "type" : "string",
            "name" : "--additional_attributes",
            "description" : "Additional feature attributes (suitable for Ensembl GTF files: gene_name). Use multiple times\nfor more than one additional attribute. These attributes are only used as annotations in the\noutput, while the determination of how the counts are added together is done based on option -i.\n",
            "info" : {
              "step" : "htseq",
              "orig_arg" : "--additional-attr"
            },
            "example" : [
              "gene_name"
            ],
            "required" : false,
            "direction" : "input",
            "multiple" : true,
            "multiple_sep" : ":",
            "dest" : "par"
          },
          {
            "type" : "boolean_true",
            "name" : "--add_chromosome_info",
            "description" : "Store information about the chromosome of each feature as an additional attribute\n(e.g. colunm in the TSV output file).\n",
            "info" : {
              "step" : "htseq",
              "orig_arg" : "--add-chromosome-info"
            },
            "direction" : "input",
            "dest" : "par"
          },
          {
            "type" : "string",
            "name" : "--mode",
            "alternatives" : [
              "-m"
            ],
            "description" : "Mode to handle reads overlapping more than one feature.",
            "info" : {
              "step" : "htseq",
              "orig_arg" : "--mode"
            },
            "default" : [
              "union"
            ],
            "required" : false,
            "choices" : [
              "union",
              "intersection-strict",
              "intersection-nonempty"
            ],
            "direction" : "input",
            "multiple" : false,
            "multiple_sep" : ":",
            "dest" : "par"
          },
          {
            "type" : "string",
            "name" : "--non_unique",
            "description" : "Whether and how to score reads that are not uniquely aligned or ambiguously assigned to features.",
            "info" : {
              "step" : "htseq",
              "orig_arg" : "--nonunique"
            },
            "default" : [
              "none"
            ],
            "required" : false,
            "choices" : [
              "none",
              "all",
              "fraction",
              "random"
            ],
            "direction" : "input",
            "multiple" : false,
            "multiple_sep" : ":",
            "dest" : "par"
          },
          {
            "type" : "string",
            "name" : "--secondary_alignments",
            "description" : "Whether to score secondary alignments (0x100 flag).",
            "info" : {
              "step" : "htseq",
              "orig_arg" : "--secondary-alignments"
            },
            "required" : false,
            "choices" : [
              "score",
              "ignore"
            ],
            "direction" : "input",
            "multiple" : false,
            "multiple_sep" : ":",
            "dest" : "par"
          },
          {
            "type" : "string",
            "name" : "--supplementary_alignments",
            "description" : "Whether to score supplementary alignments (0x800 flag).",
            "info" : {
              "step" : "htseq",
              "orig_arg" : "--supplementary-alignments"
            },
            "required" : false,
            "choices" : [
              "score",
              "ignore"
            ],
            "direction" : "input",
            "multiple" : false,
            "multiple_sep" : ":",
            "dest" : "par"
          },
          {
            "type" : "boolean_true",
            "name" : "--counts_output_sparse",
            "description" : "Store the counts as a sparse matrix (mtx, h5ad, loom).",
            "info" : {
              "step" : "htseq",
              "orig_arg" : "--counts-output-sparse"
            },
            "direction" : "input",
            "dest" : "par"
          }
        ]
      }
    ],
    "resources" : [
      {
        "type" : "python_script",
        "path" : "script.py",
        "is_executable" : true,
        "parent" : "file:/home/runner/work/openpipeline/openpipeline/src/mapping/multi_star/config.vsh.yaml"
      }
    ],
    "description" : "Align fastq files using STAR.",
    "test_resources" : [
      {
        "type" : "python_script",
        "path" : "test.py",
        "is_executable" : true,
        "parent" : "file:/home/runner/work/openpipeline/openpipeline/src/mapping/multi_star/config.vsh.yaml"
      },
      {
        "type" : "file",
        "path" : "../../../resources_test/cellranger_tiny_fastq",
        "parent" : "file:/home/runner/work/openpipeline/openpipeline/src/mapping/multi_star/config.vsh.yaml"
      }
    ],
    "status" : "enabled",
    "set_wd_to_resources_dir" : false
  },
  "platforms" : [
    {
      "type" : "docker",
      "id" : "docker",
      "image" : "python:3.10",
      "target_organization" : "openpipelines-bio",
      "target_registry" : "ghcr.io",
      "namespace_separator" : "/",
      "resolve_volume" : "Automatic",
      "chown" : true,
      "setup_strategy" : "ifneedbepullelsecachedbuild",
      "target_image_source" : "https://github.com/openpipelines-bio/openpipeline",
      "setup" : [
        {
          "type" : "docker",
          "env" : [
            "STAR_VERSION 2.7.10a",
            "PACKAGES gcc g++ make wget zlib1g-dev unzip"
          ]
        },
        {
          "type" : "docker",
          "run" : [
            "apt-get update && \\\\\n  apt-get install -y --no-install-recommends ${PACKAGES} && \\\\\n  cd /tmp && \\\\\n  wget --no-check-certificate https://github.com/alexdobin/STAR/archive/refs/tags/${STAR_VERSION}.zip && \\\\\n  unzip ${STAR_VERSION}.zip && \\\\\n  cd STAR-${STAR_VERSION}/source && \\\\\n  make STARstatic CXXFLAGS_SIMD=-std=c++11 && \\\\\n  cp STAR /usr/local/bin && \\\\\n  cd / && \\\\\n  rm -rf /tmp/STAR-${STAR_VERSION} /tmp/${STAR_VERSION}.zip && \\\\\n  apt-get --purge autoremove -y ${PACKAGES} && \\\\\n  apt-get clean\n"
          ]
        },
        {
          "type" : "apt",
          "packages" : [
            "samtools"
          ],
          "interactive" : false
        },
        {
          "type" : "python",
          "user" : false,
          "packages" : [
            "pyyaml",
            "HTSeq",
            "multiprocess",
            "gtfparse<2.0",
            "pandas",
            "multiqc"
          ],
          "upgrade" : true
        }
      ],
      "test_setup" : [
        {
          "type" : "python",
          "user" : false,
          "packages" : [
            "pytest"
          ],
          "upgrade" : true
        }
      ]
    },
    {
      "type" : "nextflow",
      "id" : "nextflow",
      "variant" : "vdsl3",
      "directives" : {
 ''' + '''       "label" : [
          "highmem",
          "highcpu"
        ],
        "tag" : "$id"
      },
      "auto" : {
        "simplifyInput" : true,
        "simplifyOutput" : true,
        "transcript" : false,
        "publish" : false
      },
      "debug" : false,
      "container" : "docker"
    }
  ],
  "info" : {
    "config" : "/home/runner/work/openpipeline/openpipeline/src/mapping/multi_star/config.vsh.yaml",
    "platform" : "nextflow",
    "viash_version" : "0.7.0",
    "git_commit" : "79131063f70d256bcdd4e47f0572f968cc71938b",
    "git_remote" : "https://github.com/openpipelines-bio/openpipeline"
  }
}'''))

thisScript = '''set -e
tempscript=".viash_script.sh"
cat > "$tempscript" << VIASHMAIN

import tempfile
import subprocess
from pathlib import Path
import tarfile
import gzip
import shutil
from typing import Any, Dict, List
import yaml
from multiprocess import Pool
import math
import gtfparse
import pandas as pd

## VIASH START
# The following code has been auto-generated by Viash.
par = {
  'input_id': $( if [ ! -z ${VIASH_PAR_INPUT_ID+x} ]; then echo "r'${VIASH_PAR_INPUT_ID//\\'/\\'\\"\\'\\"r\\'}'.split(';')"; else echo None; fi ),
  'input_r1': $( if [ ! -z ${VIASH_PAR_INPUT_R1+x} ]; then echo "r'${VIASH_PAR_INPUT_R1//\\'/\\'\\"\\'\\"r\\'}'.split(';')"; else echo None; fi ),
  'input_r2': $( if [ ! -z ${VIASH_PAR_INPUT_R2+x} ]; then echo "r'${VIASH_PAR_INPUT_R2//\\'/\\'\\"\\'\\"r\\'}'.split(';')"; else echo None; fi ),
  'reference_index': $( if [ ! -z ${VIASH_PAR_REFERENCE_INDEX+x} ]; then echo "r'${VIASH_PAR_REFERENCE_INDEX//\\'/\\'\\"\\'\\"r\\'}'"; else echo None; fi ),
  'reference_gtf': $( if [ ! -z ${VIASH_PAR_REFERENCE_GTF+x} ]; then echo "r'${VIASH_PAR_REFERENCE_GTF//\\'/\\'\\"\\'\\"r\\'}'"; else echo None; fi ),
  'output': $( if [ ! -z ${VIASH_PAR_OUTPUT+x} ]; then echo "r'${VIASH_PAR_OUTPUT//\\'/\\'\\"\\'\\"r\\'}'"; else echo None; fi ),
  'run_htseq_count': $( if [ ! -z ${VIASH_PAR_RUN_HTSEQ_COUNT+x} ]; then echo "r'${VIASH_PAR_RUN_HTSEQ_COUNT//\\'/\\'\\"\\'\\"r\\'}'.lower() == 'true'"; else echo None; fi ),
  'run_multiqc': $( if [ ! -z ${VIASH_PAR_RUN_MULTIQC+x} ]; then echo "r'${VIASH_PAR_RUN_MULTIQC//\\'/\\'\\"\\'\\"r\\'}'.lower() == 'true'"; else echo None; fi ),
  'runRNGseed': $( if [ ! -z ${VIASH_PAR_RUNRNGSEED+x} ]; then echo "int(r'${VIASH_PAR_RUNRNGSEED//\\'/\\'\\"\\'\\"r\\'}')"; else echo None; fi ),
  'genomeFastaFiles': $( if [ ! -z ${VIASH_PAR_GENOMEFASTAFILES+x} ]; then echo "r'${VIASH_PAR_GENOMEFASTAFILES//\\'/\\'\\"\\'\\"r\\'}'.split(';')"; else echo None; fi ),
  'sjdbFileChrStartEnd': $( if [ ! -z ${VIASH_PAR_SJDBFILECHRSTARTEND+x} ]; then echo "r'${VIASH_PAR_SJDBFILECHRSTARTEND//\\'/\\'\\"\\'\\"r\\'}'.split(';')"; else echo None; fi ),
  'sjdbGTFfile': $( if [ ! -z ${VIASH_PAR_SJDBGTFFILE+x} ]; then echo "r'${VIASH_PAR_SJDBGTFFILE//\\'/\\'\\"\\'\\"r\\'}'"; else echo None; fi ),
  'sjdbGTFchrPrefix': $( if [ ! -z ${VIASH_PAR_SJDBGTFCHRPREFIX+x} ]; then echo "r'${VIASH_PAR_SJDBGTFCHRPREFIX//\\'/\\'\\"\\'\\"r\\'}'"; else echo None; fi ),
  'sjdbGTFfeatureExon': $( if [ ! -z ${VIASH_PAR_SJDBGTFFEATUREEXON+x} ]; then echo "r'${VIASH_PAR_SJDBGTFFEATUREEXON//\\'/\\'\\"\\'\\"r\\'}'"; else echo None; fi ),
  'sjdbGTFtagExonParentTranscript': $( if [ ! -z ${VIASH_PAR_SJDBGTFTAGEXONPARENTTRANSCRIPT+x} ]; then echo "r'${VIASH_PAR_SJDBGTFTAGEXONPARENTTRANSCRIPT//\\'/\\'\\"\\'\\"r\\'}'"; else echo None; fi ),
  'sjdbGTFtagExonParentGene': $( if [ ! -z ${VIASH_PAR_SJDBGTFTAGEXONPARENTGENE+x} ]; then echo "r'${VIASH_PAR_SJDBGTFTAGEXONPARENTGENE//\\'/\\'\\"\\'\\"r\\'}'"; else echo None; fi ),
  'sjdbGTFtagExonParentGeneName': $( if [ ! -z ${VIASH_PAR_SJDBGTFTAGEXONPARENTGENENAME+x} ]; then echo "r'${VIASH_PAR_SJDBGTFTAGEXONPARENTGENENAME//\\'/\\'\\"\\'\\"r\\'}'.split(';')"; else echo None; fi ),
  'sjdbGTFtagExonParentGeneType': $( if [ ! -z ${VIASH_PAR_SJDBGTFTAGEXONPARENTGENETYPE+x} ]; then echo "r'${VIASH_PAR_SJDBGTFTAGEXONPARENTGENETYPE//\\'/\\'\\"\\'\\"r\\'}'.split(';')"; else echo None; fi ),
  'sjdbOverhang': $( if [ ! -z ${VIASH_PAR_SJDBOVERHANG+x} ]; then echo "int(r'${VIASH_PAR_SJDBOVERHANG//\\'/\\'\\"\\'\\"r\\'}')"; else echo None; fi ),
  'sjdbScore': $( if [ ! -z ${VIASH_PAR_SJDBSCORE+x} ]; then echo "int(r'${VIASH_PAR_SJDBSCORE//\\'/\\'\\"\\'\\"r\\'}')"; else echo None; fi ),
  'sjdbInsertSave': $( if [ ! -z ${VIASH_PAR_SJDBINSERTSAVE+x} ]; then echo "r'${VIASH_PAR_SJDBINSERTSAVE//\\'/\\'\\"\\'\\"r\\'}'"; else echo None; fi ),
  'varVCFfile': $( if [ ! -z ${VIASH_PAR_VARVCFFILE+x} ]; then echo "r'${VIASH_PAR_VARVCFFILE//\\'/\\'\\"\\'\\"r\\'}'"; else echo None; fi ),
  'readFilesType': $( if [ ! -z ${VIASH_PAR_READFILESTYPE+x} ]; then echo "r'${VIASH_PAR_READFILESTYPE//\\'/\\'\\"\\'\\"r\\'}'"; else echo None; fi ),
  'readFilesSAMattrKeep': $( if [ ! -z ${VIASH_PAR_READFILESSAMATTRKEEP+x} ]; then echo "r'${VIASH_PAR_READFILESSAMATTRKEEP//\\'/\\'\\"\\'\\"r\\'}'.split(';')"; else echo None; fi ),
  'readFilesManifest': $( if [ ! -z ${VIASH_PAR_READFILESMANIFEST+x} ]; then echo "r'${VIASH_PAR_READFILESMANIFEST//\\'/\\'\\"\\'\\"r\\'}'"; else echo None; fi ),
  'readFilesPrefix': $( if [ ! -z ${VIASH_PAR_READFILESPREFIX+x} ]; then echo "r'${VIASH_PAR_READFILESPREFIX//\\'/\\'\\"\\'\\"r\\'}'"; else echo None; fi ),
  'readFilesCommand': $( if [ ! -z ${VIASH_PAR_READFILESCOMMAND+x} ]; then echo "r'${VIASH_PAR_READFILESCOMMAND//\\'/\\'\\"\\'\\"r\\'}'.split(';')"; else echo None; fi ),
  'readMapNumber': $( if [ ! -z ${VIASH_PAR_READMAPNUMBER+x} ]; then echo "int(r'${VIASH_PAR_READMAPNUMBER//\\'/\\'\\"\\'\\"r\\'}')"; else echo None; fi ),
  'readMatesLengthsIn': $( if [ ! -z ${VIASH_PAR_READMATESLENGTHSIN+x} ]; then echo "r'${VIASH_PAR_READMATESLENGTHSIN//\\'/\\'\\"\\'\\"r\\'}'"; else echo None; fi ),
  'readNameSeparator': $( if [ ! -z ${VIASH_PAR_READNAMESEPARATOR+x} ]; then echo "r'${VIASH_PAR_READNAMESEPARATOR//\\'/\\'\\"\\'\\"r\\'}'.split(';')"; else echo None; fi ),
  'readQualityScoreBase': $( if [ ! -z ${VIASH_PAR_READQUALITYSCOREBASE+x} ]; then echo "int(r'${VIASH_PAR_READQUALITYSCOREBASE//\\'/\\'\\"\\'\\"r\\'}')"; else echo None; fi ),
  'clipAdapterType': $( if [ ! -z ${VIASH_PAR_CLIPADAPTERTYPE+x} ]; then echo "r'${VIASH_PAR_CLIPADAPTERTYPE//\\'/\\'\\"\\'\\"r\\'}'"; else echo None; fi ),
  'clip3pNbases': $( if [ ! -z ${VIASH_PAR_CLIP3PNBASES+x} ]; then echo "list(map(int, r'${VIASH_PAR_CLIP3PNBASES//\\'/\\'\\"\\'\\"r\\'}'.split(';')))"; else echo None; fi ),
  'clip3pAdapterSeq': $( if [ ! -z ${VIASH_PAR_CLIP3PADAPTERSEQ+x} ]; then echo "r'${VIASH_PAR_CLIP3PADAPTERSEQ//\\'/\\'\\"\\'\\"r\\'}'.split(';')"; else echo None; fi ),
  'clip3pAdapterMMp': $( if [ ! -z ${VIASH_PAR_CLIP3PADAPTERMMP+x} ]; then echo "list(map(float, r'${VIASH_PAR_CLIP3PADAPTERMMP//\\'/\\'\\"\\'\\"r\\'}'.split(';')))"; else echo None; fi ),
  'clip3pAfterAdapterNbases': $( if [ ! -z ${VIASH_PAR_CLIP3PAFTERADAPTERNBASES+x} ]; then echo "list(map(int, r'${VIASH_PAR_CLIP3PAFTERADAPTERNBASES//\\'/\\'\\"\\'\\"r\\'}'.split(';')))"; else echo None; fi ),
  'clip5pNbases': $( if [ ! -z ${VIASH_PAR_CLIP5PNBASES+x} ]; then echo "list(map(int, r'${VIASH_PAR_CLIP5PNBASES//\\'/\\'\\"\\'\\"r\\'}'.split(';')))"; else echo None; fi ),
  'limitGenomeGenerateRAM': $( if [ ! -z ${VIASH_PAR_LIMITGENOMEGENERATERAM+x} ]; then echo "int(r'${VIASH_PAR_LIMITGENOMEGENERATERAM//\\'/\\'\\"\\'\\"r\\'}')"; else echo None; fi ),
  'limitIObufferSize': $( if [ ! -z ${VIASH_PAR_LIMITIOBUFFERSIZE+x} ]; then echo "list(map(int, r'${VIASH_PAR_LIMITIOBUFFERSIZE//\\'/\\'\\"\\'\\"r\\'}'.split(';')))"; else echo None; fi ),
  'limitOutSAMoneReadBytes': $( if [ ! -z ${VIASH_PAR_LIMITOUTSAMONEREADBYTES+x} ]; then echo "int(r'${VIASH_PAR_LIMITOUTSAMONEREADBYTES//\\'/\\'\\"\\'\\"r\\'}')"; else echo None; fi ),
  'limitOutSJoneRead': $( if [ ! -z ${VIASH_PAR_LIMITOUTSJONEREAD+x} ]; then echo "int(r'${VIASH_PAR_LIMITOUTSJONEREAD//\\'/\\'\\"\\'\\"r\\'}')"; else echo None; fi ),
  'limitOutSJcollapsed': $( if [ ! -z ${VIASH_PAR_LIMITOUTSJCOLLAPSED+x} ]; then echo "int(r'${VIASH_PAR_LIMITOUTSJCOLLAPSED//\\'/\\'\\"\\'\\"r\\'}')"; else echo None; fi ),
  'limitBAMsortRAM': $( if [ ! -z ${VIASH_PAR_LIMITBAMSORTRAM+x} ]; then echo "int(r'${VIASH_PAR_LIMITBAMSORTRAM//\\'/\\'\\"\\'\\"r\\'}')"; else echo None; fi ),
  'limitSjdbInsertNsj': $( if [ ! -z ${VIASH_PAR_LIMITSJDBINSERTNSJ+x} ]; then echo "int(r'${VIASH_PAR_LIMITSJDBINSERTNSJ//\\'/\\'\\"\\'\\"r\\'}')"; else echo None; fi ),
  'limitNreadsSoft': $( if [ ! -z ${VIASH_PAR_LIMITNREADSSOFT+x} ]; then echo "int(r'${VIASH_PAR_LIMITNREADSSOFT//\\'/\\'\\"\\'\\"r\\'}')"; else echo None; fi ),
  'outTmpKeep': $( if [ ! -z ${VIASH_PAR_OUTTMPKEEP+x} ]; then echo "r'${VIASH_PAR_OUTTMPKEEP//\\'/\\'\\"\\'\\"r\\'}'"; else echo None; fi ),
  'outStd': $( if [ ! -z ${VIASH_PAR_OUTSTD+x} ]; then echo "r'${VIASH_PAR_OUTSTD//\\'/\\'\\"\\'\\"r\\'}'"; else echo None; fi ),
  'outReadsUnmapped': $( if [ ! -z ${VIASH_PAR_OUTREADSUNMAPPED+x} ]; then echo "r'${VIASH_PAR_OUTREADSUNMAPPED//\\'/\\'\\"\\'\\"r\\'}'"; else echo None; fi ),
  'outQSconversionAdd': $( if [ ! -z ${VIASH_PAR_OUTQSCONVERSIONADD+x} ]; then echo "int(r'${VIASH_PAR_OUTQSCONVERSIONADD//\\'/\\'\\"\\'\\"r\\'}')"; else echo None; fi ),
  'outMultimapperOrder': $( if [ ! -z ${VIASH_PAR_OUTMULTIMAPPERORDER+x} ]; then echo "r'${VIASH_PAR_OUTMULTIMAPPERORDER//\\'/\\'\\"\\'\\"r\\'}'"; else echo None; fi ),
  'outSAMmode': $( if [ ! -z ${VIASH_PAR_OUTSAMMODE+x} ]; then echo "r'${VIASH_PAR_OUTSAMMODE//\\'/\\'\\"\\'\\"r\\'}'"; else echo None; fi ),
  'outSAMstrandField': $( if [ ! -z ${VIASH_PAR_OUTSAMSTRANDFIELD+x} ]; then echo "r'${VIASH_PAR_OUTSAMSTRANDFIELD//\\'/\\'\\"\\'\\"r\\'}'"; else echo None; fi ),
  'outSAMattributes': $( if [ ! -z ${VIASH_PAR_OUTSAMATTRIBUTES+x} ]; then echo "r'${VIASH_PAR_OUTSAMATTRIBUTES//\\'/\\'\\"\\'\\"r\\'}'.split(';')"; else echo None; fi ),
  'outSAMattrIHstart': $( if [ ! -z ${VIASH_PAR_OUTSAMATTRIHSTART+x} ]; then echo "int(r'${VIASH_PAR_OUTSAMATTRIHSTART//\\'/\\'\\"\\'\\"r\\'}')"; else echo None; fi ),
  'outSAMunmapped': $( if [ ! -z ${VIASH_PAR_OUTSAMUNMAPPED+x} ]; then echo "r'${VIASH_PAR_OUTSAMUNMAPPED//\\'/\\'\\"\\'\\"r\\'}'.split(';')"; else echo None; fi ),
  'outSAMorder': $( if [ ! -z ${VIASH_PAR_OUTSAMORDER+x} ]; then echo "r'${VIASH_PAR_OUTSAMORDER//\\'/\\'\\"\\'\\"r\\'}'"; else echo None; fi ),
  'outSAMprimaryFlag': $( if [ ! -z ${VIASH_PAR_OUTSAMPRIMARYFLAG+x} ]; then echo "r'${VIASH_PAR_OUTSAMPRIMARYFLAG//\\'/\\'\\"\\'\\"r\\'}'"; else echo None; fi ),
  'outSAMreadID': $( if [ ! -z ${VIASH_PAR_OUTSAMREADID+x} ]; then echo "r'${VIASH_PAR_OUTSAMREADID//\\'/\\'\\"\\'\\"r\\'}'"; else echo None; fi ),
  'outSAMmapqUnique': $( if [ ! -z ${VIASH_PAR_OUTSAMMAPQUNIQUE+x} ]; then echo "int(r'${VIASH_PAR_OUTSAMMAPQUNIQUE//\\'/\\'\\"\\'\\"r\\'}')"; else echo None; fi ),
  'outSAMflagOR': $( if [ ! -z ${VIASH_PAR_OUTSAMFLAGOR+x} ]; then echo "int(r'${VIASH_PAR_OUTSAMFLAGOR//\\'/\\'\\"\\'\\"r\\'}')"; else echo None; fi ),
  'outSAMflagAND': $( if [ ! -z ${VIASH_PAR_OUTSAMFLAGAND+x} ]; then echo "int(r'${VIASH_PAR_OUTSAMFLAGAND//\\'/\\'\\"\\'\\"r\\'}')"; else echo None; fi ),
  'outSAMattrRGline': $( if [ ! -z ${VIASH_PAR_OUTSAMATTRRGLINE+x} ]; then echo "r'${VIASH_PAR_OUTSAMATTRRGLINE//\\'/\\'\\"\\'\\"r\\'}'.split(';')"; else echo None; fi ),
  'outSAMheaderHD': $( if [ ! -z ${VIASH_PAR_OUTSAMHEADERHD+x} ]; then echo "r'${VIASH_PAR_OUTSAMHEADERHD//\\'/\\'\\"\\'\\"r\\'}'.split(';')"; else echo None; fi ),
  'outSAMheaderPG': $( if [ ! -z ${VIASH_PAR_OUTSAMHEADERPG+x} ]; then echo "r'${VIASH_PAR_OUTSAMHEADERPG//\\'/\\'\\"\\'\\"r\\'}'.split(';')"; else echo None; fi ),
  'outSAMheaderCommentFile': $( if [ ! -z ${VIASH_PAR_OUTSAMHEADERCOMMENTFILE+x} ]; then echo "r'${VIASH_PAR_OUTSAMHEADERCOMMENTFILE//\\'/\\'\\"\\'\\"r\\'}'"; else echo None; fi ),
  'outSAMfilter': $( if [ ! -z ${VIASH_PAR_OUTSAMFILTER+x} ]; then echo "r'${VIASH_PAR_OUTSAMFILTER//\\'/\\'\\"\\'\\"r\\'}'.split(';')"; else echo None; fi ),
  'outSAMmultNmax': $( if [ ! -z ${VIASH_PAR_OUTSAMMULTNMAX+x} ]; then echo "int(r'${VIASH_PAR_OUTSAMMULTNMAX//\\'/\\'\\"\\'\\"r\\'}')"; else echo None; fi ),
  'outSAMtlen': $( if [ ! -z ${VIASH_PAR_OUTSAMTLEN+x} ]; then echo "int(r'${VIASH_PAR_OUTSAMTLEN//\\'/\\'\\"\\'\\"r\\'}')"; else echo None; fi ),
  'outBAMcompression': $( if [ ! -z ${VIASH_PAR_OUTBAMCOMPRESSION+x} ]; then echo "int(r'${VIASH_PAR_OUTBAMCOMPRESSION//\\'/\\'\\"\\'\\"r\\'}')"; else echo None; fi ),
  'outBAMsortingThreadN': $( if [ ! -z ${VIASH_PAR_OUTBAMSORTINGTHREADN+x} ]; then echo "int(r'${VIASH_PAR_OUTBAMSORTINGTHREADN//\\'/\\'\\"\\'\\"r\\'}')"; else echo None; fi ),
  'outBAMsortingBinsN': $( if [ ! -z ${VIASH_PAR_OUTBAMSORTINGBINSN+x} ]; then echo "int(r'${VIASH_PAR_OUTBAMSORTINGBINSN//\\'/\\'\\"\\'\\"r\\'}')"; else echo None; fi ),
  'bamRemoveDuplicatesType': $( if [ ! -z ${VIASH_PAR_BAMREMOVEDUPLICATESTYPE+x} ]; then echo "r'${VIASH_PAR_BAMREMOVEDUPLICATESTYPE//\\'/\\'\\"\\'\\"r\\'}'"; else echo None; fi ),
  'bamRemoveDuplicatesMate2basesN': $( if [ ! -z ${VIASH_PAR_BAMREMOVEDUPLICATESMATE2BASESN+x} ]; then echo "int(r'${VIASH_PAR_BAMREMOVEDUPLICATESMATE2BASESN//\\'/\\'\\"\\'\\"r\\'}')"; else echo None; fi ),
  'outWigType': $( if [ ! -z ${VIASH_PAR_OUTWIGTYPE+x} ]; then echo "r'${VIASH_PAR_OUTWIGTYPE//\\'/\\'\\"\\'\\"r\\'}'.split(';')"; else echo None; fi ),
  'outWigStrand': $( if [ ! -z ${VIASH_PAR_OUTWIGSTRAND+x} ]; then echo "r'${VIASH_PAR_OUTWIGSTRAND//\\'/\\'\\"\\'\\"r\\'}'"; else echo None; fi ),
  'outWigReferencesPrefix': $( if [ ! -z ${VIASH_PAR_OUTWIGREFERENCESPREFIX+x} ]; then echo "r'${VIASH_PAR_OUTWIGREFERENCESPREFIX//\\'/\\'\\"\\'\\"r\\'}'"; else echo None; fi ),
  'outWigNorm': $( if [ ! -z ${VIASH_PAR_OUTWIGNORM+x} ]; then echo "r'${VIASH_PAR_OUTWIGNORM//\\'/\\'\\"\\'\\"r\\'}'"; else echo None; fi ),
  'outFilterType': $( if [ ! -z ${VIASH_PAR_OUTFILTERTYPE+x} ]; then echo "r'${VIASH_PAR_OUTFILTERTYPE//\\'/\\'\\"\\'\\"r\\'}'"; else echo None; fi ),
  'outFilterMultimapScoreRange': $( if [ ! -z ${VIASH_PAR_OUTFILTERMULTIMAPSCORERANGE+x} ]; then echo "int(r'${VIASH_PAR_OUTFILTERMULTIMAPSCORERANGE//\\'/\\'\\"\\'\\"r\\'}')"; else echo None; fi ),
  'outFilterMultimapNmax': $( if [ ! -z ${VIASH_PAR_OUTFILTERMULTIMAPNMAX+x} ]; then echo "int(r'${VIASH_PAR_OUTFILTERMULTIMAPNMAX//\\'/\\'\\"\\'\\"r\\'}')"; else echo None; fi ),
  'outFilterMismatchNmax': $( if [ ! -z ${VIASH_PAR_OUTFILTERMISMATCHNMAX+x} ]; then echo "int(r'${VIASH_PAR_OUTFILTERMISMATCHNMAX//\\'/\\'\\"\\'\\"r\\'}')"; else echo None; fi ),
  'outFilterMismatchNoverLmax': $( if [ ! -z ${VIASH_PAR_OUTFILTERMISMATCHNOVERLMAX+x} ]; then echo "float(r'${VIASH_PAR_OUTFILTERMISMATCHNOVERLMAX//\\'/\\'\\"\\'\\"r\\'}')"; else echo None; fi ),
  'outFilterMismatchNoverReadLmax': $( if [ ! -z ${VIASH_PAR_OUTFILTERMISMATCHNOVERREADLMAX+x} ]; then echo "float(r'${VIASH_PAR_OUTFILTERMISMATCHNOVERREADLMAX//\\'/\\'\\"\\'\\"r\\'}')"; else echo None; fi ),
  'outFilterScoreMin': $( if [ ! -z ${VIASH_PAR_OUTFILTERSCOREMIN+x} ]; then echo "int(r'${VIASH_PAR_OUTFILTERSCOREMIN//\\'/\\'\\"\\'\\"r\\'}')"; else echo None; fi ),
  'outFilterScoreMinOverLread': $( if [ ! -z ${VIASH_PAR_OUTFILTERSCOREMINOVERLREAD+x} ]; then echo "float(r'${VIASH_PAR_OUTFILTERSCOREMINOVERLREAD//\\'/\\'\\"\\'\\"r\\'}')"; else echo None; fi ),
  'outFilterMatchNmin': $( if [ ! -z ${VIASH_PAR_OUTFILTERMATCHNMIN+x} ]; then echo "int(r'${VIASH_PAR_OUTFILTERMATCHNMIN//\\'/\\'\\"\\'\\"r\\'}')"; else echo None; fi ),
  'outFilterMatchNminOverLread': $( if [ ! -z ${VIASH_PAR_OUTFILTERMATCHNMINOVERLREAD+x} ]; then echo "float(r'${VIASH_PAR_OUTFILTERMATCHNMINOVERLREAD//\\'/\\'\\"\\'\\"r\\'}')"; else echo None; fi ),
  'outFilterIntronMotifs': $( if [ ! -z ${VIASH_PAR_OUTFILTERINTRONMOTIFS+x} ]; then echo "r'${VIASH_PAR_OUTFILTERINTRONMOTIFS//\\'/\\'\\"\\'\\"r\\'}'"; else echo None; fi ),
  'outFilterIntronStrands': $( if [ ! -z ${VIASH_PAR_OUTFILTERINTRONSTRANDS+x} ]; then echo "r'${VIASH_PAR_OUTFILTERINTRONSTRANDS//\\'/\\'\\"\\'\\"r\\'}'"; else echo None; fi ),
  'outSJtype': $( if [ ! -z ${VIASH_PAR_OUTSJTYPE+x} ]; then echo "r'${VIASH_PAR_OUTSJTYPE//\\'/\\'\\"\\'\\"r\\'}'"; else echo None; fi ),
  'outSJfilterReads': $( if [ ! -z ${VIASH_PAR_OUTSJFILTERREADS+x} ]; then echo "r'${VIASH_PAR_OUTSJFILTERREADS//\\'/\\'\\"\\'\\"r\\'}'"; else echo None; fi ),
  'outSJfilterOverhangMin': $( if [ ! -z ${VIASH_PAR_OUTSJFILTEROVERHANGMIN+x} ]; then echo "list(map(int, r'${VIASH_PAR_OUTSJFILTEROVERHANGMIN//\\'/\\'\\"\\'\\"r\\'}'.split(';')))"; else echo None; fi ),
  'outSJfilterCountUniqueMin': $( if [ ! -z ${VIASH_PAR_OUTSJFILTERCOUNTUNIQUEMIN+x} ]; then echo "list(map(int, r'${VIASH_PAR_OUTSJFILTERCOUNTUNIQUEMIN//\\'/\\'\\"\\'\\"r\\'}'.split(';')))"; else echo None; fi ),
  'outSJfilterCountTotalMin': $( if [ ! -z ${VIASH_PAR_OUTSJFILTERCOUNTTOTALMIN+x} ]; then echo "list(map(int, r'${VIASH_PAR_OUTSJFILTERCOUNTTOTALMIN//\\'/\\'\\"\\'\\"r\\'}'.split(';')))"; else echo None; fi ),
  'outSJfilterDistToOtherSJmin': $( if [ ! -z ${VIASH_PAR_OUTSJFILTERDISTTOOTHERSJMIN+x} ]; then echo "list(map(int, r'${VIASH_PAR_OUTSJFILTERDISTTOOTHERSJMIN//\\'/\\'\\"\\'\\"r\\'}'.split(';')))"; else echo None; fi ),
  'outSJfilterIntronMaxVsReadN': $( if [ ! -z ${VIASH_PAR_OUTSJFILTERINTRONMAXVSREADN+x} ]; then echo "list(map(int, r'${VIASH_PAR_OUTSJFILTERINTRONMAXVSREADN//\\'/\\'\\"\\'\\"r\\'}'.split(';')))"; else echo None; fi ),
  'scoreGap': $( if [ ! -z ${VIASH_PAR_SCOREGAP+x} ]; then echo "int(r'${VIASH_PAR_SCOREGAP//\\'/\\'\\"\\'\\"r\\'}')"; else echo None; fi ),
  'scoreGapNoncan': $( if [ ! -z ${VIASH_PAR_SCOREGAPNONCAN+x} ]; then echo "int(r'${VIASH_PAR_SCOREGAPNONCAN//\\'/\\'\\"\\'\\"r\\'}')"; else echo None; fi ),
  'scoreGapGCAG': $( if [ ! -z ${VIASH_PAR_SCOREGAPGCAG+x} ]; then echo "int(r'${VIASH_PAR_SCOREGAPGCAG//\\'/\\'\\"\\'\\"r\\'}')"; else echo None; fi ),
  'scoreGapATAC': $( if [ ! -z ${VIASH_PAR_SCOREGAPATAC+x} ]; then echo "int(r'${VIASH_PAR_SCOREGAPATAC//\\'/\\'\\"\\'\\"r\\'}')"; else echo None; fi ),
  'scoreGenomicLengthLog2scale': $( if [ ! -z ${VIASH_PAR_SCOREGENOMICLENGTHLOG2SCALE+x} ]; then echo "int(r'${VIASH_PAR_SCOREGENOMICLENGTHLOG2SCALE//\\'/\\'\\"\\'\\"r\\'}')"; else echo None; fi ),
  'scoreDelOpen': $( if [ ! -z ${VIASH_PAR_SCOREDELOPEN+x} ]; then echo "int(r'${VIASH_PAR_SCOREDELOPEN//\\'/\\'\\"\\'\\"r\\'}')"; else echo None; fi ),
  'scoreDelBase': $( if [ ! -z ${VIASH_PAR_SCOREDELBASE+x} ]; then echo "int(r'${VIASH_PAR_SCOREDELBASE//\\'/\\'\\"\\'\\"r\\'}')"; else echo None; fi ),
  'scoreInsOpen': $( if [ ! -z ${VIASH_PAR_SCOREINSOPEN+x} ]; then echo "int(r'${VIASH_PAR_SCOREINSOPEN//\\'/\\'\\"\\'\\"r\\'}')"; else echo None; fi ),
  'scoreInsBase': $( if [ ! -z ${VIASH_PAR_SCOREINSBASE+x} ]; then echo "int(r'${VIASH_PAR_SCOREINSBASE//\\'/\\'\\"\\'\\"r\\'}')"; else echo None; fi ),
  'scoreStitchSJshift': $( if [ ! -z ${VIASH_PAR_SCORESTITCHSJSHIFT+x} ]; then echo "int(r'${VIASH_PAR_SCORESTITCHSJSHIFT//\\'/\\'\\"\\'\\"r\\'}')"; else echo None; fi ),
  'seedSearchStartLmax': $( if [ ! -z ${VIASH_PAR_SEEDSEARCHSTARTLMAX+x} ]; then echo "int(r'${VIASH_PAR_SEEDSEARCHSTARTLMAX//\\'/\\'\\"\\'\\"r\\'}')"; else echo None; fi ),
  'seedSearchStartLmaxOverLread': $( if [ ! -z ${VIASH_PAR_SEEDSEARCHSTARTLMAXOVERLREAD+x} ]; then echo "float(r'${VIASH_PAR_SEEDSEARCHSTARTLMAXOVERLREAD//\\'/\\'\\"\\'\\"r\\'}')"; else echo None; fi ),
  'seedSearchLmax': $( if [ ! -z ${VIASH_PAR_SEEDSEARCHLMAX+x} ]; then echo "int(r'${VIASH_PAR_SEEDSEARCHLMAX//\\'/\\'\\"\\'\\"r\\'}')"; else echo None; fi ),
  'seedMultimapNmax': $( if [ ! -z ${VIASH_PAR_SEEDMULTIMAPNMAX+x} ]; then echo "int(r'${VIASH_PAR_SEEDMULTIMAPNMAX//\\'/\\'\\"\\'\\"r\\'}')"; else echo None; fi ),
  'seedPerReadNmax': $( if [ ! -z ${VIASH_PAR_SEEDPERREADNMAX+x} ]; then echo "int(r'${VIASH_PAR_SEEDPERREADNMAX//\\'/\\'\\"\\'\\"r\\'}')"; else echo None; fi ),
  'seedPerWindowNmax': $( if [ ! -z ${VIASH_PAR_SEEDPERWINDOWNMAX+x} ]; then echo "int(r'${VIASH_PAR_SEEDPERWINDOWNMAX//\\'/\\'\\"\\'\\"r\\'}')"; else echo None; fi ),
  'seedNoneLociPerWindow': $( if [ ! -z ${VIASH_PAR_SEEDNONELOCIPERWINDOW+x} ]; then echo "int(r'${VIASH_PAR_SEEDNONELOCIPERWINDOW//\\'/\\'\\"\\'\\"r\\'}')"; else echo None; fi ),
  'seedSplitMin': $( if [ ! -z ${VIASH_PAR_SEEDSPLITMIN+x} ]; then echo "int(r'${VIASH_PAR_SEEDSPLITMIN//\\'/\\'\\"\\'\\"r\\'}')"; else echo None; fi ),
  'seedMapMin': $( if [ ! -z ${VIASH_PAR_SEEDMAPMIN+x} ]; then echo "int(r'${VIASH_PAR_SEEDMAPMIN//\\'/\\'\\"\\'\\"r\\'}')"; else echo None; fi ),
  'alignIntronMin': $( if [ ! -z ${VIASH_PAR_ALIGNINTRONMIN+x} ]; then echo "int(r'${VIASH_PAR_ALIGNINTRONMIN//\\'/\\'\\"\\'\\"r\\'}')"; else echo None; fi ),
  'alignIntronMax': $( if [ ! -z ${VIASH_PAR_ALIGNINTRONMAX+x} ]; then echo "int(r'${VIASH_PAR_ALIGNINTRONMAX//\\'/\\'\\"\\'\\"r\\'}')"; else echo None; fi ),
  'alignMatesGapMax': $( if [ ! -z ${VIASH_PAR_ALIGNMATESGAPMAX+x} ]; then echo "int(r'${VIASH_PAR_ALIGNMATESGAPMAX//\\'/\\'\\"\\'\\"r\\'}')"; else echo None; fi ),
  'alignSJoverhangMin': $( if [ ! -z ${VIASH_PAR_ALIGNSJOVERHANGMIN+x} ]; then echo "int(r'${VIASH_PAR_ALIGNSJOVERHANGMIN//\\'/\\'\\"\\'\\"r\\'}')"; else echo None; fi ),
  'alignSJstitchMismatchNmax': $( if [ ! -z ${VIASH_PAR_ALIGNSJSTITCHMISMATCHNMAX+x} ]; then echo "list(map(int, r'${VIASH_PAR_ALIGNSJSTITCHMISMATCHNMAX//\\'/\\'\\"\\'\\"r\\'}'.split(';')))"; else echo None; fi ),
  'alignSJDBoverhangMin': $( if [ ! -z ${VIASH_PAR_ALIGNSJDBOVERHANGMIN+x} ]; then echo "int(r'${VIASH_PAR_ALIGNSJDBOVERHANGMIN//\\'/\\'\\"\\'\\"r\\'}')"; else echo None; fi ),
  'alignSplicedMateMapLmin': $( if [ ! -z ${VIASH_PAR_ALIGNSPLICEDMATEMAPLMIN+x} ]; then echo "int(r'${VIASH_PAR_ALIGNSPLICEDMATEMAPLMIN//\\'/\\'\\"\\'\\"r\\'}')"; else echo None; fi ),
  'alignSplicedMateMapLminOverLmate': $( if [ ! -z ${VIASH_PAR_ALIGNSPLICEDMATEMAPLMINOVERLMATE+x} ]; then echo "float(r'${VIASH_PAR_ALIGNSPLICEDMATEMAPLMINOVERLMATE//\\'/\\'\\"\\'\\"r\\'}')"; else echo None; fi ),
  'alignWindowsPerReadNmax': $( if [ ! -z ${VIASH_PAR_ALIGNWINDOWSPERREADNMAX+x} ]; then echo "int(r'${VIASH_PAR_ALIGNWINDOWSPERREADNMAX//\\'/\\'\\"\\'\\"r\\'}')"; else echo None; fi ),
  'alignTranscriptsPerWindowNmax': $( if [ ! -z ${VIASH_PAR_ALIGNTRANSCRIPTSPERWINDOWNMAX+x} ]; then echo "int(r'${VIASH_PAR_ALIGNTRANSCRIPTSPERWINDOWNMAX//\\'/\\'\\"\\'\\"r\\'}')"; else echo None; fi ),
  'alignTranscriptsPerReadNmax': $( if [ ! -z ${VIASH_PAR_ALIGNTRANSCRIPTSPERREADNMAX+x} ]; then echo "int(r'${VIASH_PAR_ALIGNTRANSCRIPTSPERREADNMAX//\\'/\\'\\"\\'\\"r\\'}')"; else echo None; fi ),
  'alignEndsType': $( if [ ! -z ${VIASH_PAR_ALIGNENDSTYPE+x} ]; then echo "r'${VIASH_PAR_ALIGNENDSTYPE//\\'/\\'\\"\\'\\"r\\'}'"; else echo None; fi ),
  'alignEndsProtrude': $( if [ ! -z ${VIASH_PAR_ALIGNENDSPROTRUDE+x} ]; then echo "r'${VIASH_PAR_ALIGNENDSPROTRUDE//\\'/\\'\\"\\'\\"r\\'}'"; else echo None; fi ),
  'alignSoftClipAtReferenceEnds': $( if [ ! -z ${VIASH_PAR_ALIGNSOFTCLIPATREFERENCEENDS+x} ]; then echo "r'${VIASH_PAR_ALIGNSOFTCLIPATREFERENCEENDS//\\'/\\'\\"\\'\\"r\\'}'"; else echo None; fi ),
  'alignInsertionFlush': $( if [ ! -z ${VIASH_PAR_ALIGNINSERTIONFLUSH+x} ]; then echo "r'${VIASH_PAR_ALIGNINSERTIONFLUSH//\\'/\\'\\"\\'\\"r\\'}'"; else echo None; fi ),
  'peOverlapNbasesMin': $( if [ ! -z ${VIASH_PAR_PEOVERLAPNBASESMIN+x} ]; then echo "int(r'${VIASH_PAR_PEOVERLAPNBASESMIN//\\'/\\'\\"\\'\\"r\\'}')"; else echo None; fi ),
  'peOverlapMMp': $( if [ ! -z ${VIASH_PAR_PEOVERLAPMMP+x} ]; then echo "float(r'${VIASH_PAR_PEOVERLAPMMP//\\'/\\'\\"\\'\\"r\\'}')"; else echo None; fi ),
  'winAnchorMultimapNmax': $( if [ ! -z ${VIASH_PAR_WINANCHORMULTIMAPNMAX+x} ]; then echo "int(r'${VIASH_PAR_WINANCHORMULTIMAPNMAX//\\'/\\'\\"\\'\\"r\\'}')"; else echo None; fi ),
  'winBinNbits': $( if [ ! -z ${VIASH_PAR_WINBINNBITS+x} ]; then echo "int(r'${VIASH_PAR_WINBINNBITS//\\'/\\'\\"\\'\\"r\\'}')"; else echo None; fi ),
  'winAnchorDistNbins': $( if [ ! -z ${VIASH_PAR_WINANCHORDISTNBINS+x} ]; then echo "int(r'${VIASH_PAR_WINANCHORDISTNBINS//\\'/\\'\\"\\'\\"r\\'}')"; else echo None; fi ),
  'winFlankNbins': $( if [ ! -z ${VIASH_PAR_WINFLANKNBINS+x} ]; then echo "int(r'${VIASH_PAR_WINFLANKNBINS//\\'/\\'\\"\\'\\"r\\'}')"; else echo None; fi ),
  'winReadCoverageRelativeMin': $( if [ ! -z ${VIASH_PAR_WINREADCOVERAGERELATIVEMIN+x} ]; then echo "float(r'${VIASH_PAR_WINREADCOVERAGERELATIVEMIN//\\'/\\'\\"\\'\\"r\\'}')"; else echo None; fi ),
  'winReadCoverageBasesMin': $( if [ ! -z ${VIASH_PAR_WINREADCOVERAGEBASESMIN+x} ]; then echo "int(r'${VIASH_PAR_WINREADCOVERAGEBASESMIN//\\'/\\'\\"\\'\\"r\\'}')"; else echo None; fi ),
  'chimOutType': $( if [ ! -z ${VIASH_PAR_CHIMOUTTYPE+x} ]; then echo "r'${VIASH_PAR_CHIMOUTTYPE//\\'/\\'\\"\\'\\"r\\'}'.split(';')"; else echo None; fi ),
  'chimSegmentMin': $( if [ ! -z ${VIASH_PAR_CHIMSEGMENTMIN+x} ]; then echo "int(r'${VIASH_PAR_CHIMSEGMENTMIN//\\'/\\'\\"\\'\\"r\\'}')"; else echo None; fi ),
  'chimScoreMin': $( if [ ! -z ${VIASH_PAR_CHIMSCOREMIN+x} ]; then echo "int(r'${VIASH_PAR_CHIMSCOREMIN//\\'/\\'\\"\\'\\"r\\'}')"; else echo None; fi ),
  'chimScoreDropMax': $( if [ ! -z ${VIASH_PAR_CHIMSCOREDROPMAX+x} ]; then echo "int(r'${VIASH_PAR_CHIMSCOREDROPMAX//\\'/\\'\\"\\'\\"r\\'}')"; else echo None; fi ),
  'chimScoreSeparation': $( if [ ! -z ${VIASH_PAR_CHIMSCORESEPARATION+x} ]; then echo "int(r'${VIASH_PAR_CHIMSCORESEPARATION//\\'/\\'\\"\\'\\"r\\'}')"; else echo None; fi ),
  'chimScoreJunctionNonGTAG': $( if [ ! -z ${VIASH_PAR_CHIMSCOREJUNCTIONNONGTAG+x} ]; then echo "int(r'${VIASH_PAR_CHIMSCOREJUNCTIONNONGTAG//\\'/\\'\\"\\'\\"r\\'}')"; else echo None; fi ),
  'chimJunctionOverhangMin': $( if [ ! -z ${VIASH_PAR_CHIMJUNCTIONOVERHANGMIN+x} ]; then echo "int(r'${VIASH_PAR_CHIMJUNCTIONOVERHANGMIN//\\'/\\'\\"\\'\\"r\\'}')"; else echo None; fi ),
  'chimSegmentReadGapMax': $( if [ ! -z ${VIASH_PAR_CHIMSEGMENTREADGAPMAX+x} ]; then echo "int(r'${VIASH_PAR_CHIMSEGMENTREADGAPMAX//\\'/\\'\\"\\'\\"r\\'}')"; else echo None; fi ),
  'chimFilter': $( if [ ! -z ${VIASH_PAR_CHIMFILTER+x} ]; then echo "r'${VIASH_PAR_CHIMFILTER//\\'/\\'\\"\\'\\"r\\'}'.split(';')"; else echo None; fi ),
  'chimMainSegmentMultNmax': $( if [ ! -z ${VIASH_PAR_CHIMMAINSEGMENTMULTNMAX+x} ]; then echo "int(r'${VIASH_PAR_CHIMMAINSEGMENTMULTNMAX//\\'/\\'\\"\\'\\"r\\'}')"; else echo None; fi ),
  'chimMultimapNmax': $( if [ ! -z ${VIASH_PAR_CHIMMULTIMAPNMAX+x} ]; then echo "int(r'${VIASH_PAR_CHIMMULTIMAPNMAX//\\'/\\'\\"\\'\\"r\\'}')"; else echo None; fi ),
  'chimMultimapScoreRange': $( if [ ! -z ${VIASH_PAR_CHIMMULTIMAPSCORERANGE+x} ]; then echo "int(r'${VIASH_PAR_CHIMMULTIMAPSCORERANGE//\\'/\\'\\"\\'\\"r\\'}')"; else echo None; fi ),
  'chimNonchimScoreDropMin': $( if [ ! -z ${VIASH_PAR_CHIMNONCHIMSCOREDROPMIN+x} ]; then echo "int(r'${VIASH_PAR_CHIMNONCHIMSCOREDROPMIN//\\'/\\'\\"\\'\\"r\\'}')"; else echo None; fi ),
  'chimOutJunctionFormat': $( if [ ! -z ${VIASH_PAR_CHIMOUTJUNCTIONFORMAT+x} ]; then echo "int(r'${VIASH_PAR_CHIMOUTJUNCTIONFORMAT//\\'/\\'\\"\\'\\"r\\'}')"; else echo None; fi ),
  'quantMode': $( if [ ! -z ${VIASH_PAR_QUANTMODE+x} ]; then echo "r'${VIASH_PAR_QUANTMODE//\\'/\\'\\"\\'\\"r\\'}'.split(';')"; else echo None; fi ),
  'quantTranscriptomeBAMcompression': $( if [ ! -z ${VIASH_PAR_QUANTTRANSCRIPTOMEBAMCOMPRESSION+x} ]; then echo "int(r'${VIASH_PAR_QUANTTRANSCRIPTOMEBAMCOMPRESSION//\\'/\\'\\"\\'\\"r\\'}')"; else echo None; fi ),
  'quantTranscriptomeBan': $( if [ ! -z ${VIASH_PAR_QUANTTRANSCRIPTOMEBAN+x} ]; then echo "r'${VIASH_PAR_QUANTTRANSCRIPTOMEBAN//\\'/\\'\\"\\'\\"r\\'}'"; else echo None; fi ),
  'twopassMode': $( if [ ! -z ${VIASH_PAR_TWOPASSMODE+x} ]; then echo "r'${VIASH_PAR_TWOPASSMODE//\\'/\\'\\"\\'\\"r\\'}'"; else echo None; fi ),
  'twopass1readsN': $( if [ ! -z ${VIASH_PAR_TWOPASS1READSN+x} ]; then echo "int(r'${VIASH_PAR_TWOPASS1READSN//\\'/\\'\\"\\'\\"r\\'}')"; else echo None; fi ),
  'waspOutputMode': $( if [ ! -z ${VIASH_PAR_WASPOUTPUTMODE+x} ]; then echo "r'${VIASH_PAR_WASPOUTPUTMODE//\\'/\\'\\"\\'\\"r\\'}'"; else echo None; fi ),
  'soloType': $( if [ ! -z ${VIASH_PAR_SOLOTYPE+x} ]; then echo "r'${VIASH_PAR_SOLOTYPE//\\'/\\'\\"\\'\\"r\\'}'.split(';')"; else echo None; fi ),
  'soloCBwhitelist': $( if [ ! -z ${VIASH_PAR_SOLOCBWHITELIST+x} ]; then echo "r'${VIASH_PAR_SOLOCBWHITELIST//\\'/\\'\\"\\'\\"r\\'}'.split(';')"; else echo None; fi ),
  'soloCBstart': $( if [ ! -z ${VIASH_PAR_SOLOCBSTART+x} ]; then echo "int(r'${VIASH_PAR_SOLOCBSTART//\\'/\\'\\"\\'\\"r\\'}')"; else echo None; fi ),
  'soloCBlen': $( if [ ! -z ${VIASH_PAR_SOLOCBLEN+x} ]; then echo "int(r'${VIASH_PAR_SOLOCBLEN//\\'/\\'\\"\\'\\"r\\'}')"; else echo None; fi ),
  'soloUMIstart': $( if [ ! -z ${VIASH_PAR_SOLOUMISTART+x} ]; then echo "int(r'${VIASH_PAR_SOLOUMISTART//\\'/\\'\\"\\'\\"r\\'}')"; else echo None; fi ),
  'soloUMIlen': $( if [ ! -z ${VIASH_PAR_SOLOUMILEN+x} ]; then echo "int(r'${VIASH_PAR_SOLOUMILEN//\\'/\\'\\"\\'\\"r\\'}')"; else echo None; fi ),
  'soloBarcodeReadLength': $( if [ ! -z ${VIASH_PAR_SOLOBARCODEREADLENGTH+x} ]; then echo "int(r'${VIASH_PAR_SOLOBARCODEREADLENGTH//\\'/\\'\\"\\'\\"r\\'}')"; else echo None; fi ),
  'soloBarcodeMate': $( if [ ! -z ${VIASH_PAR_SOLOBARCODEMATE+x} ]; then echo "int(r'${VIASH_PAR_SOLOBARCODEMATE//\\'/\\'\\"\\'\\"r\\'}')"; else echo None; fi ),
  'soloCBposition': $( if [ ! -z ${VIASH_PAR_SOLOCBPOSITION+x} ]; then echo "r'${VIASH_PAR_SOLOCBPOSITION//\\'/\\'\\"\\'\\"r\\'}'.split(';')"; else echo None; fi ),
  'soloUMIposition': $( if [ ! -z ${VIASH_PAR_SOLOUMIPOSITION+x} ]; then echo "r'${VIASH_PAR_SOLOUMIPOSITION//\\'/\\'\\"\\'\\"r\\'}'"; else echo None; fi ),
  'soloAdapterSequence': $( if [ ! -z ${VIASH_PAR_SOLOADAPTERSEQUENCE+x} ]; then echo "r'${VIASH_PAR_SOLOADAPTERSEQUENCE//\\'/\\'\\"\\'\\"r\\'}'"; else echo None; fi ),
  'soloAdapterMismatchesNmax': $( if [ ! -z ${VIASH_PAR_SOLOADAPTERMISMATCHESNMAX+x} ]; then echo "int(r'${VIASH_PAR_SOLOADAPTERMISMATCHESNMAX//\\'/\\'\\"\\'\\"r\\'}')"; else echo None; fi ),
  'soloCBmatchWLtype': $( if [ ! -z ${VIASH_PAR_SOLOCBMATCHWLTYPE+x} ]; then echo "r'${VIASH_PAR_SOLOCBMATCHWLTYPE//\\'/\\'\\"\\'\\"r\\'}'"; else echo None; fi ),
  'soloInputSAMattrBarcodeSeq': $( if [ ! -z ${VIASH_PAR_SOLOINPUTSAMATTRBARCODESEQ+x} ]; then echo "r'${VIASH_PAR_SOLOINPUTSAMATTRBARCODESEQ//\\'/\\'\\"\\'\\"r\\'}'.split(';')"; else echo None; fi ),
  'soloInputSAMattrBarcodeQual': $( if [ ! -z ${VIASH_PAR_SOLOINPUTSAMATTRBARCODEQUAL+x} ]; then echo "r'${VIASH_PAR_SOLOINPUTSAMATTRBARCODEQUAL//\\'/\\'\\"\\'\\"r\\'}'.split(';')"; else echo None; fi ),
  'soloStrand': $( if [ ! -z ${VIASH_PAR_SOLOSTRAND+x} ]; then echo "r'${VIASH_PAR_SOLOSTRAND//\\'/\\'\\"\\'\\"r\\'}'"; else echo None; fi ),
  'soloFeatures': $( if [ ! -z ${VIASH_PAR_SOLOFEATURES+x} ]; then echo "r'${VIASH_PAR_SOLOFEATURES//\\'/\\'\\"\\'\\"r\\'}'.split(';')"; else echo None; fi ),
  'soloMultiMappers': $( if [ ! -z ${VIASH_PAR_SOLOMULTIMAPPERS+x} ]; then echo "r'${VIASH_PAR_SOLOMULTIMAPPERS//\\'/\\'\\"\\'\\"r\\'}'.split(';')"; else echo None; fi ),
  'soloUMIdedup': $( if [ ! -z ${VIASH_PAR_SOLOUMIDEDUP+x} ]; then echo "r'${VIASH_PAR_SOLOUMIDEDUP//\\'/\\'\\"\\'\\"r\\'}'.split(';')"; else echo None; fi ),
  'soloUMIfiltering': $( if [ ! -z ${VIASH_PAR_SOLOUMIFILTERING+x} ]; then echo "r'${VIASH_PAR_SOLOUMIFILTERING//\\'/\\'\\"\\'\\"r\\'}'.split(';')"; else echo None; fi ),
  'soloOutFileNames': $( if [ ! -z ${VIASH_PAR_SOLOOUTFILENAMES+x} ]; then echo "r'${VIASH_PAR_SOLOOUTFILENAMES//\\'/\\'\\"\\'\\"r\\'}'.split(';')"; else echo None; fi ),
  'soloCellFilter': $( if [ ! -z ${VIASH_PAR_SOLOCELLFILTER+x} ]; then echo "r'${VIASH_PAR_SOLOCELLFILTER//\\'/\\'\\"\\'\\"r\\'}'.split(';')"; else echo None; fi ),
  'soloOutFormatFeaturesGeneField3': $( if [ ! -z ${VIASH_PAR_SOLOOUTFORMATFEATURESGENEFIELD3+x} ]; then echo "r'${VIASH_PAR_SOLOOUTFORMATFEATURESGENEFIELD3//\\'/\\'\\"\\'\\"r\\'}'.split(';')"; else echo None; fi ),
  'soloCellReadStats': $( if [ ! -z ${VIASH_PAR_SOLOCELLREADSTATS+x} ]; then echo "r'${VIASH_PAR_SOLOCELLREADSTATS//\\'/\\'\\"\\'\\"r\\'}'"; else echo None; fi ),
  'stranded': $( if [ ! -z ${VIASH_PAR_STRANDED+x} ]; then echo "r'${VIASH_PAR_STRANDED//\\'/\\'\\"\\'\\"r\\'}'"; else echo None; fi ),
  'minimum_alignment_quality': $( if [ ! -z ${VIASH_PAR_MINIMUM_ALIGNMENT_QUALITY+x} ]; then echo "int(r'${VIASH_PAR_MINIMUM_ALIGNMENT_QUALITY//\\'/\\'\\"\\'\\"r\\'}')"; else echo None; fi ),
  'type': $( if [ ! -z ${VIASH_PAR_TYPE+x} ]; then echo "r'${VIASH_PAR_TYPE//\\'/\\'\\"\\'\\"r\\'}'"; else echo None; fi ),
  'id_attribute': $( if [ ! -z ${VIASH_PAR_ID_ATTRIBUTE+x} ]; then echo "r'${VIASH_PAR_ID_ATTRIBUTE//\\'/\\'\\"\\'\\"r\\'}'.split(':')"; else echo None; fi ),
  'additional_attributes': $( if [ ! -z ${VIASH_PAR_ADDITIONAL_ATTRIBUTES+x} ]; then echo "r'${VIASH_PAR_ADDITIONAL_ATTRIBUTES//\\'/\\'\\"\\'\\"r\\'}'.split(':')"; else echo None; fi ),
  'add_chromosome_info': $( if [ ! -z ${VIASH_PAR_ADD_CHROMOSOME_INFO+x} ]; then echo "r'${VIASH_PAR_ADD_CHROMOSOME_INFO//\\'/\\'\\"\\'\\"r\\'}'.lower() == 'true'"; else echo None; fi ),
  'mode': $( if [ ! -z ${VIASH_PAR_MODE+x} ]; then echo "r'${VIASH_PAR_MODE//\\'/\\'\\"\\'\\"r\\'}'"; else echo None; fi ),
  'non_unique': $( if [ ! -z ${VIASH_PAR_NON_UNIQUE+x} ]; then echo "r'${VIASH_PAR_NON_UNIQUE//\\'/\\'\\"\\'\\"r\\'}'"; else echo None; fi ),
  'secondary_alignments': $( if [ ! -z ${VIASH_PAR_SECONDARY_ALIGNMENTS+x} ]; then echo "r'${VIASH_PAR_SECONDARY_ALIGNMENTS//\\'/\\'\\"\\'\\"r\\'}'"; else echo None; fi ),
  'supplementary_alignments': $( if [ ! -z ${VIASH_PAR_SUPPLEMENTARY_ALIGNMENTS+x} ]; then echo "r'${VIASH_PAR_SUPPLEMENTARY_ALIGNMENTS//\\'/\\'\\"\\'\\"r\\'}'"; else echo None; fi ),
  'counts_output_sparse': $( if [ ! -z ${VIASH_PAR_COUNTS_OUTPUT_SPARSE+x} ]; then echo "r'${VIASH_PAR_COUNTS_OUTPUT_SPARSE//\\'/\\'\\"\\'\\"r\\'}'.lower() == 'true'"; else echo None; fi )
}
meta = {
  'functionality_name': $( if [ ! -z ${VIASH_META_FUNCTIONALITY_NAME+x} ]; then echo "r'${VIASH_META_FUNCTIONALITY_NAME//\\'/\\'\\"\\'\\"r\\'}'"; else echo None; fi ),
  'resources_dir': $( if [ ! -z ${VIASH_META_RESOURCES_DIR+x} ]; then echo "r'${VIASH_META_RESOURCES_DIR//\\'/\\'\\"\\'\\"r\\'}'"; else echo None; fi ),
  'executable': $( if [ ! -z ${VIASH_META_EXECUTABLE+x} ]; then echo "r'${VIASH_META_EXECUTABLE//\\'/\\'\\"\\'\\"r\\'}'"; else echo None; fi ),
  'config': $( if [ ! -z ${VIASH_META_CONFIG+x} ]; then echo "r'${VIASH_META_CONFIG//\\'/\\'\\"\\'\\"r\\'}'"; else echo None; fi ),
  'temp_dir': $( if [ ! -z ${VIASH_META_TEMP_DIR+x} ]; then echo "r'${VIASH_META_TEMP_DIR//\\'/\\'\\"\\'\\"r\\'}'"; else echo None; fi ),
  'cpus': $( if [ ! -z ${VIASH_META_CPUS+x} ]; then echo "int(r'${VIASH_META_CPUS//\\'/\\'\\"\\'\\"r\\'}')"; else echo None; fi ),
  'memory_b': $( if [ ! -z ${VIASH_META_MEMORY_B+x} ]; then echo "int(r'${VIASH_META_MEMORY_B//\\'/\\'\\"\\'\\"r\\'}')"; else echo None; fi ),
  'memory_kb': $( if [ ! -z ${VIASH_META_MEMORY_KB+x} ]; then echo "int(r'${VIASH_META_MEMORY_KB//\\'/\\'\\"\\'\\"r\\'}')"; else echo None; fi ),
  'memory_mb': $( if [ ! -z ${VIASH_META_MEMORY_MB+x} ]; then echo "int(r'${VIASH_META_MEMORY_MB//\\'/\\'\\"\\'\\"r\\'}')"; else echo None; fi ),
  'memory_gb': $( if [ ! -z ${VIASH_META_MEMORY_GB+x} ]; then echo "int(r'${VIASH_META_MEMORY_GB//\\'/\\'\\"\\'\\"r\\'}')"; else echo None; fi ),
  'memory_tb': $( if [ ! -z ${VIASH_META_MEMORY_TB+x} ]; then echo "int(r'${VIASH_META_MEMORY_TB//\\'/\\'\\"\\'\\"r\\'}')"; else echo None; fi ),
  'memory_pb': $( if [ ! -z ${VIASH_META_MEMORY_PB+x} ]; then echo "int(r'${VIASH_META_MEMORY_PB//\\'/\\'\\"\\'\\"r\\'}')"; else echo None; fi )
}

## VIASH END

########################
### Helper functions ###
########################


def fetch_arguments_info(config: Dict[str, Any]) -> Dict[str, Any]:
    """Fetch arguments from config"""
    arguments = {
        arg["name"].removeprefix("-").removeprefix("-"): arg
        for group in config["functionality"]["argument_groups"]
        for arg in group["arguments"]
    }
    return arguments

def process_par(
    par: Dict[str, Any],
    arguments_info: Dict[str, Any],
    gz_args: List[str],
    temp_dir: Path
) -> Dict[str, Any]:
    """
    Process the Viash par dictionary

    This turns file strings into Path objects and extracting gzipped files if need be.

    Parameters
    ----------
    par: The par dictionary created by Viash
    arguments_info: The arguments info Dictionary created by \\`fetch_arguments_info\\`
    gz_args: A list of argument keys which could be gzip files which need to be decompressed.
    temp_dir: A temporary directory in which to ungzip files
    """
    new_par = {}
    for key, value in par.items():
        arg_info = arguments_info[key]
        # turn file arguments into paths
        if value and arg_info["type"] == "file":
            is_multiple = isinstance(value, list)

            if is_multiple:
                value = [Path(val) for val in value]
            else:
                value = Path(value)

            if key in gz_args:
                print(f">> Checking compression of --{key}", flush=True)
                # turn value into list if need be
                if not is_multiple:
                    value = [value]

                # extract
                value = [extract_if_need_be(path, temp_dir) for path in value]

                # unlist if need be
                if not is_multiple:
                    value = value[0]

        new_par[key] = value
    return new_par

def generate_cmd_arguments(par, arguments_info, step_filter=None, flatten=False):
    """
    Generate command-line arguments by fetching the relevant args

    Parameters
    ----------
    par: The par dictionary created by Viash
    arguments_info: The arguments info Dictionary created by \\`fetch_arguments_info\\`
    step_filter: If provided,\\`par\\` will be filtered to only contain arguments for which
      argument.info.step == step_filter.
    flatten: If \\`False\\`, the command for an argument with multiple values will be
      \\`["--key", "value1", "--key", "value2"]\\`, otherwise \\`["--key", "value1", "value2"]\\`.
    """
    cmd_args = []

    for key, arg in arguments_info.items():
        arg_val = par.get(key)
        orig_arg = arg.get("info", {}).get("orig_arg")
        step = arg.get("info", {}).get("step")
        if arg_val and orig_arg and (not step_filter or step == step_filter):
            if not arg.get("multiple", False):
                arg_val = [arg_val]

            if arg["type"] in ["boolean_true", "boolean_false"]:
                # if argument is a boolean_true or boolean_false, simply add the flag
                arg_val = [orig_arg]
            elif orig_arg.startswith("-"):
                # if the orig arg flag is not a positional,
                # add the flag in front of each element and flatten
                if flatten:
                    arg_val = [str(x) for x in [orig_arg] + arg_val]
                else:
                    arg_val = [str(x) for val in arg_val for x in [orig_arg, val]]

            cmd_args.extend(arg_val)

    return cmd_args

def is_gz_file(path: Path) -> bool:
    """Check whether something is a gzip"""
    with open(path, "rb") as file:
        return file.read(2) == b"\\\\x1f\\\\x8b"

def extract_if_need_be(par_value: Path, temp_dir_path: Path) -> Path:
    """if {par_value} is a Path, extract it to a temp_dir_path and return the resulting path"""
    if par_value.is_file() and tarfile.is_tarfile(par_value):
        # Remove two extensions (if they exist)
        extaction_dir_name = Path(par_value.stem).stem
        unpacked_path = temp_dir_path / extaction_dir_name
        print(f"  Tar detected; extracting {par_value} to {unpacked_path}", flush=True)

        with tarfile.open(par_value, "r") as open_tar:
            members = open_tar.getmembers()
            root_dirs = [
                member
                for member in members
                if member.isdir() and member.name != "." and "/" not in member.name
            ]
            # if there is only one root_dir (and there are files in that directory)
            # strip that directory name from the destination folder
            if len(root_dirs) == 1:
                for mem in members:
                    mem.path = Path(*Path(mem.path).parts[1:])
            members_to_move = [mem for mem in members if mem.path != Path(".")]
            open_tar.extractall(unpacked_path, members=members_to_move)
        return unpacked_path

    elif par_value.is_file() and is_gz_file(par_value):
        # Remove extension (if it exists)
        extaction_file_name = Path(par_value.stem)
        unpacked_path = temp_dir_path / extaction_file_name
        print(f"  Gzip detected; extracting {par_value} to {unpacked_path}", flush=True)

        with gzip.open(par_value, "rb") as f_in:
            with open(unpacked_path, "wb") as f_out:
                shutil.copyfileobj(f_in, f_out)
        return unpacked_path

    else:
        return par_value

def load_star_reference(reference_index: str) -> None:
    """Load star reference index into memory."""
    subprocess.run(
        [
            "STAR",
            "--genomeLoad", "LoadAndExit",
            "--genomeDir", str(reference_index),
        ],
        check=True
    )

def unload_star_reference(reference_index: str) -> None:
    """Remove star reference index from memory."""
    subprocess.run(
        [
            "STAR",
            "--genomeLoad", "Remove",
            "--genomeDir", str(reference_index),
        ],
        check=True
    )

def star_and_htseq(
    group_id: str,
    r1_files: List[Path],
    r2_files: List[Path],
    temp_dir: Path,
    par: Dict[str, Any],
    arguments_info: Dict[str, Any],
    num_threads: int
):
    star_output = par["output"] / "per" / group_id
    unsorted_bam = star_output / "Aligned.out.bam"
    sorted_bam = star_output / "Aligned.sorted.out.bam"
    counts_file = star_output / "htseq-count.txt"
    multiqc_path = star_output / "multiqc_data"

    print(f">> Running STAR for group '{group_id}' with command:", flush=True)
    star_output.mkdir(parents=True, exist_ok=True)
    run_star(
        r1_files=r1_files,
        r2_files=r2_files,
        output_dir=star_output,
        temp_dir=temp_dir / f"star_tmp_{group_id}",
        par=par,
        arguments_info=arguments_info,
        num_threads=num_threads
    )
    assert unsorted_bam.exists()

    if par["run_htseq_count"]:
        print(f">> Running samtools sort for group '{group_id}' with command:", flush=True)
        run_samtools_sort(unsorted_bam, sorted_bam)
        assert sorted_bam.exists()

        print(f">> Running htseq-count for group '{group_id}' with command:", flush=True)
        run_htseq_count(sorted_bam, counts_file, par, arguments_info)
        assert counts_file.exists()

    if par["run_multiqc"]:
        run_multiqc(star_output)
        assert multiqc_path.exists()

def run_star(
    r1_files: List[Path],
    r2_files: List[Path],
    output_dir: Path,
    temp_dir: Path,
    par: Dict[str, Any],
    arguments_info: Dict[str, Any],
    num_threads: int
) -> None:
    """Run star"""
    # process manual arguments
    r1_pasted = [",".join([str(r1) for r1 in r1_files])]
    r2_pasted = [",".join([str(r2) for r2 in r2_files])] if r2_files else []
    manual_par = {
        "--genomeDir": [par["reference_index"]],
        "--genomeLoad": ["LoadAndRemove"],
        "--runThreadN": [str(num_threads)],
        "--runMode": ["alignReads"],
        "--readFilesIn": r1_pasted + r2_pasted,
        # create a tempdir per group
        "--outTmpDir": [temp_dir],
        # make sure there is a trailing /
        "--outFileNamePrefix": [f"{output_dir}/"],
        # fix the outSAMtype to return unsorted BAM files
        "--outSAMtype": ["BAM", "Unsorted"]
    }
    manual_cmd = [str(x)
        for key, values in manual_par.items()
        for x in [key] + values
    ]

    # process all passthrough star arguments
    par_cmd = generate_cmd_arguments(par, arguments_info, "star", flatten=True)

    # combine into one command and turn into strings
    cmd_args = [str(val) for val in ["STAR"] + manual_cmd + par_cmd]

    # run star
    subprocess.run(cmd_args, check=True)

def run_samtools_sort(
    unsorted_bam: Path,
    sorted_bam: Path
) -> None:
    "Run samtools sort"
    cmd_args = [
        "samtools",
        "sort",
        "-o",
        sorted_bam,
        unsorted_bam,
    ]
    subprocess.run(cmd_args, check=True)

def run_htseq_count(
    sorted_bam: Path,
    counts_file: Path,
    par: Dict[str, Any],
    arguments_info: Dict[str, Any]
) -> None:
    """Run HTSeq count"""
    # process manual arguments
    manual_cmd = [
        sorted_bam,
        par["reference_gtf"]
    ]

    # process all passthrough htseq arguments
    par_cmd = generate_cmd_arguments(par, arguments_info, "htseq")

    # combine into one command and turn into strings
    cmd_args = [str(val) for val in ["htseq-count"] + manual_cmd + par_cmd]

    # run htseq
    with open(counts_file, "w", encoding="utf-8") as file:
        subprocess.run(cmd_args, check=True, stdout=file)

def get_feature_info(reference_gtf) -> pd.DataFrame:
    ref = gtfparse.read_gtf(reference_gtf)
    ref_genes = ref.loc[(ref["feature"] == "gene") | (ref["source"] == "ERCC")]
    return pd.DataFrame(
        {
            "feature_id": ref_genes["gene_id"],
            "feature_type": "Gene Expression",
            "feature_name": ref_genes["gene_name"]
        }
    )

def run_multiqc(input_dir: Path) -> None:
    cmd_args = ["multiqc", str(input_dir), "--outdir", str(input_dir), "--no-report", "--force"]

    # run multiqc
    subprocess.run(cmd_args, check=True)


########################
###    Main code     ###
########################

def main(par, meta):
    """Main function"""

    # check input arguments
    assert len(par["input_id"]) == len(par["input_r1"]), "--input_r1 should have same length as --input_id"
    if par["input_r2"]:
        assert len(par["input_id"]) == len(par["input_r2"]), "--input_r2 should have same length as --input_id"

    # read config arguments
    with open(meta["config"], "r", encoding="utf-8") as file:
        config = yaml.safe_load(file)

    # fetch all arguments from the config and turn it into a Dict[str, Argument]
    arguments_info = fetch_arguments_info(config)

    temp_dir = "tmp/"
    with tempfile.TemporaryDirectory(
        prefix=f"{meta['functionality_name']}-",
        dir=meta["temp_dir"],
        ignore_cleanup_errors=True
    ) as temp_dir:
        temp_dir = Path(temp_dir)

        # turn file strings into Paths and decompress gzip if need be
        gz_args = ["input_r1", "input_r2", "reference_index", "reference_gtf"]
        par = process_par(par, arguments_info, gz_args, temp_dir)

        # make sure input_r2 has same length as input_r1
        if not par["input_r2"]:
            par["input_r2"] = [None for _ in par["input_r1"]]

        # group input_files by input_id
        print(">> Group by --input_id", flush=True)
        grouped_inputs = {}
        for group_id, file_r1, file_r2 in zip(par["input_id"], par["input_r1"], par["input_r2"]):
            if group_id not in grouped_inputs:
                grouped_inputs[group_id] = ([], [])
            grouped_inputs[group_id][0].append(file_r1)
            if file_r2:
                grouped_inputs[group_id][1].append(file_r2)

        # create output dir if need be
        par["output"].mkdir(parents=True, exist_ok=True)

        # store features metadata
        feature_info = get_feature_info(str(par["reference_gtf"]))
        with open(par["output"] / "feature_info.tsv", "w", encoding="utf-8") as file:
            feature_info.to_csv(file, sep="\\\\t", index=False)

        # try:
        #     print(">> Loading genome in memory", flush=True)
        #     load_star_reference(par["reference_index"])

        cpus = meta.get("cpus", 1)
        num_items = len(grouped_inputs)
        pool_size = min(cpus, num_items)
        num_threads_per_task = math.ceil(cpus / pool_size)

        with Pool(pool_size) as pool:
            pool.starmap(
                lambda group_id, files: star_and_htseq(
                    group_id=group_id,
                    r1_files=files[0],
                    r2_files=files[1],
                    temp_dir=temp_dir,
                    par=par,
                    arguments_info=arguments_info,
                    num_threads=num_threads_per_task
                ),
                grouped_inputs.items()
            )

        # finally:
        #     print(">> Removing genome from memory", flush=True)
        #     unload_star_reference(par["reference_index"])

if __name__ == "__main__":
    main(par, meta)

VIASHMAIN
python "$tempscript"
'''

thisDefaultProcessArgs = [
  // key to be used to trace the process and determine output names
  key: thisConfig.functionality.name,
  // fixed arguments to be passed to script
  args: [:],
  // default directives
  directives: jsonSlurper.parseText('''{
  "container" : {
    "registry" : "ghcr.io",
    "image" : "openpipelines-bio/mapping/multi_star",
    "tag" : "main_build"
  },
  "label" : [
    "highmem",
    "highcpu"
  ],
  "tag" : "$id"
}'''),
  // auto settings
  auto: jsonSlurper.parseText('''{
  "simplifyInput" : true,
  "simplifyOutput" : true,
  "transcript" : false,
  "publish" : false
}'''),
  // apply a map over the incoming tuple
  // example: { tup -> [ tup[0], [input: tup[1].output], tup[2] ] }
  map: null,
  // apply a map over the ID element of a tuple (i.e. the first element)
  // example: { id -> id + "_foo" }
  mapId: null,
  // apply a map over the data element of a tuple (i.e. the second element)
  // example: { data -> [ input: data.output ] }
  mapData: null,
  // apply a map over the passthrough elements of a tuple (i.e. the tuple excl. the first two elements)
  // example: { pt -> pt.drop(1) }
  mapPassthrough: null,
  // filter the channel
  // example: { tup -> tup[0] == "foo" }
  filter: null,
  // rename keys in the data field of the tuple (i.e. the second element)
  // example: [ "new_key": "old_key" ]
  renameKeys: null,
  // whether or not to print debug messages
  debug: false
]

// END CUSTOM CODE

/////////////////////////////////////
// Viash Workflow helper functions //
/////////////////////////////////////

import java.util.regex.Pattern
import java.io.BufferedReader
import java.io.FileReader
import java.nio.file.Paths
import groovy.json.JsonSlurper
import groovy.text.SimpleTemplateEngine
import org.yaml.snakeyaml.Yaml

// param helpers //
def paramExists(name) {
  return params.containsKey(name) && params[name] != ""
}

def assertParamExists(name, description) {
  if (!paramExists(name)) {
    exit 1, "ERROR: Please provide a --${name} parameter ${description}"
  }
}

// helper functions for reading params from file //
def getChild(parent, child) {
  if (child.contains("://") || Paths.get(child).isAbsolute()) {
    child
  } else {
    def parentAbsolute = Paths.get(parent).toAbsolutePath().toString()
    parentAbsolute.replaceAll('/[^/]*$', "/") + child
  }
}

def readCsv(file) {
  def output = []
  def inputFile = file !instanceof File ? new File(file) : file

  // todo: allow escaped quotes in string
  // todo: allow single quotes?
  def splitRegex = Pattern.compile(''',(?=(?:[^"]*"[^"]*")*[^"]*$)''')
  def removeQuote = Pattern.compile('''"(.*)"''')

  def br = new BufferedReader(new FileReader(inputFile))

  def row = -1
  def header = null
  while (br.ready() && header == null) {
    def line = br.readLine()
    row++
    if (!line.startsWith("#")) {
      header = splitRegex.split(line, -1).collect{field ->
        m = removeQuote.matcher(field)
        m.find() ? m.replaceFirst('$1') : field
      }
    }
  }
  assert header != null: "CSV file should contain a header"

  while (br.ready()) {
    def line = br.readLine()
    row++
    if (!line.startsWith("#")) {
      def predata = splitRegex.split(line, -1)
      def data = predata.collect{field ->
        if (field == "") {
          return null
        }
        m = removeQuote.matcher(field)
        if (m.find()) {
          return m.replaceFirst('$1')
        } else {
          return field
        }
      }
      assert header.size() == data.size(): "Row $row should contain the same number as fields as the header"
      
      def dataMap = [header, data].transpose().collectEntries().findAll{it.value != null}
      output.add(dataMap)
    }
  }

  output
}

def readJsonBlob(str) {
  def jsonSlurper = new JsonSlurper()
  jsonSlurper.parseText(str)
}

def readJson(file) {
  def inputFile = file !instanceof File ? new File(file) : file
  def jsonSlurper = new JsonSlurper()
  jsonSlurper.parse(inputFile)
}

def readYamlBlob(str) {
  def yamlSlurper = new Yaml()
  yamlSlurper.load(str)
}

def readYaml(file) {
  def inputFile = file !instanceof File ? new File(file) : file
  def yamlSlurper = new Yaml()
  yamlSlurper.load(inputFile)
}

// helper functions for reading a viash config in groovy //

// based on how Functionality.scala is implemented
def processArgument(arg) {
  arg.multiple = arg.multiple != null ? arg.multiple : false
  arg.required = arg.required != null ? arg.required : false
  arg.direction = arg.direction != null ? arg.direction : "input"
  arg.multiple_sep = arg.multiple_sep != null ? arg.multiple_sep : ":"
  arg.plainName = arg.name.replaceAll("^-*", "")

  if (arg.type == "file") {
    arg.must_exist = arg.must_exist != null ? arg.must_exist : true
    arg.create_parent = arg.create_parent != null ? arg.create_parent : true
  }

  if (arg.type == "file" && arg.direction == "output") {
    def mult = arg.multiple ? "_*" : ""
    def extSearch = ""
    if (arg.default != null) {
      extSearch = arg.default
    } else if (arg.example != null) {
      extSearch = arg.example
    }
    if (extSearch instanceof List) {
      extSearch = extSearch[0]
    }
    def extSearchResult = extSearch.find("\\.[^\\.]+\$")
    def ext = extSearchResult != null ? extSearchResult : ""
    arg.default = "\$id.\$key.${arg.plainName}${mult}${ext}"
  }

  if (!arg.multiple) {
    if (arg.default != null && arg.default instanceof List) {
      arg.default = arg.default[0]
    }
    if (arg.example != null && arg.example instanceof List) {
      arg.example = arg.example[0]
    }
  }

  if (arg.type == "boolean_true") {
    arg.default = false
  }
  if (arg.type == "boolean_false") {
    arg.default = true
  }

  arg
}

// based on how Functionality.scala is implemented
def processArgumentGroup(argumentGroups, name, arguments) {
  def argNamesInGroups = argumentGroups.collectMany{it.arguments.findAll{it instanceof String}}.toSet()

  // Check if 'arguments' is in 'argumentGroups'. 
  def argumentsNotInGroup = arguments.findAll{arg -> !(argNamesInGroups.contains(arg.plainName))}

  // Check whether an argument group of 'name' exists.
  def existing = argumentGroups.find{gr -> name == gr.name}

  // if there are no arguments missing from the argument group, just return the existing group (if any)
  if (argumentsNotInGroup.isEmpty()) {
    return existing == null ? [] : [existing]
  
  // if there are missing arguments and there is an existing group, add the missing arguments to it
  } else if (existing != null) {
    def newEx = existing.clone()
    newEx.arguments.addAll(argumentsNotInGroup.findAll{it !instanceof String})
    return [newEx]

  // else create a new group
  } else {
    def newEx = [name: name, arguments: argumentsNotInGroup.findAll{it !instanceof String}]
    return [newEx]
  }
}

// based on how Functionality.scala is implemented
def processConfig(config) {
  // TODO: assert .functionality etc.
  if (config.functionality.inputs) {
    System.err.println("Warning: .functionality.inputs is deprecated. Please use .functionality.arguments instead.")
  }
  if (config.functionality.outputs) {
    System.err.println("Warning: .functionality.outputs is deprecated. Please use .functionality.arguments instead.")
  }

  // set defaults for inputs
  config.functionality.inputs = 
    (config.functionality.inputs != null ? config.functionality.inputs : []).collect{arg ->
      arg.type = arg.type != null ? arg.type : "file"
      arg.direction = "input"
      processArgument(arg)
    }
  // set defaults for outputs
  config.functionality.outputs = 
    (config.functionality.outputs != null ? config.functionality.outputs : []).collect{arg ->
      arg.type = arg.type != null ? arg.type : "file"
      arg.direction = "output"
      processArgument(arg)
    }
  // set defaults for arguments
  config.functionality.arguments = 
    (config.functionality.arguments != null ? config.functionality.arguments : []).collect{arg ->
      processArgument(arg)
    }
  // set defaults for argument_group arguments
  config.functionality.argument_groups =
    (config.functionality.argument_groups != null ? config.functionality.argument_groups : []).collect{grp ->
      grp.arguments = (grp.arguments != null ? grp.arguments : []).collect{arg ->
        arg instanceof String ? arg.replaceAll("^-*", "") : processArgument(arg)
      }
      grp
    }

  // create combined arguments list
  config.functionality.allArguments = 
    config.functionality.inputs +
    config.functionality.outputs +
    config.functionality.arguments +
    config.functionality.argument_groups.collectMany{ group ->
      group.arguments.findAll{ it !instanceof String }
    }
  
  // add missing argument groups (based on Functionality::allArgumentGroups())
  def argGroups = config.functionality.argument_groups
  def inputGroup = processArgumentGroup(argGroups, "Inputs", config.functionality.inputs)
  def outputGroup = processArgumentGroup(argGroups, "Outputs", config.functionality.outputs)
  def defaultGroup = processArgumentGroup(argGroups, "Arguments", config.functionality.arguments)
  def groupsFiltered = argGroups.findAll(gr -> !(["Inputs", "Outputs", "Arguments"].contains(gr.name)))
  config.functionality.allArgumentGroups = inputGroup + outputGroup + defaultGroup + groupsFiltered

  config
}

def readConfig(file) {
  def config = readYaml(file != null ? file : "$projectDir/config.vsh.yaml")
  processConfig(config)
}

// recursively merge two maps
def mergeMap(Map lhs, Map rhs) {
  return rhs.inject(lhs.clone()) { map, entry ->
    if (map[entry.key] instanceof Map && entry.value instanceof Map) {
      map[entry.key] = mergeMap(map[entry.key], entry.value)
    } else if (map[entry.key] instanceof Collection && entry.value instanceof Collection) {
      map[entry.key] += entry.value
    } else {
      map[entry.key] = entry.value
    }
    return map
  }
}

def addGlobalParams(config) {
  def localConfig = [
    "functionality" : [
      "argument_groups": [
        [
          "name": "Nextflow input-output arguments",
          "description": "Input/output parameters for Nextflow itself. Please note that both publishDir and publish_dir are supported but at least one has to be configured.",
          "arguments" : [
            [
              'name': '--publish_dir',
              'required': true,
              'type': 'string',
              'description': 'Path to an output directory.',
              'example': 'output/',
              'multiple': false
            ],
            [
              'name': '--param_list',
              'required': false,
              'type': 'string',
              'description': '''Allows inputting multiple parameter sets to initialise a Nextflow channel. A `param_list` can either be a list of maps, a csv file, a json file, a yaml file, or simply a yaml blob.
              |
              |* A list of maps (as-is) where the keys of each map corresponds to the arguments of the pipeline. Example: in a `nextflow.config` file: `param_list: [ ['id': 'foo', 'input': 'foo.txt'], ['id': 'bar', 'input': 'bar.txt'] ]`.
              |* A csv file should have column names which correspond to the different arguments of this pipeline. Example: `--param_list data.csv` with columns `id,input`.
              |* A json or a yaml file should be a list of maps, each of which has keys corresponding to the arguments of the pipeline. Example: `--param_list data.json` with contents `[ {'id': 'foo', 'input': 'foo.txt'}, {'id': 'bar', 'input': 'bar.txt'} ]`.
              |* A yaml blob can also be passed directly as a string. Example: `--param_list "[ {'id': 'foo', 'input': 'foo.txt'}, {'id': 'bar', 'input': 'bar.txt'} ]"`.
              |
              |When passing a csv, json or yaml file, relative path names are relativized to the location of the parameter file. No relativation is performed when `param_list` is a list of maps (as-is) or a yaml blob.'''.stripMargin(),
              'example': 'my_params.yaml',
              'multiple': false,
              'hidden': true
            ],
          ]
        ]
      ]
    ]
  ]

  return processConfig(mergeMap(config, localConfig))
}

// helper functions for generating help // 

// based on io.viash.helpers.Format.wordWrap
def formatWordWrap(str, maxLength) {
  def words = str.split("\\s").toList()

  def word = null
  def line = ""
  def lines = []
  while(!words.isEmpty()) {
    word = words.pop()
    if (line.length() + word.length() + 1 <= maxLength) {
      line = line + " " + word
    } else {
      lines.add(line)
      line = word
    }
    if (words.isEmpty()) {
      lines.add(line)
    }
  }
  return lines
}

// based on Format.paragraphWrap
def paragraphWrap(str, maxLength) {
  def outLines = []
  str.split("\n").each{par ->
    def words = par.split("\\s").toList()

    def word = null
    def line = words.pop()
    while(!words.isEmpty()) {
      word = words.pop()
      if (line.length() + word.length() + 1 <= maxLength) {
        line = line + " " + word
      } else {
        outLines.add(line)
        line = word
      }
    }
    if (words.isEmpty()) {
      outLines.add(line)
    }
  }
  return outLines
}

def generateArgumentHelp(param) {
  // alternatives are not supported
  // def names = param.alternatives ::: List(param.name)

  def unnamedProps = [
    ["required parameter", param.required],
    ["multiple values allowed", param.multiple],
    ["output", param.direction.toLowerCase() == "output"],
    ["file must exist", param.type == "file" && param.must_exist]
  ].findAll{it[1]}.collect{it[0]}
  
  def dflt = null
  if (param.default != null) {
    if (param.default instanceof List) {
      dflt = param.default.join(param.multiple_sep != null ? param.multiple_sep : ", ")
    } else {
      dflt = param.default.toString()
    }
  }
  def example = null
  if (param.example != null) {
    if (param.example instanceof List) {
      example = param.example.join(param.multiple_sep != null ? param.multiple_sep : ", ")
    } else {
      example = param.example.toString()
    }
  }
  def min = param.min?.toString()
  def max = param.max?.toString()

  def escapeChoice = { choice ->
    def s1 = choice.replaceAll("\\n", "\\\\n")
    def s2 = s1.replaceAll("\"", """\\\"""")
    s2.contains(",") || s2 != choice ? "\"" + s2 + "\"" : s2
  }
  def choices = param.choices == null ? 
    null : 
    "[ " + param.choices.collect{escapeChoice(it.toString())}.join(", ") + " ]"

  def namedPropsStr = [
    ["type", ([param.type] + unnamedProps).join(", ")],
    ["default", dflt],
    ["example", example],
    ["choices", choices],
    ["min", min],
    ["max", max]
  ]
    .findAll{it[1]}
    .collect{"\n        " + it[0] + ": " + it[1].replaceAll("\n", "\\n")}
    .join("")
  
  def descStr = param.description == null ?
    "" :
    paragraphWrap("\n" + param.description.trim(), 80 - 8).join("\n        ")
  
  "\n    --" + param.plainName +
    namedPropsStr +
    descStr
}

// Based on Helper.generateHelp() in Helper.scala
def generateHelp(config) {
  def fun = config.functionality

  // PART 1: NAME AND VERSION
  def nameStr = fun.name + 
    (fun.version == null ? "" : " " + fun.version)

  // PART 2: DESCRIPTION
  def descrStr = fun.description == null ? 
    "" :
    "\n\n" + paragraphWrap(fun.description.trim(), 80).join("\n")

  // PART 3: Usage
  def usageStr = fun.usage == null ? 
    "" :
    "\n\nUsage:\n" + fun.usage.trim()

  // PART 4: Options
  def argGroupStrs = fun.allArgumentGroups.collect{argGroup ->
    def name = argGroup.name
    def descriptionStr = argGroup.description == null ?
      "" :
      "\n    " + paragraphWrap(argGroup.description.trim(), 80-4).join("\n    ") + "\n"
    def arguments = argGroup.arguments.collect{arg -> 
      arg instanceof String ? fun.allArguments.find{it.plainName == arg} : arg
    }.findAll{it != null}
    def argumentStrs = arguments.collect{param -> generateArgumentHelp(param)}
    
    "\n\n$name:" +
      descriptionStr +
      argumentStrs.join("\n")
  }

  // FINAL: combine
  def out = nameStr + 
    descrStr +
    usageStr + 
    argGroupStrs.join("")

  return out
}

def helpMessage(config) {
  if (paramExists("help")) {
    def mergedConfig = addGlobalParams(config)
    def helpStr = generateHelp(mergedConfig)
    println(helpStr)
    exit 0
  }
}

def _guessParamListFormat(params) {
  if (!params.containsKey("param_list") || params.param_list == null) {
    "none"
  } else {
    def param_list = params.param_list

    if (param_list !instanceof String) {
      "asis"
    } else if (param_list.endsWith(".csv")) {
      "csv"
    } else if (param_list.endsWith(".json") || param_list.endsWith(".jsn")) {
      "json"
    } else if (param_list.endsWith(".yaml") || param_list.endsWith(".yml")) {
      "yaml"
    } else {
      "yaml_blob"
    }
  }
}

viashChannelDeprecationWarningPrinted = false

def paramsToList(params, config) {
  if (!viashChannelDeprecationWarningPrinted) {
    viashChannelDeprecationWarningPrinted = true
    System.err.println("Warning: paramsToList has deprecated in Viash 0.7.0. " +
                      "Please use a combination of channelFromParams and preprocessInputs.")
  }
  // fetch default params from functionality
  def defaultArgs = config.functionality.allArguments
    .findAll { it.containsKey("default") }
    .collectEntries { [ it.plainName, it.default ] }

  // fetch overrides in params
  def paramArgs = config.functionality.allArguments
    .findAll { params.containsKey(it.plainName) }
    .collectEntries { [ it.plainName, params[it.plainName] ] }
  
  // check multi input params
  // objects should be closures and not functions, thanks to FunctionDef
  def multiParamFormat = _guessParamListFormat(params)

  def multiOptionFunctions = [ 
    "csv": {[it, readCsv(it)]},
    "json": {[it, readJson(it)]},
    "yaml": {[it, readYaml(it)]},
    "yaml_blob": {[null, readYamlBlob(it)]},
    "asis": {[null, it]},
    "none": {[null, [[:]]]}
  ]
  assert multiOptionFunctions.containsKey(multiParamFormat): 
    "Format of provided --param_list not recognised.\n" +
    "You can use '--param_list_format' to manually specify the format.\n" +
    "Found: '$multiParamFormat'. Expected: one of 'csv', 'json', 'yaml', 'yaml_blob', 'asis' or 'none'"

  // fetch multi param inputs
  def multiOptionFun = multiOptionFunctions.get(multiParamFormat)
  // todo: add try catch
  def multiOptionOut = multiOptionFun(params.containsKey("param_list") ? params.param_list : "")
  def paramList = multiOptionOut[1]
  def multiFile = multiOptionOut[0]

  // data checks
  assert paramList instanceof List: "--param_list should contain a list of maps"
  for (value in paramList) {
    assert value instanceof Map: "--param_list should contain a list of maps"
  }
  
  // combine parameters
  def processedParams = paramList.collect{ multiParam ->
    // combine params
    def combinedArgs = defaultArgs + paramArgs + multiParam

    if (workflow.stubRun) {
      // if stub run, explicitly add an id if missing
      combinedArgs = [id: "stub"] + combinedArgs
    } else {
      // else check whether required arguments exist
      config.functionality.allArguments
        .findAll { it.required }
        .forEach { par ->
          assert combinedArgs.containsKey(par.plainName): "Argument ${par.plainName} is required but does not have a value"
        }
    }
    
    // process arguments
    def inputs = config.functionality.allArguments
      .findAll{ par -> combinedArgs.containsKey(par.plainName) }
      .collectEntries { par ->
        // split on 'multiple_sep'
        if (par.multiple) {
          parData = combinedArgs[par.plainName]
          if (parData instanceof List) {
            parData = parData.collect{it instanceof String ? it.split(par.multiple_sep) : it }
          } else if (parData instanceof String) {
            parData = parData.split(par.multiple_sep)
          } else if (parData == null) {
            parData = []
          } else {
            parData = [ parData ]
          }
        } else {
          parData = [ combinedArgs[par.plainName] ]
        }

        // flatten
        parData = parData.flatten()

        // cast types
        if (par.type == "file" && ((par.direction != null ? par.direction : "input") == "input")) {
          parData = parData.collect{path ->
            if (path !instanceof String) {
              path
            } else if (multiFile) {
              file(getChild(multiFile, path))
            } else {
              file(path)
            }
          }.flatten()
        } else if (par.type == "integer") {
          parData = parData.collect{it as Integer}
        } else if (par.type == "double") {
          parData = parData.collect{it as Double}
        } else if (par.type == "boolean" || par.type == "boolean_true" || par.type == "boolean_false") {
          parData = parData.collect{it as Boolean}
        }
        // simplify list to value if need be
        if (!par.multiple) {
          assert parData.size() == 1 : 
            "Error: argument ${par.plainName} has too many values.\n" +
            "  Expected amount: 1. Found: ${parData.size()}"
          parData = parData[0]
        }

        // return pair
        [ par.plainName, parData ]
      }
      // remove parameters which were explicitly set to null
      .findAll{ par -> par != null }
    }
    
  
  // check processed params
  processedParams.forEach { args ->
    assert args.containsKey("id"): "Each argument set should have an 'id'. Argument set: $args"
  }
  def ppIds = processedParams.collect{it.id}
  assert ppIds.size() == ppIds.unique().size() : "All argument sets should have unique ids. Detected ids: $ppIds"

  processedParams
}

def paramsToChannel(params, config) {
  if (!viashChannelDeprecationWarningPrinted) {
    viashChannelDeprecationWarningPrinted = true
    System.err.println("Warning: paramsToChannel has deprecated in Viash 0.7.0. " +
                      "Please use a combination of channelFromParams and preprocessInputs.")
  }
  Channel.fromList(paramsToList(params, config))
}

def viashChannel(params, config) {
  if (!viashChannelDeprecationWarningPrinted) {
    viashChannelDeprecationWarningPrinted = true
    System.err.println("Warning: viashChannel has deprecated in Viash 0.7.0. " +
                      "Please use a combination of channelFromParams and preprocessInputs.")
  }
  paramsToChannel(params, config)
    | map{tup -> [tup.id, tup]}
}

/**
 * Split parameters for arguments that accept multiple values using their separator
 *
 * @param paramList A Map containing parameters to split.
 * @param config A Map of the Viash configuration. This Map can be generated from the config file
 *               using the readConfig() function.
 *
 * @return A Map of parameters where the parameter values have been split into a list using
 *         their seperator.
 */
Map<String, Object> _splitParams(Map<String, Object> parValues, Map config){
  def parsedParamValues = parValues.collectEntries { parName, parValue ->
    def parameterSettings = config.functionality.allArguments.find({it.plainName == parName})

    if (!parameterSettings) {
      // if argument is not found, do not alter 
      return [parName, parValue]
    }
    if (parameterSettings.multiple) { // Check if parameter can accept multiple values
      if (parValue instanceof Collection) {
          parValue = parValue.collect{it instanceof String ? it.split(parameterSettings.multiple_sep) : it }
      } else if (parValue instanceof String) {
          parValue = parValue.split(parameterSettings.multiple_sep)
      } else if (parValue == null) {
          parValue = []
      } else {
          parValue = [ parValue ]
      }
      parValue = parValue.flatten()
    }
    // For all parameters check if multiple values are only passed for
    // arguments that allow it. Quietly simplify lists of length 1.
    if (!parameterSettings.multiple && parValue instanceof Collection) {
      assert parValue.size() == 1 : 
      "Error: argument ${parName} has too many values.\n" +
      "  Expected amount: 1. Found: ${parValue.size()}"
      parValue = parValue[0]
    }
    [parName, parValue]
  }
  return parsedParamValues
}

/**
 * Check if the ids are unique across parameter sets
 *
 * @param parameterSets a list of parameter sets.
 */
private void _checkUniqueIds(List<Tuple2<String, Map<String, Object>>> parameterSets) {
  def ppIds = parameterSets.collect{it[0]}
  assert ppIds.size() == ppIds.unique().size() : "All argument sets should have unique ids. Detected ids: $ppIds"
}

/**
 * Resolve the file paths in the parameters relative to given path
 *
 * @param paramList A Map containing parameters to process.
 *                  This function assumes that files are still of type String.
 * @param config A Map of the Viash configuration. This Map can be generated from the config file
 *               using the readConfig() function.
 * @param relativeTo path of a file to resolve the parameters values to.
 *
 * @return A map of parameters where the location of the input file parameters have been resolved
 *         resolved relatively to the provided path.
 */
private Map<String, Object> _resolvePathsRelativeTo(Map paramList, Map config, String relativeTo) {
  paramList.collectEntries { parName, parValue ->
    argSettings = config.functionality.allArguments.find{it.plainName == parName}
    if (argSettings && argSettings.type == "file" && argSettings.direction == "input") {
      if (parValue instanceof Collection) {
        parValue = parValue.collect({path -> 
          path !instanceof String ? path : file(getChild(relativeTo, path))
        })
      } else {
        parValue = parValue !instanceof String ? path : file(getChild(relativeTo, parValue))
      }
    }
    [parName, parValue]
  }
}

/**
 * Parse nextflow parameters based on settings defined in a viash config 
 * and return a nextflow channel.
 *
 * @param params Input parameters from nextflow.
 * @param config A Map of the Viash configuration. This Map can be generated from the config file
 *               using the readConfig() function.
 *
 * @return A list of parameter sets that were parsed from the 'param_list' argument value.
 */
private List<Tuple2<String, Map>> _parseParamListArguments(Map params, Map config){
  // first try to guess the format (if not set in params)
  def paramListFormat = _guessParamListFormat(params)

  // get the correct parser function for the detected params_list format
  def paramListParsers = [ 
    "csv": {[it, readCsv(it)]},
    "json": {[it, readJson(it)]},
    "yaml": {[it, readYaml(it)]},
    "yaml_blob": {[null, readYamlBlob(it)]},
    "asis": {[null, it]},
    "none": {[null, [[:]]]}
  ]
  assert paramListParsers.containsKey(paramListFormat):
    "Format of provided --param_list not recognised.\n" +
    "You can use '--param_list_format' to manually specify the format.\n" +
    "Found: '$paramListFormat'. Expected: one of 'csv', 'json', "+
    "'yaml', 'yaml_blob', 'asis' or 'none'"
  def paramListParser = paramListParsers.get(paramListFormat)

  // fetch multi param inputs
  def paramListOut = paramListParser(params.containsKey("param_list") ? params.param_list : "")
  // multiFile is null if the value passed to param_list was not a file (e.g a blob)
  // If the value was indeed a file, multiFile contains the location that file (used later).
  def paramListFile = paramListOut[0]
  def paramSets = paramListOut[1] // these are the actual parameters from reading the blob/file

  // data checks
  assert paramSets instanceof List: "--param_list should contain a list of maps"
  for (value in paramSets) {
    assert value instanceof Map: "--param_list should contain a list of maps"
  }

  // Reformat from List<Map> to List<Tuple2<String, Map>> by adding the ID as first element of a Tuple2
  paramSets = paramSets.collect({ paramValues ->
    [paramValues.get("id", null), paramValues.findAll{it.key != 'id'}]
  })
  // Split parameters with 'multiple: true'
  paramSets = paramSets.collect({ id, paramValues ->
    def splitParamValues = _splitParams(paramValues, config)
    [id, splitParamValues]
  })
  
  // The paths of input files inside a param_list file may have been specified relatively to the
  // location of the param_list file. These paths must be made absolute.
  if (paramListFile){
    paramSets = paramSets.collect({ id, paramValues ->
      def relativeParamValues = _resolvePathsRelativeTo(paramValues, config, paramListFile)
      [id, relativeParamValues]
    })
  }

  return paramSets
}

/**
 * Cast parameters to the correct type as defined in the Viash config
 *
 * @param parValues A Map of input arguments.
 *
 * @return The input arguments that have been cast to the type from the viash config.
 */

private Map<String, Object> _castParamTypes(Map<String, Object> parValues, Map config) {
  // Cast the input to the correct type according to viash config
  def castParValues = parValues.collectEntries({ parName, parValue ->
    paramSettings = config.functionality.allArguments.find({it.plainName == parName})
    // dont parse parameters like publish_dir ( in which case paramSettings = null)
    parType = paramSettings ? paramSettings.get("type", null) : null
    if (parValue !instanceof Collection) {
      parValue = [parValue]
    }
    if (parType == "file" && ((paramSettings.direction != null ? paramSettings.direction : "input") == "input")) {
      parValue = parValue.collect{ path ->
        if (path !instanceof String) {
          path
        } else {
          file(path)
        }
      }
    } else if (parType == "integer") {
      parValue = parValue.collect{it as Integer}
    } else if (parType == "double") {
      parValue = parValue.collect{it as Double}
    } else if (parType == "boolean" || 
                parType == "boolean_true" || 
                parType == "boolean_false") {
      parValue = parValue.collect{it as Boolean}
    }

    // simplify list to value if need be
    if (paramSettings && !paramSettings.multiple) {
      assert parValue.size() == 1 : 
        "Error: argument ${parName} has too many values.\n" +
        "  Expected amount: 1. Found: ${parValue.size()}"
      parValue = parValue[0]
    }
    [parName, parValue]
  })
  return castParValues
}

/**
 * Apply the argument settings specified in a Viash config to a single parameter set.
 *    - Split the parameter values according to their seperator if 
 *       the parameter accepts multiple values
 *    - Cast the parameters to their corect types.
 *    - Assertions:
 *        ~ Check if any unknown parameters are found
 * 
 * @param paramValues A Map of parameter to be processed. All parameters must 
 *                    also be specified in the Viash config.
 * @param config: A Map of the Viash configuration. This Map can be generated from 
 *                the config file using the readConfig() function.
 * @return The input parameters that have been processed.
 */
Map<String, Object> applyConfigToOneParameterSet(Map<String, Object> paramValues, Map config){
  def splitParamValues = _splitParams(paramValues, config)
  def castParamValues = _castParamTypes(splitParamValues, config)

  // Check if any unexpected arguments were passed
  def knownParams = config.functionality.allArguments.collect({it.plainName}) + ["publishDir", "publish_dir"]
  castParamValues.each({parName, parValue ->
      assert parName in knownParams: "Unknown parameter. Parameter $parName should be in $knownParams"
  })
  return castParamValues
}

/**
 * Apply the argument settings specified in a Viash config to a list of parameter sets.
 *    - Split the parameter values according to their seperator if 
 *       the parameter accepts multiple values
 *    - Cast the parameters to their corect types.
 *    - Assertions:
 *        ~ Check if any unknown parameters are found
 *        ~ Check if the ID of the parameter set is unique across all sets.
 * 
 * @return The input parameters that have been processed.
 */

List<Tuple> applyConfig(List<Tuple> parameterSets, Map config){
  def processedparameterSets = parameterSets.collect({ parameterSet ->
    def id = parameterSet[0]
    def paramValues = parameterSet[1]
    def passthrough = parameterSet.drop(2)
    def processedSet = applyConfigToOneParameterSet(paramValues, config)
    [id, processedSet] + passthrough
  })

  _checkUniqueIds(processedparameterSets)
  return processedparameterSets
}

/**
 * Parse nextflow parameters based on settings defined in a viash config.
 * Return a list of parameter sets, each parameter set corresponding to 
 * an event in a nextflow channel. The output from this function can be used
 * with Channel.fromList to create a nextflow channel with Vdsl3 formatted 
 * events.
 *
 * This function performs:
 *   - A filtering of the params which can be found in the config file.
 *   - Process the params_list argument which allows a user to to initialise 
 *     a Vsdl3 channel with multiple parameter sets. Possible formats are 
 *     csv, json, yaml, or simply a yaml_blob. A csv should have column names 
 *     which correspond to the different arguments of this pipeline. A json or a yaml
 *     file should be a list of maps, each of which has keys corresponding to the
 *     arguments of the pipeline. A yaml blob can also be passed directly as a parameter.
 *     When passing a csv, json or yaml, relative path names are relativized to the
 *     location of the parameter file.
 *   - Combine the parameter sets into a vdsl3 Channel.
 *
 * @param params Input parameters. Can optionaly contain a 'param_list' key that
 *               provides a list of arguments that can be split up into multiple events
 *               in the output channel possible formats of param_lists are: a csv file, 
 *               json file, a yaml file or a yaml blob. Each parameters set (event) must
 *               have a unique ID.
 * @param config A Map of the Viash configuration. This Map can be generated from the config file
 *               using the readConfig() function.
 * 
 * @return A list of parameters with the first element of the event being
 *         the event ID and the second element containing a map of the parsed parameters.
 */
 
private List<Tuple2<String, Map<String, Object>>> _paramsToParamSets(Map params, Map config){
  /* parse regular parameters (not in param_list)  */
  /*************************************************/
  def globalParams = config.functionality.allArguments
    .findAll { params.containsKey(it.plainName) }
    .collectEntries { [ it.plainName, params[it.plainName] ] }
  def globalID = params.get("id", null)
  def globalParamsValues = applyConfigToOneParameterSet(globalParams.findAll{it.key != 'id'}, config)

  /* process params_list arguments */
  /*********************************/
  def paramSets = _parseParamListArguments(params, config)
  def parameterSetsWithConfigApplied = applyConfig(paramSets, config)

  /* combine arguments into channel */
  /**********************************/
  def processedParams = parameterSetsWithConfigApplied.indexed().collect{ index, paramSet ->
    def id = paramSet[0]
    def parValues = paramSet[1]
    id = [id, globalID].find({it != null}) // first non-null element
  
    if (workflow.stubRun) {
      // if stub run, explicitly add an id if missing
      id = id ? id : "stub" + index
    }
    assert id != null: "Each parameter set should have at least an ID."
    // Add regular parameters together with parameters passed with 'param_list'
    def combinedArgsValues = globalParamsValues + parValues

    // Remove parameters which are null, if the default is also null
    combinedArgsValues = combinedArgsValues.collectEntries{paramName, paramValue ->
      parameterSettings = config.functionality.allArguments.find({it.plainName == paramName})
      if ( paramValue != null || parameterSettings.get("default", null) != null ) {
        [paramName, paramValue]
      }
    }
    [id, combinedArgsValues]
  }

  // Check if ids (first element of each list) is unique
  _checkUniqueIds(processedParams)
  return processedParams
}

/**
 * Parse nextflow parameters based on settings defined in a viash config 
 * and return a nextflow channel.
 * 
 * @param params Input parameters. Can optionaly contain a 'param_list' key that
 *               provides a list of arguments that can be split up into multiple events
 *               in the output channel possible formats of param_lists are: a csv file, 
 *               json file, a yaml file or a yaml blob. Each parameters set (event) must
 *               have a unique ID.
 * @param config A Map of the Viash configuration. This Map can be generated from the config file
 *               using the readConfig() function.
 * 
 * @return A nextflow Channel with events. Events are formatted as a tuple that contains 
 *         first contains the ID of the event and as second element holds a parameter map.
 *       
 *
 */
def channelFromParams(Map params, Map config) {
  processedParams = _paramsToParamSets(params, config)
  return Channel.fromList(processedParams)
}

/**
 * Process a list of Vdsl3 formatted parameters and apply a Viash config to them:
 *    - Gather default parameters from the Viash config and make 
 *      sure that they are correctly formatted (see applyConfig method).
 *    - Format the input parameters (also using the applyConfig method).
 *    - Apply the default parameter to the input parameters.
 *    - Do some assertions:
 *        ~ Check if the event IDs in the channel are unique.
 *  
 * @param params A list of parameter sets as Tuples. The first element of the tuples
 *                must be a unique id of the parameter set, and the second element 
 *                must contain the parameters themselves. Optional extra elements 
 *                of the tuples will be passed to the output as is.
 * @param config A Map of the Viash configuration. This Map can be generated from 
 *                the config file using the readConfig() function.           
 *
 * @return A list of processed parameters sets as tuples.
 */

private List<Tuple> _preprocessInputsList(List<Tuple> params, Map config) {
  // Get different parameter types (used throughout this function)
  def defaultArgs = config.functionality.allArguments
    .findAll { it.containsKey("default") }
    .collectEntries { [ it.plainName, it.default ] }

  // Apply config to default parameters
  def parsedDefaultValues = applyConfigToOneParameterSet(defaultArgs, config)

  // Apply config to input parameters
  def parsedInputParamSets = applyConfig(params, config)

  // Merge two parameter sets together
  def parsedArgs = parsedInputParamSets.collect({ parsedInputParamSet ->
    def id = parsedInputParamSet[0]
    def parValues = parsedInputParamSet[1]
    def passthrough = parsedInputParamSet.drop(2)
    def parValuesWithDefault = parsedDefaultValues + parValues
    [id, parValuesWithDefault] + passthrough
  })
  _checkUniqueIds(parsedArgs)

  return parsedArgs
}

/**
 * Generate a nextflow Workflow that allows processing a channel of 
 * Vdsl3 formatted events and apply a Viash config to them:
 *    - Gather default parameters from the Viash config and make 
 *      sure that they are correctly formatted (see applyConfig method).
 *    - Format the input parameters (also using the applyConfig method).
 *    - Apply the default parameter to the input parameters.
 *    - Do some assertions:
 *        ~ Check if the event IDs in the channel are unique.
 * 
 * The events in the channel are formatted as tuples, with the 
 * first element of the tuples being a unique id of the parameter set, 
 * and the second element containg the the parameters themselves.
 * Optional extra elements of the tuples will be passed to the output as is.
 *
 * @param args A map that must contain a 'config' key that points
 *              to a parsed config (see readConfig()). Optionally, a
 *              'key' key can be provided which can be used to create a unique
 *              name for the workflow process.
 *
 * @return A workflow that allows processing a channel of Vdsl3 formatted events
 * and apply a Viash config to them.
 */
def preprocessInputs(Map args) {
  wfKey = args.key != null ? args.key : "preprocessInputs"
  config = args.config
  workflow preprocessInputsInstance {
    take: 
    input_ch

    main:
    assert config instanceof Map : 
      "Error in preprocessInputs: config must be a map. " +
      "Expected class: Map. Found: config.getClass() is ${config.getClass()}"

    output_ch = input_ch
      | toSortedList
      | map { paramList -> _preprocessInputsList(paramList, config) }
      | flatMap
    emit:
    output_ch
  }

  return preprocessInputsInstance.cloneWithName(wfKey)
}

////////////////////////////
// VDSL3 helper functions //
////////////////////////////

import nextflow.Nextflow
import nextflow.script.IncludeDef
import nextflow.script.ScriptBinding
import nextflow.script.ScriptMeta
import nextflow.script.ScriptParser

// retrieve resourcesDir here to make sure the correct path is found
resourcesDir = ScriptMeta.current().getScriptPath().getParent()

def assertMapKeys(map, expectedKeys, requiredKeys, mapName) {
  assert map instanceof Map : "Expected argument '$mapName' to be a Map. Found: class ${map.getClass()}"
  map.forEach { key, val -> 
    assert key in expectedKeys : "Unexpected key '$key' in ${mapName ? mapName + " " : ""}map"
  }
  requiredKeys.forEach { requiredKey -> 
    assert map.containsKey(requiredKey) : "Missing required key '$key' in ${mapName ? mapName + " " : ""}map"
  }
}

// TODO: unit test processDirectives
def processDirectives(Map drctv) {
  // remove null values
  drctv = drctv.findAll{k, v -> v != null}

  /* DIRECTIVE accelerator
    accepted examples:
    - [ limit: 4, type: "nvidia-tesla-k80" ]
  */
  if (drctv.containsKey("accelerator")) {
    assertMapKeys(drctv["accelerator"], ["type", "limit", "request", "runtime"], [], "accelerator")
  }

  /* DIRECTIVE afterScript
    accepted examples:
    - "source /cluster/bin/cleanup"
  */
  if (drctv.containsKey("afterScript")) {
    assert drctv["afterScript"] instanceof CharSequence
  }

  /* DIRECTIVE beforeScript
    accepted examples:
    - "source /cluster/bin/setup"
  */
  if (drctv.containsKey("beforeScript")) {
    assert drctv["beforeScript"] instanceof CharSequence
  }

  /* DIRECTIVE cache
    accepted examples:
    - true
    - false
    - "deep"
    - "lenient"
  */
  if (drctv.containsKey("cache")) {
    assert drctv["cache"] instanceof CharSequence || drctv["cache"] instanceof Boolean
    if (drctv["cache"] instanceof CharSequence) {
      assert drctv["cache"] in ["deep", "lenient"] : "Unexpected value for cache"
    }
  }

  /* DIRECTIVE conda
    accepted examples:
    - "bwa=0.7.15"
    - "bwa=0.7.15 fastqc=0.11.5"
    - ["bwa=0.7.15", "fastqc=0.11.5"]
  */
  if (drctv.containsKey("conda")) {
    if (drctv["conda"] instanceof List) {
      drctv["conda"] = drctv["conda"].join(" ")
    }
    assert drctv["conda"] instanceof CharSequence
  }

  /* DIRECTIVE container
    accepted examples:
    - "foo/bar:tag"
    - [ registry: "reg", image: "im", tag: "ta" ]
      is transformed to "reg/im:ta"
    - [ image: "im" ] 
      is transformed to "im:latest"
  */
  if (drctv.containsKey("container")) {
    assert drctv["container"] instanceof Map || drctv["container"] instanceof CharSequence
    if (drctv["container"] instanceof Map) {
      def m = drctv["container"]
      assertMapKeys(m, [ "registry", "image", "tag" ], ["image"], "container")
      def part1 = 
        System.getenv('OVERRIDE_CONTAINER_REGISTRY') ? System.getenv('OVERRIDE_CONTAINER_REGISTRY') + "/" : 
        params.containsKey("override_container_registry") ? params["override_container_registry"] + "/" : // todo: remove?
        m.registry ? m.registry + "/" : 
        ""
      def part2 = m.image
      def part3 = m.tag ? ":" + m.tag : ":latest"
      drctv["container"] = part1 + part2 + part3
    }
  }

  /* DIRECTIVE containerOptions
    accepted examples:
    - "--foo bar"
    - ["--foo bar", "-f b"]
  */
  if (drctv.containsKey("containerOptions")) {
    if (drctv["containerOptions"] instanceof List) {
      drctv["containerOptions"] = drctv["containerOptions"].join(" ")
    }
    assert drctv["containerOptions"] instanceof CharSequence
  }

  /* DIRECTIVE cpus
    accepted examples:
    - 1
    - 10
  */
  if (drctv.containsKey("cpus")) {
    assert drctv["cpus"] instanceof Integer
  }

  /* DIRECTIVE disk
    accepted examples:
    - "1 GB"
    - "2TB"
    - "3.2KB"
    - "10.B"
  */
  if (drctv.containsKey("disk")) {
    assert drctv["disk"] instanceof CharSequence
    // assert drctv["disk"].matches("[0-9]+(\\.[0-9]*)? *[KMGTPEZY]?B")
    // ^ does not allow closures
  }

  /* DIRECTIVE echo
    accepted examples:
    - true
    - false
  */
  if (drctv.containsKey("echo")) {
    assert drctv["echo"] instanceof Boolean
  }

  /* DIRECTIVE errorStrategy
    accepted examples:
    - "terminate"
    - "finish"
  */
  if (drctv.containsKey("errorStrategy")) {
    assert drctv["errorStrategy"] instanceof CharSequence
    assert drctv["errorStrategy"] in ["terminate", "finish", "ignore", "retry"] : "Unexpected value for errorStrategy"
  }

  /* DIRECTIVE executor
    accepted examples:
    - "local"
    - "sge"
  */
  if (drctv.containsKey("executor")) {
    assert drctv["executor"] instanceof CharSequence
    assert drctv["executor"] in ["local", "sge", "uge", "lsf", "slurm", "pbs", "pbspro", "moab", "condor", "nqsii", "ignite", "k8s", "awsbatch", "google-pipelines"] : "Unexpected value for executor"
  }

  /* DIRECTIVE machineType
    accepted examples:
    - "n1-highmem-8"
  */
  if (drctv.containsKey("machineType")) {
    assert drctv["machineType"] instanceof CharSequence
  }

  /* DIRECTIVE maxErrors
    accepted examples:
    - 1
    - 3
  */
  if (drctv.containsKey("maxErrors")) {
    assert drctv["maxErrors"] instanceof Integer
  }

  /* DIRECTIVE maxForks
    accepted examples:
    - 1
    - 3
  */
  if (drctv.containsKey("maxForks")) {
    assert drctv["maxForks"] instanceof Integer
  }

  /* DIRECTIVE maxRetries
    accepted examples:
    - 1
    - 3
  */
  if (drctv.containsKey("maxRetries")) {
    assert drctv["maxRetries"] instanceof Integer
  }

  /* DIRECTIVE memory
    accepted examples:
    - "1 GB"
    - "2TB"
    - "3.2KB"
    - "10.B"
  */
  if (drctv.containsKey("memory")) {
    assert drctv["memory"] instanceof CharSequence
    // assert drctv["memory"].matches("[0-9]+(\\.[0-9]*)? *[KMGTPEZY]?B")
    // ^ does not allow closures
  }

  /* DIRECTIVE module
    accepted examples:
    - "ncbi-blast/2.2.27"
    - "ncbi-blast/2.2.27:t_coffee/10.0"
    - ["ncbi-blast/2.2.27", "t_coffee/10.0"]
  */
  if (drctv.containsKey("module")) {
    if (drctv["module"] instanceof List) {
      drctv["module"] = drctv["module"].join(":")
    }
    assert drctv["module"] instanceof CharSequence
  }

  /* DIRECTIVE penv
    accepted examples:
    - "smp"
  */
  if (drctv.containsKey("penv")) {
    assert drctv["penv"] instanceof CharSequence
  }

  /* DIRECTIVE pod
    accepted examples:
    - [ label: "key", value: "val" ]
    - [ annotation: "key", value: "val" ]
    - [ env: "key", value: "val" ]
    - [ [label: "l", value: "v"], [env: "e", value: "v"]]
  */
  if (drctv.containsKey("pod")) {
    if (drctv["pod"] instanceof Map) {
      drctv["pod"] = [ drctv["pod"] ]
    }
    assert drctv["pod"] instanceof List
    drctv["pod"].forEach { pod ->
      assert pod instanceof Map
      // TODO: should more checks be added?
      // See https://www.nextflow.io/docs/latest/process.html?highlight=directives#pod
      // e.g. does it contain 'label' and 'value', or 'annotation' and 'value', or ...?
    }
  }

  /* DIRECTIVE publishDir
    accepted examples:
    - []
    - [ [ path: "foo", enabled: true ], [ path: "bar", enabled: false ] ]
    - "/path/to/dir" 
      is transformed to [[ path: "/path/to/dir" ]]
    - [ path: "/path/to/dir", mode: "cache" ]
      is transformed to [[ path: "/path/to/dir", mode: "cache" ]]
  */
  // TODO: should we also look at params["publishDir"]?
  if (drctv.containsKey("publishDir")) {
    def pblsh = drctv["publishDir"]
    
    // check different options
    assert pblsh instanceof List || pblsh instanceof Map || pblsh instanceof CharSequence
    
    // turn into list if not already so
    // for some reason, 'if (!pblsh instanceof List) pblsh = [ pblsh ]' doesn't work.
    pblsh = pblsh instanceof List ? pblsh : [ pblsh ]

    // check elements of publishDir
    pblsh = pblsh.collect{ elem ->
      // turn into map if not already so
      elem = elem instanceof CharSequence ? [ path: elem ] : elem

      // check types and keys
      assert elem instanceof Map : "Expected publish argument '$elem' to be a String or a Map. Found: class ${elem.getClass()}"
      assertMapKeys(elem, [ "path", "mode", "overwrite", "pattern", "saveAs", "enabled" ], ["path"], "publishDir")

      // check elements in map
      assert elem.containsKey("path")
      assert elem["path"] instanceof CharSequence
      if (elem.containsKey("mode")) {
        assert elem["mode"] instanceof CharSequence
        assert elem["mode"] in [ "symlink", "rellink", "link", "copy", "copyNoFollow", "move" ]
      }
      if (elem.containsKey("overwrite")) {
        assert elem["overwrite"] instanceof Boolean
      }
      if (elem.containsKey("pattern")) {
        assert elem["pattern"] instanceof CharSequence
      }
      if (elem.containsKey("saveAs")) {
        assert elem["saveAs"] instanceof CharSequence //: "saveAs as a Closure is currently not supported. Surround your closure with single quotes to get the desired effect. Example: '\{ foo \}'"
      }
      if (elem.containsKey("enabled")) {
        assert elem["enabled"] instanceof Boolean
      }

      // return final result
      elem
    }
    // store final directive
    drctv["publishDir"] = pblsh
  }

  /* DIRECTIVE queue
    accepted examples:
    - "long"
    - "short,long"
    - ["short", "long"]
  */
  if (drctv.containsKey("queue")) {
    if (drctv["queue"] instanceof List) {
      drctv["queue"] = drctv["queue"].join(",")
    }
    assert drctv["queue"] instanceof CharSequence
  }

  /* DIRECTIVE label
    accepted examples:
    - "big_mem"
    - "big_cpu"
    - ["big_mem", "big_cpu"]
  */
  if (drctv.containsKey("label")) {
    if (drctv["label"] instanceof CharSequence) {
      drctv["label"] = [ drctv["label"] ]
    }
    assert drctv["label"] instanceof List
    drctv["label"].forEach { label ->
      assert label instanceof CharSequence
      // assert label.matches("[a-zA-Z0-9]([a-zA-Z0-9_]*[a-zA-Z0-9])?")
      // ^ does not allow closures
    }
  }

  /* DIRECTIVE scratch
    accepted examples:
    - true
    - "/path/to/scratch"
    - '$MY_PATH_TO_SCRATCH'
    - "ram-disk"
  */
  if (drctv.containsKey("scratch")) {
    assert drctv["scratch"] == true || drctv["scratch"] instanceof CharSequence
  }

  /* DIRECTIVE storeDir
    accepted examples:
    - "/path/to/storeDir"
  */
  if (drctv.containsKey("storeDir")) {
    assert drctv["storeDir"] instanceof CharSequence
  }

  /* DIRECTIVE stageInMode
    accepted examples:
    - "copy"
    - "link"
  */
  if (drctv.containsKey("stageInMode")) {
    assert drctv["stageInMode"] instanceof CharSequence
    assert drctv["stageInMode"] in ["copy", "link", "symlink", "rellink"]
  }

  /* DIRECTIVE stageOutMode
    accepted examples:
    - "copy"
    - "link"
  */
  if (drctv.containsKey("stageOutMode")) {
    assert drctv["stageOutMode"] instanceof CharSequence
    assert drctv["stageOutMode"] in ["copy", "move", "rsync"]
  }

  /* DIRECTIVE tag
    accepted examples:
    - "foo"
    - '$id'
  */
  if (drctv.containsKey("tag")) {
    assert drctv["tag"] instanceof CharSequence
  }

  /* DIRECTIVE time
    accepted examples:
    - "1h"
    - "2days"
    - "1day 6hours 3minutes 30seconds"
  */
  if (drctv.containsKey("time")) {
    assert drctv["time"] instanceof CharSequence
    // todo: validation regex?
  }

  return drctv
}

// TODO: unit test processAuto
def processAuto(Map auto) {
  // remove null values
  auto = auto.findAll{k, v -> v != null}

  expectedKeys = ["simplifyInput", "simplifyOutput", "transcript", "publish"]

  // check whether expected keys are all booleans (for now)
  for (key in expectedKeys) {
    assert auto.containsKey(key)
    assert auto[key] instanceof Boolean
  }

  return auto.subMap(expectedKeys)
}

def processProcessArgs(Map args) {
  // override defaults with args
  def processArgs = thisDefaultProcessArgs + args

  // check whether 'key' exists
  assert processArgs.containsKey("key")

  // if 'key' is a closure, apply it to the original key
  if (processArgs["key"] instanceof Closure) {
    processArgs["key"] = processArgs["key"](thisConfig.functionality.name)
  }
  assert processArgs["key"] instanceof CharSequence
  assert processArgs["key"] ==~ /^[a-zA-Z_][a-zA-Z0-9_]*$/

  // check whether directives exists and apply defaults
  assert processArgs.containsKey("directives")
  assert processArgs["directives"] instanceof Map
  processArgs["directives"] = processDirectives(thisDefaultProcessArgs.directives + processArgs["directives"])

  // check whether directives exists and apply defaults
  assert processArgs.containsKey("auto")
  assert processArgs["auto"] instanceof Map
  processArgs["auto"] = processAuto(thisDefaultProcessArgs.auto + processArgs["auto"])

  // auto define publish, if so desired
  if (processArgs.auto.publish == true && (processArgs.directives.publishDir != null ? processArgs.directives.publishDir : [:]).isEmpty()) {
    // can't assert at this level thanks to the no_publish profile
    // assert params.containsKey("publishDir") || params.containsKey("publish_dir") : 
    //   "Error in module '${processArgs['key']}': if auto.publish is true, params.publish_dir needs to be defined.\n" +
    //   "  Example: params.publish_dir = \"./output/\""
    def publishDir = 
      params.containsKey("publish_dir") ? params.publish_dir : 
      params.containsKey("publishDir") ? params.publishDir : 
      null
    
    if (publishDir != null) {
      processArgs.directives.publishDir = [[ 
        path: publishDir, 
        saveAs: "{ it.startsWith('.') ? null : it }", // don't publish hidden files, by default
        mode: "copy"
      ]]
    }
  }

  // auto define transcript, if so desired
  if (processArgs.auto.transcript == true) {
    // can't assert at this level thanks to the no_publish profile
    // assert params.containsKey("transcriptsDir") || params.containsKey("transcripts_dir") || params.containsKey("publishDir") || params.containsKey("publish_dir") : 
    //   "Error in module '${processArgs['key']}': if auto.transcript is true, either params.transcripts_dir or params.publish_dir needs to be defined.\n" +
    //   "  Example: params.transcripts_dir = \"./transcripts/\""
    def transcriptsDir = 
      params.containsKey("transcripts_dir") ? params.transcripts_dir : 
      params.containsKey("transcriptsDir") ? params.transcriptsDir : 
      params.containsKey("publish_dir") ? params.publish_dir + "/_transcripts" :
      params.containsKey("publishDir") ? params.publishDir + "/_transcripts" : 
      null
    if (transcriptsDir != null) {
      def timestamp = Nextflow.getSession().getWorkflowMetadata().start.format('yyyy-MM-dd_HH-mm-ss')
      def transcriptsPublishDir = [ 
        path: "$transcriptsDir/$timestamp/\${task.process.replaceAll(':', '-')}/\${id}/",
        saveAs: "{ it.startsWith('.') ? it.replaceAll('^.', '') : null }", 
        mode: "copy"
      ]
      def publishDirs = processArgs.directives.publishDir != null ? processArgs.directives.publishDir : null ? processArgs.directives.publishDir : []
      processArgs.directives.publishDir = publishDirs + transcriptsPublishDir
    }
  }

  // if this is a stubrun, remove certain directives?
  if (workflow.stubRun) {
    processArgs.directives.keySet().removeAll(["publishDir", "cpus", "memory", "label"])
  }

  for (nam in [ "map", "mapId", "mapData", "mapPassthrough", "filter" ]) {
    if (processArgs.containsKey(nam) && processArgs[nam]) {
      assert processArgs[nam] instanceof Closure : "Expected process argument '$nam' to be null or a Closure. Found: class ${processArgs[nam].getClass()}"
    }
  }

  // return output
  return processArgs
}

def processFactory(Map processArgs) {
  // autodetect process key
  def wfKey = processArgs["key"]
  def procKeyPrefix = "${wfKey}_process"
  def meta = ScriptMeta.current()
  def existing = meta.getProcessNames().findAll{it.startsWith(procKeyPrefix)}
  def numbers = existing.collect{it.replace(procKeyPrefix, "0").toInteger()}
  def newNumber = (numbers + [-1]).max() + 1

  def procKey = newNumber == 0 ? procKeyPrefix : "$procKeyPrefix$newNumber"

  if (newNumber > 0) {
    log.warn "Key for module '${wfKey}' is duplicated.\n",
      "If you run a component multiple times in the same workflow,\n" +
      "it's recommended you set a unique key for every call,\n" +
      "for example: ${wfKey}.run(key: \"foo\")."
  }

  // subset directives and convert to list of tuples
  def drctv = processArgs.directives

  // TODO: unit test the two commands below
  // convert publish array into tags
  def valueToStr = { val ->
    // ignore closures
    if (val instanceof CharSequence) {
      if (!val.matches('^[{].*[}]$')) {
        '"' + val + '"'
      } else {
        val
      }
    } else if (val instanceof List) {
      "[" + val.collect{valueToStr(it)}.join(", ") + "]"
    } else if (val instanceof Map) {
      "[" + val.collect{k, v -> k + ": " + valueToStr(v)}.join(", ") + "]"
    } else {
      val.inspect()
    }
  }

  // multiple entries allowed: label, publishdir
  def drctvStrs = drctv.collect { key, value ->
    if (key in ["label", "publishDir"]) {
      value.collect{ val ->
        if (val instanceof Map) {
          "\n$key " + val.collect{ k, v -> k + ": " + valueToStr(v) }.join(", ")
        } else if (val == null) {
          ""
        } else {
          "\n$key " + valueToStr(val)
        }
      }.join()
    } else if (value instanceof Map) {
      "\n$key " + value.collect{ k, v -> k + ": " + valueToStr(v) }.join(", ")
    } else {
      "\n$key " + valueToStr(value)
    }
  }.join()

  def inputPaths = thisConfig.functionality.allArguments
    .findAll { it.type == "file" && it.direction == "input" }
    .collect { ', path(viash_par_' + it.plainName + ')' }
    .join()

  def outputPaths = thisConfig.functionality.allArguments
    .findAll { it.type == "file" && it.direction == "output" }
    .collect { par ->
      // insert dummy into every output (see nextflow-io/nextflow#2678)
      if (!par.multiple) {
        ', path{[".exitcode", args.' + par.plainName + ']}'
      } else {
        ', path{[".exitcode"] + args.' + par.plainName + '}'
      }
    }
    .join()

  // TODO: move this functionality somewhere else?
  if (processArgs.auto.transcript) {
    outputPaths = outputPaths + ', path{[".exitcode", ".command*"]}'
  } else {
    outputPaths = outputPaths + ', path{[".exitcode"]}'
  }

  // create dirs for output files (based on BashWrapper.createParentFiles)
  def createParentStr = thisConfig.functionality.allArguments
    .findAll { it.type == "file" && it.direction == "output" && it.create_parent }
    .collect { par -> 
      "\${ args.containsKey(\"${par.plainName}\") ? \"mkdir_parent \\\"\" + (args[\"${par.plainName}\"] instanceof String ? args[\"${par.plainName}\"] : args[\"${par.plainName}\"].join('\" \"')) + \"\\\"\" : \"\" }"
    }
    .join("\n")

  // construct inputFileExports
  def inputFileExports = thisConfig.functionality.allArguments
    .findAll { it.type == "file" && it.direction.toLowerCase() == "input" }
    .collect { par ->
      viash_par_contents = !par.required && !par.multiple ? "viash_par_${par.plainName}[0]" : "viash_par_${par.plainName}.join(\"${par.multiple_sep}\")"
      "\n\${viash_par_${par.plainName}.empty ? \"\" : \"export VIASH_PAR_${par.plainName.toUpperCase()}=\\\"\" + ${viash_par_contents} + \"\\\"\"}"
    }

  // NOTE: if using docker, use /tmp instead of tmpDir!
  def tmpDir = java.nio.file.Paths.get(
    System.getenv('NXF_TEMP') ?: 
    System.getenv('VIASH_TEMP') ?: 
    System.getenv('VIASH_TMPDIR') ?: 
    System.getenv('VIASH_TEMPDIR') ?: 
    System.getenv('VIASH_TMP') ?: 
    System.getenv('TEMP') ?: 
    System.getenv('TMPDIR') ?: 
    System.getenv('TEMPDIR') ?:
    System.getenv('TMP') ?: 
    '/tmp'
  ).toAbsolutePath()

  // construct stub
  def stub = thisConfig.functionality.allArguments
    .findAll { it.type == "file" && it.direction == "output" }
    .collect { par -> 
      "\${ args.containsKey(\"${par.plainName}\") ? \"touch2 \\\"\" + (args[\"${par.plainName}\"] instanceof String ? args[\"${par.plainName}\"].replace(\"_*\", \"_0\") : args[\"${par.plainName}\"].join('\" \"')) + \"\\\"\" : \"\" }"
    }
    .join("\n")

  // escape script
  def escapedScript = thisScript.replace('\\', '\\\\').replace('$', '\\$').replace('"""', '\\"\\"\\"')

  // publishdir assert
  def assertStr = processArgs.auto.publish || processArgs.auto.transcript ? 
    """\nassert task.publishDir.size() > 0: "if auto.publish is true, params.publish_dir needs to be defined.\\n  Example: --publish_dir './output/'" """ :
    ""

  // generate process string
  def procStr = 
  """nextflow.enable.dsl=2
  |
  |process $procKey {$drctvStrs
  |input:
  |  tuple val(id)$inputPaths, val(args), val(passthrough), path(resourcesDir)
  |output:
  |  tuple val("\$id"), val(passthrough)$outputPaths, optional: true
  |stub:
  |\"\"\"
  |touch2() { mkdir -p "\\\$(dirname "\\\$1")" && touch "\\\$1" ; }
  |$stub
  |\"\"\"
  |script:$assertStr
  |def escapeText = { s -> s.toString().replaceAll('([`"])', '\\\\\\\\\$1') }
  |def parInject = args
  |  .findAll{key, value -> value != null}
  |  .collect{key, value -> "export VIASH_PAR_\${key.toUpperCase()}=\\\"\${escapeText(value)}\\\""}
  |  .join("\\n")
  |\"\"\"
  |# meta exports
  |export VIASH_META_RESOURCES_DIR="\${resourcesDir.toRealPath().toAbsolutePath()}"
  |export VIASH_META_TEMP_DIR="${['docker', 'podman', 'charliecloud'].any{ it == workflow.containerEngine } ? '/tmp' : tmpDir}"
  |export VIASH_META_FUNCTIONALITY_NAME="${thisConfig.functionality.name}"
  |export VIASH_META_EXECUTABLE="\\\$VIASH_META_RESOURCES_DIR/\\\$VIASH_META_FUNCTIONALITY_NAME"
  |export VIASH_META_CONFIG="\\\$VIASH_META_RESOURCES_DIR/.config.vsh.yaml"
  |\${task.cpus ? "export VIASH_META_CPUS=\$task.cpus" : "" }
  |\${task.memory?.bytes != null ? "export VIASH_META_MEMORY_B=\$task.memory.bytes" : "" }
  |if [ ! -z \\\${VIASH_META_MEMORY_B+x} ]; then
  |  export VIASH_META_MEMORY_KB=\\\$(( (\\\$VIASH_META_MEMORY_B+1023) / 1024 ))
  |  export VIASH_META_MEMORY_MB=\\\$(( (\\\$VIASH_META_MEMORY_KB+1023) / 1024 ))
  |  export VIASH_META_MEMORY_GB=\\\$(( (\\\$VIASH_META_MEMORY_MB+1023) / 1024 ))
  |  export VIASH_META_MEMORY_TB=\\\$(( (\\\$VIASH_META_MEMORY_GB+1023) / 1024 ))
  |  export VIASH_META_MEMORY_PB=\\\$(( (\\\$VIASH_META_MEMORY_TB+1023) / 1024 ))
  |fi
  |
  |# meta synonyms
  |export VIASH_TEMP="\\\$VIASH_META_TEMP_DIR"
  |export TEMP_DIR="\\\$VIASH_META_TEMP_DIR"
  |
  |# create output dirs if need be
  |function mkdir_parent {
  |  for file in "\\\$@"; do 
  |    mkdir -p "\\\$(dirname "\\\$file")"
  |  done
  |}
  |$createParentStr
  |
  |# argument exports${inputFileExports.join()}
  |\$parInject
  |
  |# process script
  |${escapedScript}
  |\"\"\"
  |}
  |""".stripMargin()

  // TODO: print on debug
  // if (processArgs.debug == true) {
  //   println("######################\n$procStr\n######################")
  // }

  // create runtime process
  def ownerParams = new ScriptBinding.ParamsMap()
  def binding = new ScriptBinding().setParams(ownerParams)
  def module = new IncludeDef.Module(name: procKey)
  def scriptParser = new ScriptParser(session)
    .setModule(true)
    .setBinding(binding)
  scriptParser.scriptPath = ScriptMeta.current().getScriptPath()
  def moduleScript = scriptParser.runScript(procStr)
    .getScript()

  // register module in meta
  meta.addModule(moduleScript, module.name, module.alias)

  // retrieve and return process from meta
  return meta.getProcess(procKey)
}

def debug(processArgs, debugKey) {
  if (processArgs.debug) {
    view { "process '${processArgs.key}' $debugKey tuple: $it"  }
  } else {
    map { it }
  }
}

def workflowFactory(Map args) {
  def processArgs = processProcessArgs(args)
  def key = processArgs["key"]
  def meta = ScriptMeta.current()

  def workflowKey = key

  def processObj = null
  
  workflow workflowInstance {
    take:
    input_

    main:
    if (processObj == null) {
      processObj = processFactory(processArgs)
    }

    mid1_ = input_
      | debug(processArgs, "input")
      | map { tuple ->
        tuple = tuple.clone()
        
        if (processArgs.map) {
          tuple = processArgs.map(tuple)
        }
        if (processArgs.mapId) {
          tuple[0] = processArgs.mapId(tuple[0])
        }
        if (processArgs.mapData) {
          tuple[1] = processArgs.mapData(tuple[1])
        }
        if (processArgs.mapPassthrough) {
          tuple = tuple.take(2) + processArgs.mapPassthrough(tuple.drop(2))
        }

        // check tuple
        assert tuple instanceof List : 
          "Error in module '${key}': element in channel should be a tuple [id, data, ...otherargs...]\n" +
          "  Example: [\"id\", [input: file('foo.txt'), arg: 10]].\n" +
          "  Expected class: List. Found: tuple.getClass() is ${tuple.getClass()}"
        assert tuple.size() >= 2 : 
          "Error in module '${key}': expected length of tuple in input channel to be two or greater.\n" +
          "  Example: [\"id\", [input: file('foo.txt'), arg: 10]].\n" +
          "  Found: tuple.size() == ${tuple.size()}"
        
        // check id field
        assert tuple[0] instanceof CharSequence : 
          "Error in module '${key}': first element of tuple in channel should be a String\n" +
          "  Example: [\"id\", [input: file('foo.txt'), arg: 10]].\n" +
          "  Found: ${tuple[0]}"
        
        // match file to input file
        if (processArgs.auto.simplifyInput && (tuple[1] instanceof Path || tuple[1] instanceof List)) {
          def inputFiles = thisConfig.functionality.allArguments
            .findAll { it.type == "file" && it.direction == "input" }
          
          assert inputFiles.size() == 1 : 
              "Error in module '${key}' id '${tuple[0]}'.\n" +
              "  Anonymous file inputs are only allowed when the process has exactly one file input.\n" +
              "  Expected: inputFiles.size() == 1. Found: inputFiles.size() is ${inputFiles.size()}"

          tuple[1] = [[ inputFiles[0].plainName, tuple[1] ]].collectEntries()
        }

        // check data field
        assert tuple[1] instanceof Map : 
          "Error in module '${key}' id '${tuple[0]}': second element of tuple in channel should be a Map\n" +
          "  Example: [\"id\", [input: file('foo.txt'), arg: 10]].\n" +
          "  Expected class: Map. Found: tuple[1].getClass() is ${tuple[1].getClass()}"

        // rename keys of data field in tuple
        if (processArgs.renameKeys) {
          assert processArgs.renameKeys instanceof Map : 
              "Error renaming data keys in module '${key}' id '${tuple[0]}'.\n" +
              "  Example: renameKeys: ['new_key': 'old_key'].\n" +
              "  Expected class: Map. Found: renameKeys.getClass() is ${processArgs.renameKeys.getClass()}"
          assert tuple[1] instanceof Map : 
              "Error renaming data keys in module '${key}' id '${tuple[0]}'.\n" +
              "  Expected class: Map. Found: tuple[1].getClass() is ${tuple[1].getClass()}"

          // TODO: allow renameKeys to be a function?
          processArgs.renameKeys.each { newKey, oldKey ->
            assert newKey instanceof CharSequence : 
              "Error renaming data keys in module '${key}' id '${tuple[0]}'.\n" +
              "  Example: renameKeys: ['new_key': 'old_key'].\n" +
              "  Expected class of newKey: String. Found: newKey.getClass() is ${newKey.getClass()}"
            assert oldKey instanceof CharSequence : 
              "Error renaming data keys in module '${key}' id '${tuple[0]}'.\n" +
              "  Example: renameKeys: ['new_key': 'old_key'].\n" +
              "  Expected class of oldKey: String. Found: oldKey.getClass() is ${oldKey.getClass()}"
            assert tuple[1].containsKey(oldKey) : 
              "Error renaming data keys in module '${key}' id '${tuple[0]}'.\n" +
              "  Key '$oldKey' is missing in the data map. tuple[1].keySet() is '${tuple[1].keySet()}'"
            tuple[1].put(newKey, tuple[1][oldKey])
          }
          tuple[1].keySet().removeAll(processArgs.renameKeys.collect{ newKey, oldKey -> oldKey })
        }
        tuple
      }
    if (processArgs.filter) {
      mid2_ = mid1_
        | filter{processArgs.filter(it)}
    } else {
      mid2_ = mid1_
    }
    output_ = mid2_
      | debug(processArgs, "processed")
      | map { tuple ->
        def id = tuple[0]
        def data = tuple[1]
        def passthrough = tuple.drop(2)

        // fetch default params from functionality
        def defaultArgs = thisConfig.functionality.allArguments
          .findAll { it.containsKey("default") }
          .collectEntries { [ it.plainName, it.default ] }

        // fetch overrides in params
        def paramArgs = thisConfig.functionality.allArguments
          .findAll { par ->
            def argKey = key + "__" + par.plainName
            params.containsKey(argKey) && params[argKey] != "viash_no_value"
          }
          .collectEntries { [ it.plainName, params[key + "__" + it.plainName] ] }
        
        // fetch overrides in data
        def dataArgs = thisConfig.functionality.allArguments
          .findAll { data.containsKey(it.plainName) }
          .collectEntries { [ it.plainName, data[it.plainName] ] }
        
        // combine params
        def combinedArgs = defaultArgs + paramArgs + processArgs.args + dataArgs

        // remove arguments with explicit null values
        combinedArgs.removeAll{it.value == null}

        if (workflow.stubRun) {
          // add id if missing
          combinedArgs = [id: 'stub'] + combinedArgs
        } else {
          // check whether required arguments exist
          thisConfig.functionality.allArguments
            .forEach { par ->
              if (par.required) {
                assert combinedArgs.containsKey(par.plainName): "Argument ${par.plainName} is required but does not have a value"
              }
            }
        }

        // TODO: check whether parameters have the right type

        // process input files separately
        def inputPaths = thisConfig.functionality.allArguments
          .findAll { it.type == "file" && it.direction == "input" }
          .collect { par ->
            def val = combinedArgs.containsKey(par.plainName) ? combinedArgs[par.plainName] : []
            def inputFiles = []
            if (val == null) {
              inputFiles = []
            } else if (val instanceof List) {
              inputFiles = val
            } else if (val instanceof Path) {
              inputFiles = [ val ]
            } else {
              inputFiles = []
            }
            if (!workflow.stubRun) {
              // throw error when an input file doesn't exist
              inputFiles.each{ file -> 
                assert file.exists() :
                  "Error in module '${key}' id '${id}' argument '${par.plainName}'.\n" +
                  "  Required input file does not exist.\n" +
                  "  Path: '$file'.\n" +
                  "  Expected input file to exist"
              }
            }
            inputFiles 
          } 

        // remove input files
        def argsExclInputFiles = thisConfig.functionality.allArguments
          .findAll { (it.type != "file" || it.direction != "input") && combinedArgs.containsKey(it.plainName) }
          .collectEntries { par ->
            def parName = par.plainName
            def val = combinedArgs[parName]
            if (par.multiple && val instanceof Collection) {
              val = val.join(par.multiple_sep)
            }
            if (par.direction == "output" && par.type == "file") {
              val = val.replaceAll('\\$id', id).replaceAll('\\$key', key)
            }
            [parName, val]
          }

        [ id ] + inputPaths + [ argsExclInputFiles, passthrough, resourcesDir ]
      }
      | processObj
      | map { output ->
        def outputFiles = thisConfig.functionality.allArguments
          .findAll { it.type == "file" && it.direction == "output" }
          .indexed()
          .collectEntries{ index, par ->
            out = output[index + 2]
            // strip dummy '.exitcode' file from output (see nextflow-io/nextflow#2678)
            if (!out instanceof List || out.size() <= 1) {
              if (par.multiple) {
                out = []
              } else {
                assert !par.required :
                    "Error in module '${key}' id '${output[0]}' argument '${par.plainName}'.\n" +
                    "  Required output file is missing"
                out = null
              }
            } else if (out.size() == 2 && !par.multiple) {
              out = out[1]
            } else {
              out = out.drop(1)
            }
            [ par.plainName, out ]
          }
        
        // drop null outputs
        outputFiles.removeAll{it.value == null}

        if (processArgs.auto.simplifyOutput && outputFiles.size() == 1) {
          outputFiles = outputFiles.values()[0]
        }

        def out = [ output[0], outputFiles ]

        // passthrough additional items
        if (output[1]) {
          out.addAll(output[1])
        }

        out
      }
      | debug(processArgs, "output")

    emit:
    output_
  }

  def wf = workflowInstance.cloneWithName(workflowKey)

  // add factory function
  wf.metaClass.run = { runArgs ->
    workflowFactory(runArgs)
  }
  // add config to module for later introspection
  wf.metaClass.config = thisConfig

  return wf
}

// initialise default workflow
myWfInstance = workflowFactory([:])

// add workflow to environment
ScriptMeta.current().addDefinition(myWfInstance)

// anonymous workflow for running this module as a standalone
workflow {
  def mergedConfig = thisConfig
  def mergedParams = [:] + params

  // add id argument if it's not already in the config
  if (mergedConfig.functionality.arguments.every{it.plainName != "id"}) {
    def idArg = [
      'name': '--id',
      'required': false,
      'type': 'string',
      'description': 'A unique id for every entry.',
      'multiple': false
    ]
    mergedConfig.functionality.arguments.add(0, idArg)
    mergedConfig = processConfig(mergedConfig)
  }
  if (!mergedParams.containsKey("id")) {
    mergedParams.id = "run"
  }

  helpMessage(mergedConfig)

  channelFromParams(mergedParams, mergedConfig)
    | preprocessInputs("config": mergedConfig)
    | view { "input: $it" }
    | myWfInstance.run(
      auto: [ publish: true ]
    )
    | view { "output: $it" }
}