[
  {
    "objectID": "index.html",
    "href": "index.html",
    "title": "utilities",
    "section": "",
    "text": "A collection of scripts for common data management and processing tasks.\nThe provided pipelines are built using the Viash framework on top of the Nextflow workflow system. For more information on Nextflow please visit the Nextflow github page and the Nextflow read the docs page."
  },
  {
    "objectID": "modules/module_transform_regress_out.html",
    "href": "modules/module_transform_regress_out.html",
    "title": "Regress out",
    "section": "",
    "text": "ID: regress_out\nNamespace: transform\n\n\n\nSource\nUses simple linear regression. This is inspired by Seurat’s regressOut function in R [Satija15]. Note that this function tends to overcorrect in certain circumstances as described in issue theislab/scanpy#526. See https://github.com/theislab/scanpy/issues/526"
  },
  {
    "objectID": "modules/module_transform_regress_out.html#example-commands",
    "href": "modules/module_transform_regress_out.html#example-commands",
    "title": "Regress out",
    "section": "Example commands",
    "text": "Example commands\nYou can run the pipeline using nextflow run.\n\nView help\nYou can use --help as a parameter to get an overview of the possible parameters.\nnextflow run openpipelines-bio/openpipeline \\\n  -r main_build -latest \\\n  -main-script target/nextflow/transform/regress_out/main.nf \\\n  --help\n\n\nRun command\n\n\nExample of params.yaml\n\n# Arguments\ninput: # please fill in - example: \"input.h5mu\"\n# output: \"$id.$key.output.h5mu\"\nmodality: \"rna\"\n# obs_keys: [\"foo\"]\n\n# Nextflow input-output arguments\npublish_dir: # please fill in - example: \"output/\"\n# param_list: \"my_params.yaml\"\n\nnextflow run openpipelines-bio/openpipeline \\\n  -r main_build -latest \\\n  -profile docker \\\n  -main-script target/nextflow/transform/regress_out/main.nf \\\n  -params-file params.yaml\n\n\n\n\n\n\nNote\n\n\n\nReplace -profile docker with -profile podman or -profile singularity depending on the desired backend."
  },
  {
    "objectID": "modules/module_transform_regress_out.html#argument-group",
    "href": "modules/module_transform_regress_out.html#argument-group",
    "title": "Regress out",
    "section": "Argument group",
    "text": "Argument group\n\nArguments\n\n\n\n\n\n\n\n\nName\nDescription\nAttributes\n\n\n\n\n--input\nInput h5mu file\nfile, required, example: \"input.h5mu\"\n\n\n--output\nOutput h5mu file.\nfile, required, default: \"output.h5mu\"\n\n\n--modality\nWhich modality (one or more) to run this component on.\nstring, default: \"rna\"\n\n\n--obs_keys\nWhich .obs keys to regress on.\nstring"
  },
  {
    "objectID": "modules/module_transform_regress_out.html#authors",
    "href": "modules/module_transform_regress_out.html#authors",
    "title": "Regress out",
    "section": "Authors",
    "text": "Authors\n\nRobrecht Cannoodt   (maintainer, contributor)"
  },
  {
    "objectID": "modules/workflow_ingestion_demux.html",
    "href": "modules/workflow_ingestion_demux.html",
    "title": "Demux",
    "section": "",
    "text": "ID: demux\nNamespace: ingestion\n\n\n\nSource\nConvert .bcl files to .fastq files using bcl2fastq, bcl-convert or Cell Ranger mkfastq."
  },
  {
    "objectID": "modules/workflow_ingestion_demux.html#example-commands",
    "href": "modules/workflow_ingestion_demux.html#example-commands",
    "title": "Demux",
    "section": "Example commands",
    "text": "Example commands\nYou can run the pipeline using nextflow run.\n\nView help\nYou can use --help as a parameter to get an overview of the possible parameters.\nnextflow run openpipelines-bio/openpipeline \\\n  -r main_build -latest \\\n  -main-script workflows/ingestion/demux/main.nf \\\n  --help\n\n\nRun command\n\n\nExample of params.yaml\n\n# Arguments\nid: # please fill in - example: \"foo\"\ninput: # please fill in - example: \"bcl_dir\"\nsample_sheet: # please fill in - example: \"bcl_dir\"\ndemultiplexer: \"bcl2fastq\"\n# ignore_missing: true\n\n# Nextflow input-output arguments\npublish_dir: # please fill in - example: \"output/\"\n# param_list: \"my_params.yaml\"\n\nnextflow run openpipelines-bio/openpipeline \\\n  -r main_build -latest \\\n  -profile docker \\\n  -main-script workflows/ingestion/demux/main.nf \\\n  -params-file params.yaml\n\n\n\n\n\n\nNote\n\n\n\nReplace -profile docker with -profile podman or -profile singularity depending on the desired backend."
  },
  {
    "objectID": "modules/workflow_ingestion_demux.html#argument-group",
    "href": "modules/workflow_ingestion_demux.html#argument-group",
    "title": "Demux",
    "section": "Argument group",
    "text": "Argument group\n\nArguments\n\n\n\n\n\n\n\n\nName\nDescription\nAttributes\n\n\n\n\n--id\nID of the sample.\nstring, required, example: \"foo\"\n\n\n--input\nInput run directory\nfile, required, example: \"bcl_dir\"\n\n\n--sample_sheet\nPointer to the sample sheet\nfile, required, example: \"bcl_dir\"\n\n\n--demultiplexer\nThe multiplexer to use, one of bclconvert or mkfastq\nstring, default: \"bcl2fastq\"\n\n\n--ignore_missing\nShould the demultiplexer ignore missing entities (filter, …)\nboolean"
  },
  {
    "objectID": "modules/workflow_ingestion_demux.html#authors",
    "href": "modules/workflow_ingestion_demux.html#authors",
    "title": "Demux",
    "section": "Authors",
    "text": "Authors\n\nToni Verbeiren  (author, maintainer)\nMarijke Van Moerbeke  (author)\nAngela Pisco   (author)\nSamuel D’Souza  (author)\nRobrecht Cannoodt   (author)"
  },
  {
    "objectID": "modules/workflow_ingestion_demux.html#visualisation",
    "href": "modules/workflow_ingestion_demux.html#visualisation",
    "title": "Demux",
    "section": "Visualisation",
    "text": "Visualisation\n\n\n\n\nflowchart LR\n    p0(Input)\n    p3(filter)\n    p8(cellranger_mkfastq)\n    p27(mix)\n    p11(filter)\n    p16(bcl_convert)\n    p19(filter)\n    p24(bcl2fastq)\n    p32(fastqc)\n    p35(Output)\n    p37(toSortedList)\n    p43(multiqc)\n    p46(Output)\n    p50(Output)\n    p0-->p3\n    p0-->p11\n    p0-->p19\n    p3-->p8\n    p8-->p27\n    p11-->p16\n    p16-->p27\n    p19-->p24\n    p24-->p27\n    p27-->p32\n    p32-->p35\n    p27-->p37\n    p37-->p43\n    p43-->p46\n    p27-->p50"
  },
  {
    "objectID": "modules/module_metadata_add_id.html",
    "href": "modules/module_metadata_add_id.html",
    "title": "Add id",
    "section": "",
    "text": "ID: add_id\nNamespace: metadata\n\n\n\nSource\nAlso allows to make .obs_names (the .obs index) unique by prefixing the values with an unique id per .h5mu file"
  },
  {
    "objectID": "modules/module_metadata_add_id.html#example-commands",
    "href": "modules/module_metadata_add_id.html#example-commands",
    "title": "Add id",
    "section": "Example commands",
    "text": "Example commands\nYou can run the pipeline using nextflow run.\n\nView help\nYou can use --help as a parameter to get an overview of the possible parameters.\nnextflow run openpipelines-bio/openpipeline \\\n  -r main_build -latest \\\n  -main-script target/nextflow/metadata/add_id/main.nf \\\n  --help\n\n\nRun command\n\n\nExample of params.yaml\n\n# Arguments\ninput: # please fill in - example: \"sample_path\"\ninput_id: # please fill in - example: \"foo\"\nobs_output: \"sample_id\"\n# output: \"$id.$key.output.h5mu\"\nmake_observation_keys_unique: false\n\n# Nextflow input-output arguments\npublish_dir: # please fill in - example: \"output/\"\n# param_list: \"my_params.yaml\"\n\nnextflow run openpipelines-bio/openpipeline \\\n  -r main_build -latest \\\n  -profile docker \\\n  -main-script target/nextflow/metadata/add_id/main.nf \\\n  -params-file params.yaml\n\n\n\n\n\n\nNote\n\n\n\nReplace -profile docker with -profile podman or -profile singularity depending on the desired backend."
  },
  {
    "objectID": "modules/module_metadata_add_id.html#argument-group",
    "href": "modules/module_metadata_add_id.html#argument-group",
    "title": "Add id",
    "section": "Argument group",
    "text": "Argument group\n\nArguments\n\n\n\n\n\n\n\n\nName\nDescription\nAttributes\n\n\n\n\n--input\nPath to the input .h5mu.\nfile, required, example: \"sample_path\"\n\n\n--input_id\nThe input id.\nstring, required\n\n\n--obs_output\nName of the .obs column where to store the id.\nstring, default: \"sample_id\"\n\n\n--make_observation_keys_unique\nJoin the id to the .obs index (.obs_names).\nboolean_true"
  },
  {
    "objectID": "modules/module_metadata_add_id.html#authors",
    "href": "modules/module_metadata_add_id.html#authors",
    "title": "Add id",
    "section": "Authors",
    "text": "Authors\n\nDries Schaumont   (maintainer)"
  },
  {
    "objectID": "modules/module_mapping_bd_rhapsody.html",
    "href": "modules/module_mapping_bd_rhapsody.html",
    "title": "BD Rhapsody",
    "section": "",
    "text": "ID: bd_rhapsody\nNamespace: mapping\n\n\n\nSource\nA wrapper for the BD Rhapsody Analysis CWL v1.10.1 pipeline.\nThe CWL pipeline file is obtained by cloning ‘https://bitbucket.org/CRSwDev/cwl/src/master/’ and removing all objects with class ‘DockerRequirement’ from the YML.\nThis pipeline can be used for a targeted analysis (with --mode targeted) or for a whole transcriptome analysis (with --mode wta).\nThe reference_genome and transcriptome_annotation files can be generated with the make_reference pipeline. Alternatively, BD also provides standard references which can be downloaded from these locations:"
  },
  {
    "objectID": "modules/module_mapping_bd_rhapsody.html#example-commands",
    "href": "modules/module_mapping_bd_rhapsody.html#example-commands",
    "title": "BD Rhapsody",
    "section": "Example commands",
    "text": "Example commands\nYou can run the pipeline using nextflow run.\n\nView help\nYou can use --help as a parameter to get an overview of the possible parameters.\nnextflow run openpipelines-bio/openpipeline \\\n  -r main_build -latest \\\n  -main-script target/nextflow/mapping/bd_rhapsody/main.nf \\\n  --help\n\n\nRun command\n\n\nExample of params.yaml\n\n# Inputs\nmode: # please fill in - example: \"wta\"\ninput: # please fill in - example: [\"input.fastq.gz\"]\nreference: # please fill in - example: [\"reference_genome.tar.gz|reference.fasta\"]\n# transcriptome_annotation: \"transcriptome.gtf\"\n# abseq_reference: [\"abseq_reference.fasta\"]\n# supplemental_reference: [\"supplemental_reference.fasta\"]\nsample_prefix: \"sample\"\n\n# Outputs\n# output: \"$id.$key.output.output\"\n\n# Putative cell calling settings\n# putative_cell_call: \"mRNA\"\n# exact_cell_count: 10000\ndisable_putative_calling: false\n\n# Subsample arguments\n# subsample: 0.01\n# subsample_seed: 3445\n\n# Multiplex arguments\n# sample_tags_version: \"human\"\n# tag_names: [\"4-mySample\", \"9-myOtherSample\", \"6-alsoThisSample\"]\n\n# VDJ arguments\n# vdj_version: \"human\"\n\n# CWL-runner arguments\nparallel: true\ntimestamps: false\ndryrun: false\n\n# Nextflow input-output arguments\npublish_dir: # please fill in - example: \"output/\"\n# param_list: \"my_params.yaml\"\n\nnextflow run openpipelines-bio/openpipeline \\\n  -r main_build -latest \\\n  -profile docker \\\n  -main-script target/nextflow/mapping/bd_rhapsody/main.nf \\\n  -params-file params.yaml\n\n\n\n\n\n\nNote\n\n\n\nReplace -profile docker with -profile podman or -profile singularity depending on the desired backend."
  },
  {
    "objectID": "modules/module_mapping_bd_rhapsody.html#argument-groups",
    "href": "modules/module_mapping_bd_rhapsody.html#argument-groups",
    "title": "BD Rhapsody",
    "section": "Argument groups",
    "text": "Argument groups\n\nInputs\n\n\n\n\n\n\n\n\nName\nDescription\nAttributes\n\n\n\n\n--mode\nWhether to run a whole transcriptome analysis (WTA) or a targeted analysis.\nstring, required, example: \"wta\"\n\n\n--input\nPath to your read files in the FASTQ.GZ format. You may specify as many R1/R2 read pairs as you want.\nfile, required, example: \"input.fastq.gz\"\n\n\n--reference\nRefence to map to. For --mode wta, this is the path to STAR index as a tar.gz file. For --mode targeted, this is the path to mRNA reference file for pre-designed, supplemental, or custom panel, in FASTA format\nfile, required, example: \"reference_genome.tar.gz&#124;reference.fasta\"\n\n\n--transcriptome_annotation\nPath to GTF annotation file (only for --mode wta).\nfile, example: \"transcriptome.gtf\"\n\n\n--abseq_reference\nPath to the AbSeq reference file in FASTA format. Only needed if BD AbSeq Ab-Oligos are used.\nfile, example: \"abseq_reference.fasta\"\n\n\n--supplemental_reference\nPath to the supplemental reference file in FASTA format. Only needed if there are additional transgene sequences used in the experiment (only for --mode wta).\nfile, example: \"supplemental_reference.fasta\"\n\n\n--sample_prefix\nSpecify a run name to use as the output file base name. Use only letters, numbers, or hyphens. Do not use special characters or spaces.\nstring, default: \"sample\"\n\n\n\n\n\nOutputs\n\n\n\n\n\n\n\n\nName\nDescription\nAttributes\n\n\n\n\n--output\nOutput folder. Output still needs to be processed further.\nfile, required, example: \"output_dir\"\n\n\n\n\n\nPutative cell calling settings\n\n\n\n\n\n\n\n\nName\nDescription\nAttributes\n\n\n\n\n--putative_cell_call\nSpecify the dataset to be used for putative cell calling. For putative cell calling using an AbSeq dataset, please provide an AbSeq_Reference fasta file above.\nstring, example: \"mRNA\"\n\n\n--exact_cell_count\nExact cell count - Set a specific number (>=1) of cells as putative, based on those with the highest error-corrected read count\ninteger, example: 10000\n\n\n--disable_putative_calling\nDisable Refined Putative Cell Calling - Determine putative cells using only the basic algorithm (minimum second derivative along the cumulative reads curve). The refined algorithm attempts to remove false positives and recover false negatives, but may not be ideal for certain complex mixtures of cell types. Does not apply if Exact Cell Count is set.\nboolean_true\n\n\n\n\n\nSubsample arguments\n\n\n\n\n\n\n\n\nName\nDescription\nAttributes\n\n\n\n\n--subsample\nA number >1 or fraction (0 < n < 1) to indicate the number or percentage of reads to subsample.\ndouble, example: 0.01\n\n\n--subsample_seed\nA seed for replicating a previous subsampled run.\ninteger, example: 3445\n\n\n\n\n\nMultiplex arguments\n\n\n\n\n\n\n\n\nName\nDescription\nAttributes\n\n\n\n\n--sample_tags_version\nSpecify if multiplexed run.\nstring, example: \"human\"\n\n\n--tag_names\nTag_Names (optional) - Specify the tag number followed by ‘-’ and the desired sample name to appear in Sample_Tag_Metrics.csv. Do not use the special characters: &, (), [], {}, <>, ?, |\nstring, example: \"4-mySample\", example: \"9-myOtherSample\", example: \"6-alsoThisSample\"\n\n\n\n\n\nVDJ arguments\n\n\n\nName\nDescription\nAttributes\n\n\n\n\n--vdj_version\nSpecify if VDJ run.\nstring, example: \"human\"\n\n\n\n\n\nCWL-runner arguments\n\n\n\n\n\n\n\n\nName\nDescription\nAttributes\n\n\n\n\n--parallel\nRun jobs in parallel.\nboolean, default: TRUE\n\n\n--timestamps\nAdd timestamps to the errors, warnings, and notifications.\nboolean_true\n\n\n--dryrun\nIf true, the output directory will only contain the CWL input files, but the pipeline itself will not be executed.\nboolean_true"
  },
  {
    "objectID": "modules/module_mapping_bd_rhapsody.html#authors",
    "href": "modules/module_mapping_bd_rhapsody.html#authors",
    "title": "BD Rhapsody",
    "section": "Authors",
    "text": "Authors\n\nRobrecht Cannoodt   (maintainer)"
  },
  {
    "objectID": "modules/module_transfer_publish.html",
    "href": "modules/module_transfer_publish.html",
    "title": "Publish",
    "section": "",
    "text": "ID: publish\nNamespace: transfer\n\n\n\nSource"
  },
  {
    "objectID": "modules/module_transfer_publish.html#example-commands",
    "href": "modules/module_transfer_publish.html#example-commands",
    "title": "Publish",
    "section": "Example commands",
    "text": "Example commands\nYou can run the pipeline using nextflow run.\n\nView help\nYou can use --help as a parameter to get an overview of the possible parameters.\nnextflow run openpipelines-bio/openpipeline \\\n  -r main_build -latest \\\n  -main-script target/nextflow/transfer/publish/main.nf \\\n  --help\n\n\nRun command\n\n\nExample of params.yaml\n\n# Arguments\ninput: # please fill in - example: \"path/to/file\"\n# output: \"$id.$key.output.output\"\n\n# Nextflow input-output arguments\npublish_dir: # please fill in - example: \"output/\"\n# param_list: \"my_params.yaml\"\n\nnextflow run openpipelines-bio/openpipeline \\\n  -r main_build -latest \\\n  -profile docker \\\n  -main-script target/nextflow/transfer/publish/main.nf \\\n  -params-file params.yaml\n\n\n\n\n\n\nNote\n\n\n\nReplace -profile docker with -profile podman or -profile singularity depending on the desired backend."
  },
  {
    "objectID": "modules/module_transfer_publish.html#argument-group",
    "href": "modules/module_transfer_publish.html#argument-group",
    "title": "Publish",
    "section": "Argument group",
    "text": "Argument group\n\nArguments\n\n\n\nName\nDescription\nAttributes\n\n\n\n\n--input\nInput filename\nfile, required\n\n\n--output\nOutput filename\nfile, required"
  },
  {
    "objectID": "modules/module_transfer_publish.html#authors",
    "href": "modules/module_transfer_publish.html#authors",
    "title": "Publish",
    "section": "Authors",
    "text": "Authors\n\nToni Verbeiren  (maintainer)"
  },
  {
    "objectID": "modules/module_demux_bcl_convert.html",
    "href": "modules/module_demux_bcl_convert.html",
    "title": "Bcl convert",
    "section": "",
    "text": "ID: bcl_convert\nNamespace: demux\n\n\n\nSource\nInformation about upgrading from bcl2fastq via https://emea.support.illumina.com/bulletins/2020/10/upgrading-from-bcl2fastq-to-bcl-convert.html and https://support.illumina.com/sequencing/sequencing_software/bcl-convert/compatibility.html"
  },
  {
    "objectID": "modules/module_demux_bcl_convert.html#example-commands",
    "href": "modules/module_demux_bcl_convert.html#example-commands",
    "title": "Bcl convert",
    "section": "Example commands",
    "text": "Example commands\nYou can run the pipeline using nextflow run.\n\nView help\nYou can use --help as a parameter to get an overview of the possible parameters.\nnextflow run openpipelines-bio/openpipeline \\\n  -r main_build -latest \\\n  -main-script target/nextflow/demux/bcl_convert/main.nf \\\n  --help\n\n\nRun command\n\n\nExample of params.yaml\n\n# Arguments\ninput: # please fill in - example: \"bcl_dir\"\nsample_sheet: # please fill in - example: \"bcl_dir\"\n# output: \"$id.$key.output.output\"\nseparate_reports: false\n# reports: \"$id.$key.reports.reports\"\ntest_mode: false\n\n# Nextflow input-output arguments\npublish_dir: # please fill in - example: \"output/\"\n# param_list: \"my_params.yaml\"\n\nnextflow run openpipelines-bio/openpipeline \\\n  -r main_build -latest \\\n  -profile docker \\\n  -main-script target/nextflow/demux/bcl_convert/main.nf \\\n  -params-file params.yaml\n\n\n\n\n\n\nNote\n\n\n\nReplace -profile docker with -profile podman or -profile singularity depending on the desired backend."
  },
  {
    "objectID": "modules/module_demux_bcl_convert.html#argument-group",
    "href": "modules/module_demux_bcl_convert.html#argument-group",
    "title": "Bcl convert",
    "section": "Argument group",
    "text": "Argument group\n\nArguments\n\n\n\n\n\n\n\n\nName\nDescription\nAttributes\n\n\n\n\n--input\nInput run directory\nfile, required, example: \"bcl_dir\"\n\n\n--sample_sheet\nPointer to the sample sheet\nfile, required, example: \"bcl_dir\"\n\n\n--output\nOutput directory containig fastq files\nfile, required, example: \"fastq_dir\"\n\n\n--separate_reports\nShould reports be stored in a separate dir. Should be used with the –reports argument.\nboolean_true\n\n\n--reports\nReports directory\nfile, default: \"reports\", example: \"reports_dir\"\n\n\n--test_mode\nShould bcl-convert be run in test mode (using –first-tile-only)?\nboolean, default: FALSE"
  },
  {
    "objectID": "modules/module_demux_bcl_convert.html#authors",
    "href": "modules/module_demux_bcl_convert.html#authors",
    "title": "Bcl convert",
    "section": "Authors",
    "text": "Authors\n\nToni Verbeiren  (author, maintainer)\nMarijke Van Moerbeke  (author)"
  },
  {
    "objectID": "modules/module_download_download_file.html",
    "href": "modules/module_download_download_file.html",
    "title": "Download file",
    "section": "",
    "text": "ID: download_file\nNamespace: download\n\n\n\nSource"
  },
  {
    "objectID": "modules/module_download_download_file.html#example-commands",
    "href": "modules/module_download_download_file.html#example-commands",
    "title": "Download file",
    "section": "Example commands",
    "text": "Example commands\nYou can run the pipeline using nextflow run.\n\nView help\nYou can use --help as a parameter to get an overview of the possible parameters.\nnextflow run openpipelines-bio/openpipeline \\\n  -r main_build -latest \\\n  -main-script target/nextflow/download/download_file/main.nf \\\n  --help\n\n\nRun command\n\n\nExample of params.yaml\n\n# Arguments\ninput: # please fill in - example: \"https://cf.10xgenomics.com/samples/cell-exp/3.0.0/pbmc_1k_protein_v3/pbmc_1k_protein_v3_raw_feature_bc_matrix.h5\"\n# output: \"$id.$key.output.h5\"\nverbose: false\n\n# Nextflow input-output arguments\npublish_dir: # please fill in - example: \"output/\"\n# param_list: \"my_params.yaml\"\n\nnextflow run openpipelines-bio/openpipeline \\\n  -r main_build -latest \\\n  -profile docker \\\n  -main-script target/nextflow/download/download_file/main.nf \\\n  -params-file params.yaml\n\n\n\n\n\n\nNote\n\n\n\nReplace -profile docker with -profile podman or -profile singularity depending on the desired backend."
  },
  {
    "objectID": "modules/module_download_download_file.html#argument-group",
    "href": "modules/module_download_download_file.html#argument-group",
    "title": "Download file",
    "section": "Argument group",
    "text": "Argument group\n\nArguments\n\n\n\n\n\n\n\n\nName\nDescription\nAttributes\n\n\n\n\n--input\nURL to a file to download.\nstring, required, example: \"https://cf.10xgenomics.com/samples/cell-exp/3.0.0/pbmc_1k_protein_v3/pbmc_1k_protein_v3_raw_feature_bc_matrix.h5\"\n\n\n--output\nPath where to store output.\nfile, required, example: \"pbmc_1k_protein_v3_raw_feature_bc_matrix.h5\"\n\n\n--verbose\nIncrease verbosity\nboolean_true"
  },
  {
    "objectID": "modules/module_download_download_file.html#authors",
    "href": "modules/module_download_download_file.html#authors",
    "title": "Download file",
    "section": "Authors",
    "text": "Authors\n\nRobrecht Cannoodt   (maintainer)"
  },
  {
    "objectID": "modules/module_mapping_spaceranger_count.html",
    "href": "modules/module_mapping_spaceranger_count.html",
    "title": "Spaceranger count",
    "section": "",
    "text": "ID: spaceranger_count\nNamespace: mapping\n\n\n\nSource"
  },
  {
    "objectID": "modules/module_mapping_spaceranger_count.html#example-commands",
    "href": "modules/module_mapping_spaceranger_count.html#example-commands",
    "title": "Spaceranger count",
    "section": "Example commands",
    "text": "Example commands\nYou can run the pipeline using nextflow run.\n\nView help\nYou can use --help as a parameter to get an overview of the possible parameters.\nnextflow run czbiohub/utilities \\\n  -r main_build -latest \\\n  -main-script target/nextflow/mapping/spaceranger_count/main.nf \\\n  --help\n\n\nRun command\n\n\nExample of params.yaml\n\n\n\nnextflow run czbiohub/utilities \\\n  -r main_build -latest \\\n  -profile docker \\\n  -main-script target/nextflow/mapping/spaceranger_count/main.nf \\\n  -params-file params.yaml\n\n\n\n\n\n\nNote\n\n\n\nReplace -profile docker with -profile podman or -profile singularity depending on the desired backend."
  },
  {
    "objectID": "modules/module_mapping_spaceranger_count.html#argument-group",
    "href": "modules/module_mapping_spaceranger_count.html#argument-group",
    "title": "Spaceranger count",
    "section": "Argument group",
    "text": "Argument group\n\nArguments\n\n\n\n\n\n\n\n\nName\nDescription\nAttributes\n\n\n\n\n--input_fastqs\nPath to the fastq files.\nfile, required, example: \"/path/to/bcl\"\n\n\n--input_tif\nPath to the tif file\nfile, required, example: \"path/to/tif\"\n\n\n--reference_genome\nPath to the reference genome\nfile, required, example: \"path/to/ref_genome\"\n\n\n--output\nThe name of the folder to store the results in\nfile, required, default: \"outs\"\n\n\n--id\nID name for temporary output directory.\nstring, default: \"output\"\n\n\n--sample\nSample name to analyze.\nstring, example: \"test_sample\"\n\n\n--lanes\nLanes associated with this sample.\ninteger, example: 1\n\n\n--slide\nSlide associated with this sample.\nstring"
  },
  {
    "objectID": "modules/module_mapping_spaceranger_count.html#authors",
    "href": "modules/module_mapping_spaceranger_count.html#authors",
    "title": "Spaceranger count",
    "section": "Authors",
    "text": "Authors"
  },
  {
    "objectID": "modules/module_integrate_scvi.html",
    "href": "modules/module_integrate_scvi.html",
    "title": "Scvi",
    "section": "",
    "text": "ID: scvi\nNamespace: integrate\n\n\n\nSource"
  },
  {
    "objectID": "modules/module_integrate_scvi.html#example-commands",
    "href": "modules/module_integrate_scvi.html#example-commands",
    "title": "Scvi",
    "section": "Example commands",
    "text": "Example commands\nYou can run the pipeline using nextflow run.\n\nView help\nYou can use --help as a parameter to get an overview of the possible parameters.\nnextflow run openpipelines-bio/openpipeline \\\n  -r main_build -latest \\\n  -main-script target/nextflow/integrate/scvi/main.nf \\\n  --help\n\n\nRun command\n\n\nExample of params.yaml\n\n# Inputs\ninput: # please fill in - example: \"path/to/file\"\nmodality: \"rna\"\n# input_layer: \"foo\"\nobs_batch: \"sample_id\"\n# var_input: \"foo\"\n\n# Outputs\n# output: \"$id.$key.output.output\"\nobsm_output: \"X_scvi_integrated\"\n\n# Early stopping arguments\n# early_stopping: true\nearly_stopping_monitor: \"elbo_validation\"\nearly_stopping_patience: 45\nearly_stopping_min_delta: 0.0\n\n# Learning parameters\nmax_epochs: # please fill in - example: 123\nreduce_lr_on_plateau: true\nlr_factor: 0.6\nlr_patience: 30\n\n# Nextflow input-output arguments\npublish_dir: # please fill in - example: \"output/\"\n# param_list: \"my_params.yaml\"\n\nnextflow run openpipelines-bio/openpipeline \\\n  -r main_build -latest \\\n  -profile docker \\\n  -main-script target/nextflow/integrate/scvi/main.nf \\\n  -params-file params.yaml\n\n\n\n\n\n\nNote\n\n\n\nReplace -profile docker with -profile podman or -profile singularity depending on the desired backend."
  },
  {
    "objectID": "modules/module_integrate_scvi.html#argument-groups",
    "href": "modules/module_integrate_scvi.html#argument-groups",
    "title": "Scvi",
    "section": "Argument groups",
    "text": "Argument groups\n\nInputs\n\n\n\n\n\n\n\n\nName\nDescription\nAttributes\n\n\n\n\n--input\nInput h5mu file\nfile, required\n\n\n--input_layer\nInput layer to use. If None, X is used\nstring\n\n\n--obs_batch\nColumn name discriminating between your batches.\nstring, default: \"sample_id\"\n\n\n--var_input\n.var column containing highly variable genes. By default, do not subset genes.\nstring\n\n\n\n\n\nOutputs\n\n\n\n\n\n\n\n\nName\nDescription\nAttributes\n\n\n\n\n--output\nOutput h5mu file.\nfile, required\n\n\n--obsm_output\nIn which .obsm slot to store the resulting integrated embedding.\nstring, default: \"X_scvi_integrated\"\n\n\n\n\n\nEarly stopping arguments\n\n\n\n\n\n\n\n\nName\nDescription\nAttributes\n\n\n\n\n--early_stopping\nWhether to perform early stopping with respect to the validation set.\nboolean\n\n\n--early_stopping_monitor\nMetric logged during validation set epoch.\nstring, default: \"elbo_validation\"\n\n\n--early_stopping_patience\nNumber of validation epochs with no improvement after which training will be stopped.\ninteger, default: 45\n\n\n--early_stopping_min_delta\nMinimum change in the monitored quantity to qualify as an improvement, i.e. an absolute change of less than min_delta, will count as no improvement.\ndouble, default: 0\n\n\n\n\n\nLearning parameters\n\n\n\n\n\n\n\n\nName\nDescription\nAttributes\n\n\n\n\n--max_epochs\nNumber of passes through the dataset, defaults to (20000 / number of cells) * 400 or 400; whichever is smallest.\ninteger, required\n\n\n--reduce_lr_on_plateau\nWhether to monitor validation loss and reduce learning rate when validation set lr_scheduler_metric plateaus.\nboolean, default: TRUE\n\n\n--lr_factor\nFactor to reduce learning rate.\ndouble, default: 0.6\n\n\n--lr_patience\nNumber of epochs with no improvement after which learning rate will be reduced.\ndouble, default: 30"
  },
  {
    "objectID": "modules/module_integrate_scvi.html#authors",
    "href": "modules/module_integrate_scvi.html#authors",
    "title": "Scvi",
    "section": "Authors",
    "text": "Authors\n\nMalte D. Luecken   (author)\nDries Schaumont   (maintainer)"
  },
  {
    "objectID": "modules/module_qc_multiqc.html",
    "href": "modules/module_qc_multiqc.html",
    "title": "Multiqc",
    "section": "",
    "text": "ID: multiqc\nNamespace: qc\n\n\n\nSource"
  },
  {
    "objectID": "modules/module_qc_multiqc.html#example-commands",
    "href": "modules/module_qc_multiqc.html#example-commands",
    "title": "Multiqc",
    "section": "Example commands",
    "text": "Example commands\nYou can run the pipeline using nextflow run.\n\nView help\nYou can use --help as a parameter to get an overview of the possible parameters.\nnextflow run openpipelines-bio/openpipeline \\\n  -r main_build -latest \\\n  -main-script target/nextflow/qc/multiqc/main.nf \\\n  --help\n\n\nRun command\n\n\nExample of params.yaml\n\n# Arguments\ninput: # please fill in - example: [\"input.txt\"]\n# output: \"$id.$key.output.output\"\n\n# Nextflow input-output arguments\npublish_dir: # please fill in - example: \"output/\"\n# param_list: \"my_params.yaml\"\n\nnextflow run openpipelines-bio/openpipeline \\\n  -r main_build -latest \\\n  -profile docker \\\n  -main-script target/nextflow/qc/multiqc/main.nf \\\n  -params-file params.yaml\n\n\n\n\n\n\nNote\n\n\n\nReplace -profile docker with -profile podman or -profile singularity depending on the desired backend."
  },
  {
    "objectID": "modules/module_qc_multiqc.html#argument-group",
    "href": "modules/module_qc_multiqc.html#argument-group",
    "title": "Multiqc",
    "section": "Argument group",
    "text": "Argument group\n\nArguments\n\n\n\n\n\n\n\n\nName\nDescription\nAttributes\n\n\n\n\n--input\nDescribe the input file.\nfile, required, example: \"input.txt\"\n\n\n--output\nDescribe the output file.\nfile, required, example: \"report\""
  },
  {
    "objectID": "modules/module_qc_multiqc.html#authors",
    "href": "modules/module_qc_multiqc.html#authors",
    "title": "Multiqc",
    "section": "Authors",
    "text": "Authors"
  },
  {
    "objectID": "modules/module_multiomics_cellranger_arc_count.html",
    "href": "modules/module_multiomics_cellranger_arc_count.html",
    "title": "Cellranger arc count",
    "section": "",
    "text": "ID: cellranger_arc_count\nNamespace: multiomics\n\n\n\nSource"
  },
  {
    "objectID": "modules/module_multiomics_cellranger_arc_count.html#example-commands",
    "href": "modules/module_multiomics_cellranger_arc_count.html#example-commands",
    "title": "Cellranger arc count",
    "section": "Example commands",
    "text": "Example commands\nYou can run the pipeline using nextflow run.\n\nView help\nYou can use --help as a parameter to get an overview of the possible parameters.\nnextflow run czbiohub/utilities \\\n  -r main_build -latest \\\n  -main-script target/nextflow/multiomics/cellranger_arc_count/main.nf \\\n  --help\n\n\nRun command\n\n\nExample of params.yaml\n\n\n\nnextflow run czbiohub/utilities \\\n  -r main_build -latest \\\n  -profile docker \\\n  -main-script target/nextflow/multiomics/cellranger_arc_count/main.nf \\\n  -params-file params.yaml\n\n\n\n\n\n\nNote\n\n\n\nReplace -profile docker with -profile podman or -profile singularity depending on the desired backend."
  },
  {
    "objectID": "modules/module_multiomics_cellranger_arc_count.html#argument-group",
    "href": "modules/module_multiomics_cellranger_arc_count.html#argument-group",
    "title": "Cellranger arc count",
    "section": "Argument group",
    "text": "Argument group\n\nArguments\n\n\n\n\n\n\n\n\nName\nDescription\nAttributes\n\n\n\n\n--libraries_path\nPath to the libraries\nfile, required, example: \"/path/to/libraries\"\n\n\n--reference_genome\nPath to the reference genome\nfile, required, example: \"/path/to/reference_genome\"\n\n\n--output\nPath to the output directory\nfile, required, example: \"/path/to/directory\"\n\n\n--run_id\nThe run ID\nstring, required\n\n\n--peaks\nPath to the bed file to use for peak calling\nfile, example: \"/path/to/bed\"\n\n\n--neurips\nUnknown\nboolean, default: FALSE"
  },
  {
    "objectID": "modules/module_multiomics_cellranger_arc_count.html#authors",
    "href": "modules/module_multiomics_cellranger_arc_count.html#authors",
    "title": "Cellranger arc count",
    "section": "Authors",
    "text": "Authors"
  },
  {
    "objectID": "modules/module_download_sync_test_resources.html",
    "href": "modules/module_download_sync_test_resources.html",
    "title": "Sync test resources",
    "section": "",
    "text": "ID: sync_test_resources\nNamespace: download\n\n\n\nSource"
  },
  {
    "objectID": "modules/module_download_sync_test_resources.html#example-commands",
    "href": "modules/module_download_sync_test_resources.html#example-commands",
    "title": "Sync test resources",
    "section": "Example commands",
    "text": "Example commands\nYou can run the pipeline using nextflow run.\n\nView help\nYou can use --help as a parameter to get an overview of the possible parameters.\nnextflow run openpipelines-bio/openpipeline \\\n  -r main_build -latest \\\n  -main-script target/nextflow/download/sync_test_resources/main.nf \\\n  --help\n\n\nRun command\n\n\nExample of params.yaml\n\n# Arguments\ninput: \"s3://openpipelines-data\"\n# output: \"$id.$key.output.output\"\nquiet: false\ndryrun: false\ndelete: false\n# exclude: [\"foo\"]\n\n# Nextflow input-output arguments\npublish_dir: # please fill in - example: \"output/\"\n# param_list: \"my_params.yaml\"\n\nnextflow run openpipelines-bio/openpipeline \\\n  -r main_build -latest \\\n  -profile docker \\\n  -main-script target/nextflow/download/sync_test_resources/main.nf \\\n  -params-file params.yaml\n\n\n\n\n\n\nNote\n\n\n\nReplace -profile docker with -profile podman or -profile singularity depending on the desired backend."
  },
  {
    "objectID": "modules/module_download_sync_test_resources.html#argument-group",
    "href": "modules/module_download_sync_test_resources.html#argument-group",
    "title": "Sync test resources",
    "section": "Argument group",
    "text": "Argument group\n\nArguments\n\n\n\n\n\n\n\n\nName\nDescription\nAttributes\n\n\n\n\n--input\nPath to the S3 bucket to sync from.\nstring, default: \"s3://openpipelines-data\"\n\n\n--output\nPath to the test resource directory.\nfile, default: \"resources_test\"\n\n\n--quiet\nDisplays the operations that would be performed using the specified command without actually running them.\nboolean_true\n\n\n--dryrun\nDoes not display the operations performed from the specified command.\nboolean_true\n\n\n--delete\nFiles that exist in the destination but not in the source are deleted during sync.\nboolean_true\n\n\n--exclude\nExclude all files or objects from the command that matches the specified pattern.\nstring"
  },
  {
    "objectID": "modules/module_download_sync_test_resources.html#authors",
    "href": "modules/module_download_sync_test_resources.html#authors",
    "title": "Sync test resources",
    "section": "Authors",
    "text": "Authors\n\nRobrecht Cannoodt   (maintainer)"
  },
  {
    "objectID": "modules/module_mapping_run_star_and_htseq.html",
    "href": "modules/module_mapping_run_star_and_htseq.html",
    "title": "Run star and htseq",
    "section": "",
    "text": "ID: run_star_and_htseq\nNamespace: mapping\n\n\n\nSource"
  },
  {
    "objectID": "modules/module_mapping_run_star_and_htseq.html#example-commands",
    "href": "modules/module_mapping_run_star_and_htseq.html#example-commands",
    "title": "Run star and htseq",
    "section": "Example commands",
    "text": "Example commands\nYou can run the pipeline using nextflow run.\n\nView help\nYou can use --help as a parameter to get an overview of the possible parameters.\nnextflow run czbiohub/utilities \\\n  -r main_build -latest \\\n  -main-script target/nextflow/mapping/run_star_and_htseq/main.nf \\\n  --help\n\n\nRun command\n\n\nExample of params.yaml\n\n\n\nnextflow run czbiohub/utilities \\\n  -r main_build -latest \\\n  -profile docker \\\n  -main-script target/nextflow/mapping/run_star_and_htseq/main.nf \\\n  -params-file params.yaml\n\n\n\n\n\n\nNote\n\n\n\nReplace -profile docker with -profile podman or -profile singularity depending on the desired backend."
  },
  {
    "objectID": "modules/module_mapping_run_star_and_htseq.html#argument-group",
    "href": "modules/module_mapping_run_star_and_htseq.html#argument-group",
    "title": "Run star and htseq",
    "section": "Argument group",
    "text": "Argument group\n\nArguments\n\n\n\n\n\n\n\n\nName\nDescription\nAttributes\n\n\n\n\n--taxon\nReference genome for mapping fun\nstring, required, example: \"homo\"\n\n\n--input\nPath to the directory containing the fastq.gz files to align\nfile, required, example: \"path/to/fastqs\"\n\n\n--output\nOutput folder\nfile, required\n\n\n--star_proc\nNumber of processes to give to each STAR run\ninteger, default: 16\n\n\n--num_partitions\nNumber of groups to divide samples into\ninteger, default: 10\n\n\n--partition_id\nIndex of sample group.\ninteger, default: 0\n\n\n--min_size\nMinimum file syze in bytes for a file to be realigned\ninteger, default: 50000"
  },
  {
    "objectID": "modules/module_mapping_run_star_and_htseq.html#authors",
    "href": "modules/module_mapping_run_star_and_htseq.html#authors",
    "title": "Run star and htseq",
    "section": "Authors",
    "text": "Authors"
  },
  {
    "objectID": "modules/module_compression_tar_extract.html",
    "href": "modules/module_compression_tar_extract.html",
    "title": "Tar extract",
    "section": "",
    "text": "ID: tar_extract\nNamespace: compression\n\n\n\nSource"
  },
  {
    "objectID": "modules/module_compression_tar_extract.html#example-commands",
    "href": "modules/module_compression_tar_extract.html#example-commands",
    "title": "Tar extract",
    "section": "Example commands",
    "text": "Example commands\nYou can run the pipeline using nextflow run.\n\nView help\nYou can use --help as a parameter to get an overview of the possible parameters.\nnextflow run openpipelines-bio/openpipeline \\\n  -r main_build -latest \\\n  -main-script target/nextflow/compression/tar_extract/main.nf \\\n  --help\n\n\nRun command\n\n\nExample of params.yaml\n\n# Arguments\ninput: # please fill in - example: \"input.tar.gz\"\n# output: \"$id.$key.output.output\"\n# strip_components: 1\n# exclude: \"docs/figures\"\n\n# Nextflow input-output arguments\npublish_dir: # please fill in - example: \"output/\"\n# param_list: \"my_params.yaml\"\n\nnextflow run openpipelines-bio/openpipeline \\\n  -r main_build -latest \\\n  -profile docker \\\n  -main-script target/nextflow/compression/tar_extract/main.nf \\\n  -params-file params.yaml\n\n\n\n\n\n\nNote\n\n\n\nReplace -profile docker with -profile podman or -profile singularity depending on the desired backend."
  },
  {
    "objectID": "modules/module_compression_tar_extract.html#argument-group",
    "href": "modules/module_compression_tar_extract.html#argument-group",
    "title": "Tar extract",
    "section": "Argument group",
    "text": "Argument group\n\nArguments\n\n\n\n\n\n\n\n\nName\nDescription\nAttributes\n\n\n\n\n--input\nInput file\nfile, required, example: \"input.tar.gz\"\n\n\n--output\nFolder to restore file(s) to.\nfile, required, example: \"output_folder\"\n\n\n--strip_components\nStrip this amount of leading components from file names on extraction. For example, to extract only ‘myfile.txt’ from an archive containing the structure this/goes/deep/myfile.txt', use 3 to strip 'this/goes/deep/'. |integer, example:1| |–exclude|Prevents any file or member whose name matches the shell wildcard (pattern) from being extracted.                                                                                                                        |string, example:“docs/figures”`"
  },
  {
    "objectID": "modules/module_compression_tar_extract.html#authors",
    "href": "modules/module_compression_tar_extract.html#authors",
    "title": "Tar extract",
    "section": "Authors",
    "text": "Authors"
  },
  {
    "objectID": "modules/module_demux_spaceranger_mkfastq.html",
    "href": "modules/module_demux_spaceranger_mkfastq.html",
    "title": "Spaceranger mkfastq",
    "section": "",
    "text": "ID: spaceranger_mkfastq\nNamespace: demux\n\n\n\nSource"
  },
  {
    "objectID": "modules/module_demux_spaceranger_mkfastq.html#example-commands",
    "href": "modules/module_demux_spaceranger_mkfastq.html#example-commands",
    "title": "Spaceranger mkfastq",
    "section": "Example commands",
    "text": "Example commands\nYou can run the pipeline using nextflow run.\n\nView help\nYou can use --help as a parameter to get an overview of the possible parameters.\nnextflow run czbiohub/utilities \\\n  -r main_build -latest \\\n  -main-script target/nextflow/demux/spaceranger_mkfastq/main.nf \\\n  --help\n\n\nRun command\n\n\nExample of params.yaml\n\n\n\nnextflow run czbiohub/utilities \\\n  -r main_build -latest \\\n  -profile docker \\\n  -main-script target/nextflow/demux/spaceranger_mkfastq/main.nf \\\n  -params-file params.yaml\n\n\n\n\n\n\nNote\n\n\n\nReplace -profile docker with -profile podman or -profile singularity depending on the desired backend."
  },
  {
    "objectID": "modules/module_demux_spaceranger_mkfastq.html#argument-group",
    "href": "modules/module_demux_spaceranger_mkfastq.html#argument-group",
    "title": "Spaceranger mkfastq",
    "section": "Argument group",
    "text": "Argument group\n\nArguments\n\n\n\n\n\n\n\n\nName\nDescription\nAttributes\n\n\n\n\n--input\nPath to the untarred BCL files.\nfile, required, example: \"/path/to/bcl\"\n\n\n--sample_sheet\nThe path to the sample sheet.\nfile, example: \"SampleSheet.csv\"\n\n\n--output\nThe folder to store the demux results\nfile, required, example: \"/path/to/output\""
  },
  {
    "objectID": "modules/module_demux_spaceranger_mkfastq.html#authors",
    "href": "modules/module_demux_spaceranger_mkfastq.html#authors",
    "title": "Spaceranger mkfastq",
    "section": "Authors",
    "text": "Authors"
  },
  {
    "objectID": "modules/module_dataflow_concat.html",
    "href": "modules/module_dataflow_concat.html",
    "title": "Concat",
    "section": "",
    "text": "ID: concat\nNamespace: dataflow\n\n\n\nSource"
  },
  {
    "objectID": "modules/module_dataflow_concat.html#example-commands",
    "href": "modules/module_dataflow_concat.html#example-commands",
    "title": "Concat",
    "section": "Example commands",
    "text": "Example commands\nYou can run the pipeline using nextflow run.\n\nView help\nYou can use --help as a parameter to get an overview of the possible parameters.\nnextflow run openpipelines-bio/openpipeline \\\n  -r main_build -latest \\\n  -main-script target/nextflow/dataflow/concat/main.nf \\\n  --help\n\n\nRun command\n\n\nExample of params.yaml\n\n# Arguments\ninput: # please fill in - example: [\"sample_paths\"]\ninput_id: # please fill in - example: [\"foo\"]\n# output: \"$id.$key.output.h5mu\"\nobs_sample_name: \"sample_id\"\ncompression: \"gzip\"\nother_axis_mode: \"move\"\n\n# Nextflow input-output arguments\npublish_dir: # please fill in - example: \"output/\"\n# param_list: \"my_params.yaml\"\n\nnextflow run openpipelines-bio/openpipeline \\\n  -r main_build -latest \\\n  -profile docker \\\n  -main-script target/nextflow/dataflow/concat/main.nf \\\n  -params-file params.yaml\n\n\n\n\n\n\nNote\n\n\n\nReplace -profile docker with -profile podman or -profile singularity depending on the desired backend."
  },
  {
    "objectID": "modules/module_dataflow_concat.html#argument-group",
    "href": "modules/module_dataflow_concat.html#argument-group",
    "title": "Concat",
    "section": "Argument group",
    "text": "Argument group\n\nArguments\n\n\n\n\n\n\n\n\nName\nDescription\nAttributes\n\n\n\n\n--input\nPaths to the different samples to be concatenated.\nfile, required, example: \"sample_paths\"\n\n\n--input_id\nNames of the different samples that have to be concatenated. Must be specified when using ‘–mode move’. In this case, the ids will be used for the columns names of the dataframes registring the conflicts. If specified, must be of same length as --input.\nstring, required\n\n\n--obs_sample_name\nName of the .obs key under which to add the sample names.\nstring, default: \"sample_id\"\n\n\n--compression\nThe compression format to be used on the final h5mu object.\nstring, default: \"gzip\"\n\n\n--other_axis_mode\nHow to handle the merging of other axis (var, obs, …). - None: keep no data - same: only keep elements of the matrices which are the same in each of the samples - unique: only keep elements for which there is only 1 possible value (1 value that can occur in multiple samples) - first: keep the annotation from the first sample - only: keep elements that show up in only one of the objects (1 unique element in only 1 sample) - move: identical to ‘same’, but moving the conflicting values to .varm or .obsm\nstring, default: \"move\""
  },
  {
    "objectID": "modules/module_dataflow_concat.html#authors",
    "href": "modules/module_dataflow_concat.html#authors",
    "title": "Concat",
    "section": "Authors",
    "text": "Authors\n\nDries Schaumont   (maintainer)"
  },
  {
    "objectID": "modules/module_filter_filter_with_scrublet.html",
    "href": "modules/module_filter_filter_with_scrublet.html",
    "title": "Filter with scrublet",
    "section": "",
    "text": "ID: filter_with_scrublet\nNamespace: filter\n\n\n\nSource\nThe method tests for potential doublets by using the expression profiles of cells to generate synthetic potential doubles which are tested against cells. The method returns a “doublet score” on which it calls for potential doublets.\nFor the source code please visit https://github.com/AllonKleinLab/scrublet.\nFor 10x we expect the doublet rates to be: Multiplet Rate (%) - # of Cells Loaded - # of Cells Recovered ~0.4% ~800 ~500 ~0.8% ~1,600 ~1,000 ~1.6% ~3,200 ~2,000 ~2.3% ~4,800 ~3,000 ~3.1% ~6,400 ~4,000 ~3.9% ~8,000 ~5,000 ~4.6% ~9,600 ~6,000 ~5.4% ~11,200 ~7,000 ~6.1% ~12,800 ~8,000 ~6.9% ~14,400 ~9,000 ~7.6% ~16,000 ~10,000"
  },
  {
    "objectID": "modules/module_filter_filter_with_scrublet.html#example-commands",
    "href": "modules/module_filter_filter_with_scrublet.html#example-commands",
    "title": "Filter with scrublet",
    "section": "Example commands",
    "text": "Example commands\nYou can run the pipeline using nextflow run.\n\nView help\nYou can use --help as a parameter to get an overview of the possible parameters.\nnextflow run openpipelines-bio/openpipeline \\\n  -r main_build -latest \\\n  -main-script target/nextflow/filter/filter_with_scrublet/main.nf \\\n  --help\n\n\nRun command\n\n\nExample of params.yaml\n\n# Arguments\ninput: # please fill in - example: \"input.h5mu\"\nmodality: \"rna\"\n# output: \"$id.$key.output.h5mu\"\nobs_name_filter: \"filter_with_scrublet\"\ndo_subset: false\nobs_name_doublet_score: \"scrublet_doublet_score\"\nmin_counts: 2\nmin_cells: 3\nmin_gene_variablity_percent: 85\nnum_pca_components: 30\ndistance_metric: \"euclidean\"\n\n# Nextflow input-output arguments\npublish_dir: # please fill in - example: \"output/\"\n# param_list: \"my_params.yaml\"\n\nnextflow run openpipelines-bio/openpipeline \\\n  -r main_build -latest \\\n  -profile docker \\\n  -main-script target/nextflow/filter/filter_with_scrublet/main.nf \\\n  -params-file params.yaml\n\n\n\n\n\n\nNote\n\n\n\nReplace -profile docker with -profile podman or -profile singularity depending on the desired backend."
  },
  {
    "objectID": "modules/module_filter_filter_with_scrublet.html#argument-group",
    "href": "modules/module_filter_filter_with_scrublet.html#argument-group",
    "title": "Filter with scrublet",
    "section": "Argument group",
    "text": "Argument group\n\nArguments\n\n\n\n\n\n\n\n\nName\nDescription\nAttributes\n\n\n\n\n--input\nInput h5mu file\nfile, required, example: \"input.h5mu\"\n\n\n--output\nOutput h5mu file.\nfile, example: \"output.h5mu\"\n\n\n--obs_name_filter\nIn which .obs slot to store a boolean array corresponding to which observations should be filtered out.\nstring, default: \"filter_with_scrublet\"\n\n\n--do_subset\nWhether to subset before storing the output.\nboolean_true\n\n\n--obs_name_doublet_score\nName of the doublet scores column in the obs slot of the returned object.\nstring, default: \"scrublet_doublet_score\"\n\n\n--min_counts\nThe number of minimal UMI counts per cell that have to be present for initial cell detection.\ninteger, default: 2\n\n\n--min_cells\nThe number of cells in which UMIs for a gene were detected.\ninteger, default: 3\n\n\n--min_gene_variablity_percent\nUsed for gene filtering prior to PCA. Keep the most highly variable genes (in the top min_gene_variability_pctl percentile), as measured by the v-statistic [Klein et al., Cell 2015].\ndouble, default: 85\n\n\n--num_pca_components\nNumber of principal components to use during PCA dimensionality reduction.\ninteger, default: 30\n\n\n--distance_metric\nThe distance metric used for computing similarities.\nstring, default: \"euclidean\""
  },
  {
    "objectID": "modules/module_filter_filter_with_scrublet.html#authors",
    "href": "modules/module_filter_filter_with_scrublet.html#authors",
    "title": "Filter with scrublet",
    "section": "Authors",
    "text": "Authors\n\nDries De Maeyer  (contributor)\nRobrecht Cannoodt   (maintainer, contributor)"
  },
  {
    "objectID": "modules/module_reference_build_cellranger_reference.html",
    "href": "modules/module_reference_build_cellranger_reference.html",
    "title": "Build cellranger reference",
    "section": "",
    "text": "ID: build_cellranger_reference\nNamespace: reference\n\n\n\nSource\nCreates a new folder named after the genome."
  },
  {
    "objectID": "modules/module_reference_build_cellranger_reference.html#example-commands",
    "href": "modules/module_reference_build_cellranger_reference.html#example-commands",
    "title": "Build cellranger reference",
    "section": "Example commands",
    "text": "Example commands\nYou can run the pipeline using nextflow run.\n\nView help\nYou can use --help as a parameter to get an overview of the possible parameters.\nnextflow run openpipelines-bio/openpipeline \\\n  -r main_build -latest \\\n  -main-script target/nextflow/reference/build_cellranger_reference/main.nf \\\n  --help\n\n\nRun command\n\n\nExample of params.yaml\n\n# Arguments\ngenome_fasta: # please fill in - example: \"genome_sequence.fa.gz\"\ntranscriptome_gtf: # please fill in - example: \"transcriptome_annotation.gtf.gz\"\n# output: \"$id.$key.output.output\"\n\n# Nextflow input-output arguments\npublish_dir: # please fill in - example: \"output/\"\n# param_list: \"my_params.yaml\"\n\nnextflow run openpipelines-bio/openpipeline \\\n  -r main_build -latest \\\n  -profile docker \\\n  -main-script target/nextflow/reference/build_cellranger_reference/main.nf \\\n  -params-file params.yaml\n\n\n\n\n\n\nNote\n\n\n\nReplace -profile docker with -profile podman or -profile singularity depending on the desired backend."
  },
  {
    "objectID": "modules/module_reference_build_cellranger_reference.html#argument-group",
    "href": "modules/module_reference_build_cellranger_reference.html#argument-group",
    "title": "Build cellranger reference",
    "section": "Argument group",
    "text": "Argument group\n\nArguments\n\n\n\n\n\n\n\n\nName\nDescription\nAttributes\n\n\n\n\n--genome_fasta\nReference genome fasta.\nfile, required, example: \"genome_sequence.fa.gz\"\n\n\n--transcriptome_gtf\nReference transcriptome annotation.\nfile, required, example: \"transcriptome_annotation.gtf.gz\"\n\n\n--output\nOutput folder\nfile, required, example: \"cellranger_reference\""
  },
  {
    "objectID": "modules/module_reference_build_cellranger_reference.html#authors",
    "href": "modules/module_reference_build_cellranger_reference.html#authors",
    "title": "Build cellranger reference",
    "section": "Authors",
    "text": "Authors\n\nAngela Pisco   (author)\nRobrecht Cannoodt   (author, maintainer)"
  },
  {
    "objectID": "modules/workflow_multiomics_rna_multisample.html",
    "href": "modules/workflow_multiomics_rna_multisample.html",
    "title": "Rna multisample",
    "section": "",
    "text": "ID: rna_multisample\nNamespace: multiomics\n\n\n\nSource"
  },
  {
    "objectID": "modules/workflow_multiomics_rna_multisample.html#example-commands",
    "href": "modules/workflow_multiomics_rna_multisample.html#example-commands",
    "title": "Rna multisample",
    "section": "Example commands",
    "text": "Example commands\nYou can run the pipeline using nextflow run.\n\nView help\nYou can use --help as a parameter to get an overview of the possible parameters.\nnextflow run openpipelines-bio/openpipeline \\\n  -r main_build -latest \\\n  -main-script workflows/multiomics/rna_multisample/main.nf \\\n  --help\n\n\nRun command\n\n\nExample of params.yaml\n\n# Arguments\nid: # please fill in - example: \"concatenated\"\nsample_id: # please fill in - example: [\"foo\"]\ninput: # please fill in - example: [\"dataset.h5mu\"]\n\n# Nextflow input-output arguments\npublish_dir: # please fill in - example: \"output/\"\n# param_list: \"my_params.yaml\"\n\nnextflow run openpipelines-bio/openpipeline \\\n  -r main_build -latest \\\n  -profile docker \\\n  -main-script workflows/multiomics/rna_multisample/main.nf \\\n  -params-file params.yaml\n\n\n\n\n\n\nNote\n\n\n\nReplace -profile docker with -profile podman or -profile singularity depending on the desired backend."
  },
  {
    "objectID": "modules/workflow_multiomics_rna_multisample.html#argument-group",
    "href": "modules/workflow_multiomics_rna_multisample.html#argument-group",
    "title": "Rna multisample",
    "section": "Argument group",
    "text": "Argument group\n\nArguments\n\n\n\n\n\n\n\n\nName\nDescription\nAttributes\n\n\n\n\n--id\nID of the concatenated file\nstring, required, example: \"concatenated\"\n\n\n--sample_id\nIDs of the sample.\nstring, required, example: \"foo\"\n\n\n--input\nPath to the samples.\nfile, required, example: \"dataset.h5mu\""
  },
  {
    "objectID": "modules/workflow_multiomics_rna_multisample.html#authors",
    "href": "modules/workflow_multiomics_rna_multisample.html#authors",
    "title": "Rna multisample",
    "section": "Authors",
    "text": "Authors\n\nDries De Maeyer  (author)\nRobrecht Cannoodt   (author, maintainer)\nDries Schaumont   (author)"
  },
  {
    "objectID": "modules/workflow_multiomics_rna_multisample.html#visualisation",
    "href": "modules/workflow_multiomics_rna_multisample.html#visualisation",
    "title": "Rna multisample",
    "section": "Visualisation",
    "text": "Visualisation\n\n\n\n\nflowchart LR\n    p0(Input)\n    p8(concat)\n    p15(normalize_total)\n    p22(log1p)\n    p29(delete_layer)\n    p37(filter_with_hvg)\n    p43(Output)\n    p0-->p8\n    p8-->p15\n    p15-->p22\n    p22-->p29\n    p29-->p37\n    p37-->p43"
  },
  {
    "objectID": "modules/module_dimred_umap.html",
    "href": "modules/module_dimred_umap.html",
    "title": "Umap",
    "section": "",
    "text": "ID: umap\nNamespace: dimred\n\n\n\nSource\nBesides tending to be faster than tSNE, it optimizes the embedding such that it best reflects the topology of the data, which we represent throughout Scanpy using a neighborhood graph. tSNE, by contrast, optimizes the distribution of nearest-neighbor distances in the embedding such that these best match the distribution of distances in the high-dimensional space. We use the implementation of umap-learn [McInnes18]. For a few comparisons of UMAP with tSNE, see this preprint"
  },
  {
    "objectID": "modules/module_dimred_umap.html#example-commands",
    "href": "modules/module_dimred_umap.html#example-commands",
    "title": "Umap",
    "section": "Example commands",
    "text": "Example commands\nYou can run the pipeline using nextflow run.\n\nView help\nYou can use --help as a parameter to get an overview of the possible parameters.\nnextflow run openpipelines-bio/openpipeline \\\n  -r main_build -latest \\\n  -main-script target/nextflow/dimred/umap/main.nf \\\n  --help\n\n\nRun command\n\n\nExample of params.yaml\n\n# Inputs\ninput: # please fill in - example: \"input.h5mu\"\nmodality: \"rna\"\nuns_neighbors: \"neighbors\"\n\n# Outputs\n# output: \"$id.$key.output.h5mu\"\nobsm_output: \"umap\"\n\n# Arguments\nmin_dist: 0.5\nspread: 1.0\nnum_components: 2\n# max_iter: 123\nalpha: 1.0\ngamma: 1.0\nnegative_sample_rate: 5\ninit_pos: \"spectral\"\n\n# Nextflow input-output arguments\npublish_dir: # please fill in - example: \"output/\"\n# param_list: \"my_params.yaml\"\n\nnextflow run openpipelines-bio/openpipeline \\\n  -r main_build -latest \\\n  -profile docker \\\n  -main-script target/nextflow/dimred/umap/main.nf \\\n  -params-file params.yaml\n\n\n\n\n\n\nNote\n\n\n\nReplace -profile docker with -profile podman or -profile singularity depending on the desired backend."
  },
  {
    "objectID": "modules/module_dimred_umap.html#argument-groups",
    "href": "modules/module_dimred_umap.html#argument-groups",
    "title": "Umap",
    "section": "Argument groups",
    "text": "Argument groups\n\nInputs\n\n\n\n\n\n\n\n\nName\nDescription\nAttributes\n\n\n\n\n--input\nInput h5mu file\nfile, required, example: \"input.h5mu\"\n\n\n--uns_neighbors\nThe .uns neighbors slot as output by the find_neighbors component.\nstring, default: \"neighbors\"\n\n\n\n\n\nOutputs\n\n\n\n\n\n\n\n\nName\nDescription\nAttributes\n\n\n\n\n--output\nOutput h5mu file.\nfile, required, example: \"output.h5mu\"\n\n\n--obsm_output\nThe pre/postfix under which to store the UMAP results.\nstring, default: \"umap\"\n\n\n\n\n\nArguments\n\n\n\n\n\n\n\n\nName\nDescription\nAttributes\n\n\n\n\n--min_dist\nThe effective minimum distance between embedded points. Smaller values will result in a more clustered/clumped embedding where nearby points on the manifold are drawn closer together, while larger values will result on a more even dispersal of points. The value should be set relative to the spread value, which determines the scale at which embedded points will be spread out.\ndouble, default: 0.5\n\n\n--spread\nThe effective scale of embedded points. In combination with min_dist this determines how clustered/clumped the embedded points are.\ndouble, default: 1\n\n\n--num_components\nThe number of dimensions of the embedding.\ninteger, default: 2\n\n\n--max_iter\nThe number of iterations (epochs) of the optimization. Called n_epochs in the original UMAP. Default is set to 500 if neighbors[‘connectivities’].shape[0] <= 10000, else 200.\ninteger\n\n\n--alpha\nThe initial learning rate for the embedding optimization.\ndouble, default: 1\n\n\n--gamma\nWeighting applied to negative samples in low dimensional embedding optimization. Values higher than one will result in greater weight being given to negative samples.\ndouble, default: 1\n\n\n--negative_sample_rate\nThe number of negative edge/1-simplex samples to use per positive edge/1-simplex sample in optimizing the low dimensional embedding.\ninteger, default: 5\n\n\n--init_pos\nHow to initialize the low dimensional embedding. Called init in the original UMAP. Options are: * Any key from .obsm * 'paga': positions from paga() * 'spectral': use a spectral embedding of the graph * 'random': assign initial embedding positions at random.\nstring, default: \"spectral\""
  },
  {
    "objectID": "modules/module_dimred_umap.html#authors",
    "href": "modules/module_dimred_umap.html#authors",
    "title": "Umap",
    "section": "Authors",
    "text": "Authors\n\nDries De Maeyer  (maintainer)"
  },
  {
    "objectID": "modules/module_filter_filter_with_hvg.html",
    "href": "modules/module_filter_filter_with_hvg.html",
    "title": "Filter with hvg",
    "section": "",
    "text": "ID: filter_with_hvg\nNamespace: filter\n\n\n\nSource\nExpects logarithmized data, except when flavor=‘seurat_v3’ in which count data is expected.\nDepending on flavor, this reproduces the R-implementations of Seurat [Satija15], Cell Ranger [Zheng17], and Seurat v3 [Stuart19].\nFor the dispersion-based methods ([Satija15] and [Zheng17]), the normalized dispersion is obtained by scaling with the mean and standard deviation of the dispersions for genes falling into a given bin for mean expression of genes. This means that for each bin of mean expression, highly variable genes are selected.\nFor [Stuart19], a normalized variance for each gene is computed. First, the data are standardized (i.e., z-score normalization per feature) with a regularized standard deviation. Next, the normalized variance is computed as the variance of each gene after the transformation. Genes are ranked by the normalized variance."
  },
  {
    "objectID": "modules/module_filter_filter_with_hvg.html#example-commands",
    "href": "modules/module_filter_filter_with_hvg.html#example-commands",
    "title": "Filter with hvg",
    "section": "Example commands",
    "text": "Example commands\nYou can run the pipeline using nextflow run.\n\nView help\nYou can use --help as a parameter to get an overview of the possible parameters.\nnextflow run openpipelines-bio/openpipeline \\\n  -r main_build -latest \\\n  -main-script target/nextflow/filter/filter_with_hvg/main.nf \\\n  --help\n\n\nRun command\n\n\nExample of params.yaml\n\n# Arguments\ninput: # please fill in - example: \"input.h5mu\"\nmodality: \"rna\"\n# layer: \"foo\"\n# output: \"$id.$key.output.h5mu\"\nvar_name_filter: \"filter_with_hvg\"\nvarm_name: \"hvg\"\ndo_subset: false\nflavor: \"seurat\"\n# n_top_genes: 123\nmin_mean: 0.0125\nmax_mean: 3\nmin_disp: 0.5\n# max_disp: 123.0\nspan: 0.3\nn_bins: 20\n# obs_batch_key: \"foo\"\n\n# Nextflow input-output arguments\npublish_dir: # please fill in - example: \"output/\"\n# param_list: \"my_params.yaml\"\n\nnextflow run openpipelines-bio/openpipeline \\\n  -r main_build -latest \\\n  -profile docker \\\n  -main-script target/nextflow/filter/filter_with_hvg/main.nf \\\n  -params-file params.yaml\n\n\n\n\n\n\nNote\n\n\n\nReplace -profile docker with -profile podman or -profile singularity depending on the desired backend."
  },
  {
    "objectID": "modules/module_filter_filter_with_hvg.html#argument-group",
    "href": "modules/module_filter_filter_with_hvg.html#argument-group",
    "title": "Filter with hvg",
    "section": "Argument group",
    "text": "Argument group\n\nArguments\n\n\n\n\n\n\n\n\nName\nDescription\nAttributes\n\n\n\n\n--input\nInput h5mu file\nfile, required, example: \"input.h5mu\"\n\n\n--layer\nuse adata.layers[layer] for expression values instead of adata.X.\nstring\n\n\n--output\nOutput h5mu file.\nfile, example: \"output.h5mu\"\n\n\n--var_name_filter\nIn which .var slot to store a boolean array corresponding to which observations should be filtered out.\nstring, default: \"filter_with_hvg\"\n\n\n--varm_name\nIn which .varm slot to store additional metadata.\nstring, default: \"hvg\"\n\n\n--do_subset\nWhether to subset before storing the output.\nboolean_true\n\n\n--flavor\nChoose the flavor for identifying highly variable genes. For the dispersion based methods in their default workflows, Seurat passes the cutoffs whereas Cell Ranger passes n_top_genes.\nstring, default: \"seurat\"\n\n\n--n_top_genes\nNumber of highly-variable genes to keep. Mandatory if flavor=‘seurat_v3’.\ninteger\n\n\n--min_mean\nIf n_top_genes is defined, this and all other cutoffs for the means and the normalized dispersions are ignored. Ignored if flavor=‘seurat_v3’.\ndouble, default: 0.0125\n\n\n--max_mean\nIf n_top_genes is defined, this and all other cutoffs for the means and the normalized dispersions are ignored. Ignored if flavor=‘seurat_v3’.\ndouble, default: 3\n\n\n--min_disp\nIf n_top_genes is defined, this and all other cutoffs for the means and the normalized dispersions are ignored. Ignored if flavor=‘seurat_v3’.\ndouble, default: 0.5\n\n\n--max_disp\nIf n_top_genes is defined, this and all other cutoffs for the means and the normalized dispersions are ignored. Ignored if flavor=‘seurat_v3’. Default is +inf.\ndouble\n\n\n--span\nThe fraction of the data (cells) used when estimating the variance in the loess model fit if flavor=‘seurat_v3’.\ndouble, default: 0.3\n\n\n--n_bins\nNumber of bins for binning the mean gene expression. Normalization is done with respect to each bin. If just a single gene falls into a bin, the normalized dispersion is artificially set to 1.\ninteger, default: 20\n\n\n--obs_batch_key\nIf specified, highly-variable genes are selected within each batch separately and merged. This simple process avoids the selection of batch-specific genes and acts as a lightweight batch correction method. For all flavors, genes are first sorted by how many batches they are a HVG. For dispersion-based flavors ties are broken by normalized dispersion. If flavor = ‘seurat_v3’, ties are broken by the median (across batches) rank based on within-batch normalized variance.\nstring"
  },
  {
    "objectID": "modules/module_filter_filter_with_hvg.html#authors",
    "href": "modules/module_filter_filter_with_hvg.html#authors",
    "title": "Filter with hvg",
    "section": "Authors",
    "text": "Authors\n\nDries De Maeyer  (contributor)\nRobrecht Cannoodt   (maintainer, contributor)"
  },
  {
    "objectID": "modules/module_multiomics_cellranger_cite_seq.html",
    "href": "modules/module_multiomics_cellranger_cite_seq.html",
    "title": "Cellranger cite seq",
    "section": "",
    "text": "ID: cellranger_cite_seq\nNamespace: multiomics\n\n\n\nSource"
  },
  {
    "objectID": "modules/module_multiomics_cellranger_cite_seq.html#example-commands",
    "href": "modules/module_multiomics_cellranger_cite_seq.html#example-commands",
    "title": "Cellranger cite seq",
    "section": "Example commands",
    "text": "Example commands\nYou can run the pipeline using nextflow run.\n\nView help\nYou can use --help as a parameter to get an overview of the possible parameters.\nnextflow run czbiohub/utilities \\\n  -r main_build -latest \\\n  -main-script target/nextflow/multiomics/cellranger_cite_seq/main.nf \\\n  --help\n\n\nRun command\n\n\nExample of params.yaml\n\n\n\nnextflow run czbiohub/utilities \\\n  -r main_build -latest \\\n  -profile docker \\\n  -main-script target/nextflow/multiomics/cellranger_cite_seq/main.nf \\\n  -params-file params.yaml\n\n\n\n\n\n\nNote\n\n\n\nReplace -profile docker with -profile podman or -profile singularity depending on the desired backend."
  },
  {
    "objectID": "modules/module_multiomics_cellranger_cite_seq.html#argument-group",
    "href": "modules/module_multiomics_cellranger_cite_seq.html#argument-group",
    "title": "Cellranger cite seq",
    "section": "Argument group",
    "text": "Argument group\n\nArguments\n\n\n\n\n\n\n\n\nName\nDescription\nAttributes\n\n\n\n\n--libraries_path\nPath to the libraries\nfile, required, example: \"/path/to/libraries\"\n\n\n--reference_genome\nPath to the reference genome\nfile, required, example: \"/path/to/reference_genome\"\n\n\n--output\nPath to the output directory\nfile, required, example: \"/path/to/directory\"\n\n\n--run_id\nThe run ID\nstring, required\n\n\n--peaks\nPath to the bed file to use for peak calling\nfile, example: \"/path/to/bed\"\n\n\n--neurips\nUnknown\nboolean, default: FALSE"
  },
  {
    "objectID": "modules/module_multiomics_cellranger_cite_seq.html#authors",
    "href": "modules/module_multiomics_cellranger_cite_seq.html#authors",
    "title": "Cellranger cite seq",
    "section": "Authors",
    "text": "Authors"
  },
  {
    "objectID": "modules/module_convert_from_velocyto_to_h5mu.html",
    "href": "modules/module_convert_from_velocyto_to_h5mu.html",
    "title": "From velocyto to h5mu",
    "section": "",
    "text": "ID: from_velocyto_to_h5mu\nNamespace: convert\n\n\n\nSource"
  },
  {
    "objectID": "modules/module_convert_from_velocyto_to_h5mu.html#example-commands",
    "href": "modules/module_convert_from_velocyto_to_h5mu.html#example-commands",
    "title": "From velocyto to h5mu",
    "section": "Example commands",
    "text": "Example commands\nYou can run the pipeline using nextflow run.\n\nView help\nYou can use --help as a parameter to get an overview of the possible parameters.\nnextflow run openpipelines-bio/openpipeline \\\n  -r main_build -latest \\\n  -main-script target/nextflow/convert/from_velocyto_to_h5mu/main.nf \\\n  --help\n\n\nRun command\n\n\nExample of params.yaml\n\n# Arguments\ninput: # please fill in - example: \"input.loom\"\n# output: \"$id.$key.output.h5mu\"\n\n# Nextflow input-output arguments\npublish_dir: # please fill in - example: \"output/\"\n# param_list: \"my_params.yaml\"\n\nnextflow run openpipelines-bio/openpipeline \\\n  -r main_build -latest \\\n  -profile docker \\\n  -main-script target/nextflow/convert/from_velocyto_to_h5mu/main.nf \\\n  -params-file params.yaml\n\n\n\n\n\n\nNote\n\n\n\nReplace -profile docker with -profile podman or -profile singularity depending on the desired backend."
  },
  {
    "objectID": "modules/module_convert_from_velocyto_to_h5mu.html#argument-group",
    "href": "modules/module_convert_from_velocyto_to_h5mu.html#argument-group",
    "title": "From velocyto to h5mu",
    "section": "Argument group",
    "text": "Argument group\n\nArguments\n\n\n\n\n\n\n\n\nName\nDescription\nAttributes\n\n\n\n\n--input\nInput velocyto .loom file.\nfile, required, example: \"input.loom\"\n\n\n--output\nOutput h5mu file.\nfile, example: \"output.h5mu\""
  },
  {
    "objectID": "modules/module_convert_from_velocyto_to_h5mu.html#authors",
    "href": "modules/module_convert_from_velocyto_to_h5mu.html#authors",
    "title": "From velocyto to h5mu",
    "section": "Authors",
    "text": "Authors\n\nDries Schaumont   (maintainer)"
  },
  {
    "objectID": "modules/module_mapping_cellranger_count_split.html",
    "href": "modules/module_mapping_cellranger_count_split.html",
    "title": "Cellranger count split",
    "section": "",
    "text": "ID: cellranger_count_split\nNamespace: mapping\n\n\n\nSource"
  },
  {
    "objectID": "modules/module_mapping_cellranger_count_split.html#example-commands",
    "href": "modules/module_mapping_cellranger_count_split.html#example-commands",
    "title": "Cellranger count split",
    "section": "Example commands",
    "text": "Example commands\nYou can run the pipeline using nextflow run.\n\nView help\nYou can use --help as a parameter to get an overview of the possible parameters.\nnextflow run openpipelines-bio/openpipeline \\\n  -r main_build -latest \\\n  -main-script target/nextflow/mapping/cellranger_count_split/main.nf \\\n  --help\n\n\nRun command\n\n\nExample of params.yaml\n\n# Arguments\ninput: # please fill in - example: \"input_dir\"\n# filtered_h5: \"$id.$key.filtered_h5.h5\"\n# metrics_summary: \"$id.$key.metrics_summary.csv\"\n# molecule_info: \"$id.$key.molecule_info.h5\"\n# bam: \"$id.$key.bam.bam\"\n# bai: \"$id.$key.bai.bai\"\n# raw_h5: \"$id.$key.raw_h5.h5\"\n\n# Nextflow input-output arguments\npublish_dir: # please fill in - example: \"output/\"\n# param_list: \"my_params.yaml\"\n\nnextflow run openpipelines-bio/openpipeline \\\n  -r main_build -latest \\\n  -profile docker \\\n  -main-script target/nextflow/mapping/cellranger_count_split/main.nf \\\n  -params-file params.yaml\n\n\n\n\n\n\nNote\n\n\n\nReplace -profile docker with -profile podman or -profile singularity depending on the desired backend."
  },
  {
    "objectID": "modules/module_mapping_cellranger_count_split.html#argument-group",
    "href": "modules/module_mapping_cellranger_count_split.html#argument-group",
    "title": "Cellranger count split",
    "section": "Argument group",
    "text": "Argument group\n\nArguments\n\n\n\n\n\n\n\n\nName\nDescription\nAttributes\n\n\n\n\n--input\nOutput directory from a Cell Ranger count run.\nfile, required, example: \"input_dir\""
  },
  {
    "objectID": "modules/module_mapping_cellranger_count_split.html#authors",
    "href": "modules/module_mapping_cellranger_count_split.html#authors",
    "title": "Cellranger count split",
    "section": "Authors",
    "text": "Authors\n\nAngela Pisco   (author)\nSamuel D’Souza  (author)\nRobrecht Cannoodt   (author, maintainer)"
  },
  {
    "objectID": "modules/workflow_multiomics_full_pipeline.html",
    "href": "modules/workflow_multiomics_full_pipeline.html",
    "title": "Full pipeline",
    "section": "",
    "text": "ID: full_pipeline\nNamespace: multiomics\n\n\n\nSource"
  },
  {
    "objectID": "modules/workflow_multiomics_full_pipeline.html#example-commands",
    "href": "modules/workflow_multiomics_full_pipeline.html#example-commands",
    "title": "Full pipeline",
    "section": "Example commands",
    "text": "Example commands\nYou can run the pipeline using nextflow run.\n\nView help\nYou can use --help as a parameter to get an overview of the possible parameters.\nnextflow run openpipelines-bio/openpipeline \\\n  -r main_build -latest \\\n  -main-script workflows/multiomics/full_pipeline/main.nf \\\n  --help\n\n\nRun command\n\n\nExample of params.yaml\n\n# Inputs\nid: # please fill in - example: \"foo\"\ninput: # please fill in - example: \"input.h5mu\"\nobs_covariates: # please fill in - example: [\"batch\", \"sample\"]\n\n# Nextflow input-output arguments\npublish_dir: # please fill in - example: \"output/\"\n# param_list: \"my_params.yaml\"\n\nnextflow run openpipelines-bio/openpipeline \\\n  -r main_build -latest \\\n  -profile docker \\\n  -main-script workflows/multiomics/full_pipeline/main.nf \\\n  -params-file params.yaml\n\n\n\n\n\n\nNote\n\n\n\nReplace -profile docker with -profile podman or -profile singularity depending on the desired backend."
  },
  {
    "objectID": "modules/workflow_multiomics_full_pipeline.html#argument-group",
    "href": "modules/workflow_multiomics_full_pipeline.html#argument-group",
    "title": "Full pipeline",
    "section": "Argument group",
    "text": "Argument group\n\nInputs\n\n\n\n\n\n\n\n\nName\nDescription\nAttributes\n\n\n\n\n--id\nID of the sample.\nstring, required, example: \"foo\"\n\n\n--input\nPath to the sample.\nfile, required, example: \"input.h5mu\"\n\n\n--obs_covariates\nThe .obs field(s) that define the covariate(s) to regress out.\nstring, required, example: \"batch\", example: \"sample\""
  },
  {
    "objectID": "modules/workflow_multiomics_full_pipeline.html#authors",
    "href": "modules/workflow_multiomics_full_pipeline.html#authors",
    "title": "Full pipeline",
    "section": "Authors",
    "text": "Authors\n\nDries Schaumont   (author, maintainer)"
  },
  {
    "objectID": "modules/workflow_multiomics_full_pipeline.html#visualisation",
    "href": "modules/workflow_multiomics_full_pipeline.html#visualisation",
    "title": "Full pipeline",
    "section": "Visualisation",
    "text": "Visualisation\n\n\n\n\nflowchart LR\n    p0(Input)\n    p8(add_id)\n    p15(split_modalities)\n    p18(flatMap)\n    p19(filter)\n    p25(filter_with_counts)\n    p32(do_filter)\n    p40(filter_with_scrublet)\n    p43(toSortedList)\n    p44(filter)\n    p51(concat)\n    p58(normalize_total)\n    p65(log1p)\n    p72(delete_layer)\n    p80(filter_with_hvg)\n    p105(concat)\n    p83(filter)\n    p84(toSortedList)\n    p85(filter)\n    p91(concat)\n    p94(filter)\n    p95(toSortedList)\n    p96(filter)\n    p102(test_wf:run_wf:concat:concat_process1)\n    p106(toSortedList)\n    p112(merge)\n    p122(pca)\n    p130(harmonypy)\n    p138(find_neighbors)\n    p146(leiden)\n    p154(umap)\n    p159(toSortedList)\n    p161(Output)\n    p18-->p19\n    p43-->p44\n    p18-->p83\n    p83-->p84\n    p84-->p85\n    p18-->p94\n    p94-->p95\n    p95-->p96\n    p105-->p106\n    p0-->p8\n    p8-->p15\n    p15-->p18\n    p19-->p25\n    p25-->p32\n    p32-->p40\n    p40-->p43\n    p44-->p51\n    p51-->p58\n    p58-->p65\n    p65-->p72\n    p72-->p80\n    p80-->p105\n    p85-->p91\n    p91-->p105\n    p96-->p102\n    p102-->p105\n    p106-->p112\n    p112-->p122\n    p122-->p130\n    p130-->p138\n    p138-->p146\n    p146-->p154\n    p154-->p159\n    p159-->p161"
  },
  {
    "objectID": "modules/module_cluster_leiden.html",
    "href": "modules/module_cluster_leiden.html",
    "title": "Leiden",
    "section": "",
    "text": "ID: leiden\nNamespace: cluster\n\n\n\nSource\nLeiden is an improved version of the Louvain algorithm [Blondel08]. It has been proposed for single-cell analysis by [Levine15]. This requires having ran neighbors/find_neighbors or neighbors/bbknn first.\nBlondel08: Blondel et al. (2008), Fast unfolding of communities in large networks, J. Stat. Mech.\nLevine15: Levine et al. (2015), Data-Driven Phenotypic Dissection of AML Reveals Progenitor-like Cells that Correlate with Prognosis, Cell.\nTraag18: Traag et al. (2018), From Louvain to Leiden: guaranteeing well-connected communities arXiv.\nWolf18: Wolf et al. (2018), Scanpy: large-scale single-cell gene expression data analysis, Genome Biology."
  },
  {
    "objectID": "modules/module_cluster_leiden.html#example-commands",
    "href": "modules/module_cluster_leiden.html#example-commands",
    "title": "Leiden",
    "section": "Example commands",
    "text": "Example commands\nYou can run the pipeline using nextflow run.\n\nView help\nYou can use --help as a parameter to get an overview of the possible parameters.\nnextflow run openpipelines-bio/openpipeline \\\n  -r main_build -latest \\\n  -main-script target/nextflow/cluster/leiden/main.nf \\\n  --help\n\n\nRun command\n\n\nExample of params.yaml\n\n# Arguments\ninput: # please fill in - example: \"input.h5mu\"\nmodality: \"rna\"\nobsp_connectivities: \"connectivities\"\n# output: \"$id.$key.output.h5mu\"\nobs_name: \"leiden\"\nresolution: 1\n\n# Nextflow input-output arguments\npublish_dir: # please fill in - example: \"output/\"\n# param_list: \"my_params.yaml\"\n\nnextflow run openpipelines-bio/openpipeline \\\n  -r main_build -latest \\\n  -profile docker \\\n  -main-script target/nextflow/cluster/leiden/main.nf \\\n  -params-file params.yaml\n\n\n\n\n\n\nNote\n\n\n\nReplace -profile docker with -profile podman or -profile singularity depending on the desired backend."
  },
  {
    "objectID": "modules/module_cluster_leiden.html#argument-group",
    "href": "modules/module_cluster_leiden.html#argument-group",
    "title": "Leiden",
    "section": "Argument group",
    "text": "Argument group\n\nArguments\n\n\n\n\n\n\n\n\nName\nDescription\nAttributes\n\n\n\n\n--input\nInput file.\nfile, required, example: \"input.h5mu\"\n\n\n--obsp_connectivities\nIn which .obsp slot the neighbor connectivities can be found.\nstring, default: \"connectivities\"\n\n\n--output\nOutput file.\nfile, required, example: \"output.h5mu\"\n\n\n--obs_name\nName of the .obs key under which to add the cluster labels.\nstring, default: \"leiden\"\n\n\n--resolution\nA parameter value controlling the coarseness of the clustering. Higher values lead to more clusters.\ndouble, default: 1"
  },
  {
    "objectID": "modules/module_cluster_leiden.html#authors",
    "href": "modules/module_cluster_leiden.html#authors",
    "title": "Leiden",
    "section": "Authors",
    "text": "Authors\n\nDries De Maeyer  (maintainer)"
  },
  {
    "objectID": "modules/module_dataflow_merge.html",
    "href": "modules/module_dataflow_merge.html",
    "title": "Merge",
    "section": "",
    "text": "ID: merge\nNamespace: dataflow\n\n\n\nSource"
  },
  {
    "objectID": "modules/module_dataflow_merge.html#example-commands",
    "href": "modules/module_dataflow_merge.html#example-commands",
    "title": "Merge",
    "section": "Example commands",
    "text": "Example commands\nYou can run the pipeline using nextflow run.\n\nView help\nYou can use --help as a parameter to get an overview of the possible parameters.\nnextflow run openpipelines-bio/openpipeline \\\n  -r main_build -latest \\\n  -main-script target/nextflow/dataflow/merge/main.nf \\\n  --help\n\n\nRun command\n\n\nExample of params.yaml\n\n# Arguments\ninput: # please fill in - example: [\"sample_paths\"]\n# output: \"$id.$key.output.h5mu\"\ncompression: \"gzip\"\n\n# Nextflow input-output arguments\npublish_dir: # please fill in - example: \"output/\"\n# param_list: \"my_params.yaml\"\n\nnextflow run openpipelines-bio/openpipeline \\\n  -r main_build -latest \\\n  -profile docker \\\n  -main-script target/nextflow/dataflow/merge/main.nf \\\n  -params-file params.yaml\n\n\n\n\n\n\nNote\n\n\n\nReplace -profile docker with -profile podman or -profile singularity depending on the desired backend."
  },
  {
    "objectID": "modules/module_dataflow_merge.html#argument-group",
    "href": "modules/module_dataflow_merge.html#argument-group",
    "title": "Merge",
    "section": "Argument group",
    "text": "Argument group\n\nArguments\n\n\n\n\n\n\n\n\nName\nDescription\nAttributes\n\n\n\n\n--input\nPaths to the single-modality .h5mu files that need to be combined\nfile, required, default: \"sample_paths\"\n\n\n--output\nPath to the output file.\nfile, default: \"output.h5mu\"\n\n\n--compression\nThe compression format to be used on the final h5mu object.\nstring, default: \"gzip\""
  },
  {
    "objectID": "modules/module_dataflow_merge.html#authors",
    "href": "modules/module_dataflow_merge.html#authors",
    "title": "Merge",
    "section": "Authors",
    "text": "Authors\n\nDries Schaumont   (maintainer)"
  },
  {
    "objectID": "modules/module_convert_from_h5ad_to_h5mu.html",
    "href": "modules/module_convert_from_h5ad_to_h5mu.html",
    "title": "From h5ad to h5mu",
    "section": "",
    "text": "ID: from_h5ad_to_h5mu\nNamespace: convert\n\n\n\nSource"
  },
  {
    "objectID": "modules/module_convert_from_h5ad_to_h5mu.html#example-commands",
    "href": "modules/module_convert_from_h5ad_to_h5mu.html#example-commands",
    "title": "From h5ad to h5mu",
    "section": "Example commands",
    "text": "Example commands\nYou can run the pipeline using nextflow run.\n\nView help\nYou can use --help as a parameter to get an overview of the possible parameters.\nnextflow run openpipelines-bio/openpipeline \\\n  -r main_build -latest \\\n  -main-script target/nextflow/convert/from_h5ad_to_h5mu/main.nf \\\n  --help\n\n\nRun command\n\n\nExample of params.yaml\n\n# Arguments\ninput: # please fill in - example: [\"input.h5ad\"]\nmodality: [\"rna\"]\n# output: \"$id.$key.output.h5mu\"\n\n# Nextflow input-output arguments\npublish_dir: # please fill in - example: \"output/\"\n# param_list: \"my_params.yaml\"\n\nnextflow run openpipelines-bio/openpipeline \\\n  -r main_build -latest \\\n  -profile docker \\\n  -main-script target/nextflow/convert/from_h5ad_to_h5mu/main.nf \\\n  -params-file params.yaml\n\n\n\n\n\n\nNote\n\n\n\nReplace -profile docker with -profile podman or -profile singularity depending on the desired backend."
  },
  {
    "objectID": "modules/module_convert_from_h5ad_to_h5mu.html#argument-group",
    "href": "modules/module_convert_from_h5ad_to_h5mu.html#argument-group",
    "title": "From h5ad to h5mu",
    "section": "Argument group",
    "text": "Argument group\n\nArguments\n\n\n\n\n\n\n\n\nName\nDescription\nAttributes\n\n\n\n\n--input\nInput h5ad files\nfile, required, default: \"input.h5ad\"\n\n\n--output\nOutput muon file.\nfile, default: \"output.h5mu\""
  },
  {
    "objectID": "modules/module_convert_from_h5ad_to_h5mu.html#authors",
    "href": "modules/module_convert_from_h5ad_to_h5mu.html#authors",
    "title": "From h5ad to h5mu",
    "section": "Authors",
    "text": "Authors\n\nDries De Maeyer  (maintainer)"
  },
  {
    "objectID": "modules/module_dimred_pca.html",
    "href": "modules/module_dimred_pca.html",
    "title": "Pca",
    "section": "",
    "text": "ID: pca\nNamespace: dimred\n\n\n\nSource\nUses the implementation of scikit-learn [Pedregosa11]"
  },
  {
    "objectID": "modules/module_dimred_pca.html#example-commands",
    "href": "modules/module_dimred_pca.html#example-commands",
    "title": "Pca",
    "section": "Example commands",
    "text": "Example commands\nYou can run the pipeline using nextflow run.\n\nView help\nYou can use --help as a parameter to get an overview of the possible parameters.\nnextflow run openpipelines-bio/openpipeline \\\n  -r main_build -latest \\\n  -main-script target/nextflow/dimred/pca/main.nf \\\n  --help\n\n\nRun command\n\n\nExample of params.yaml\n\n# Arguments\ninput: # please fill in - example: \"input.h5mu\"\nmodality: \"rna\"\n# layer: \"foo\"\n# output: \"$id.$key.output.h5mu\"\nobsm_output: \"X_pca\"\nvarm_output: \"pca_loadings\"\nuns_output: \"pca_variance\"\n# num_components: 25\n\n# Nextflow input-output arguments\npublish_dir: # please fill in - example: \"output/\"\n# param_list: \"my_params.yaml\"\n\nnextflow run openpipelines-bio/openpipeline \\\n  -r main_build -latest \\\n  -profile docker \\\n  -main-script target/nextflow/dimred/pca/main.nf \\\n  -params-file params.yaml\n\n\n\n\n\n\nNote\n\n\n\nReplace -profile docker with -profile podman or -profile singularity depending on the desired backend."
  },
  {
    "objectID": "modules/module_dimred_pca.html#argument-group",
    "href": "modules/module_dimred_pca.html#argument-group",
    "title": "Pca",
    "section": "Argument group",
    "text": "Argument group\n\nArguments\n\n\n\n\n\n\n\n\nName\nDescription\nAttributes\n\n\n\n\n--input\nInput h5mu file\nfile, required, example: \"input.h5mu\"\n\n\n--layer\nuse specified layer for expression values instead of the .X object from the modality.\nstring\n\n\n--output\nOutput h5mu file.\nfile, required, example: \"output.h5mu\"\n\n\n--obsm_output\nIn which .obsm slot to store the resulting embedding.\nstring, default: \"X_pca\"\n\n\n--varm_output\nIn which .varm slot to store the resulting loadings matrix.\nstring, default: \"pca_loadings\"\n\n\n--uns_output\nIn which .uns slot to store the resulting variance objects.\nstring, default: \"pca_variance\"\n\n\n--num_components\nNumber of principal components to compute. Defaults to 50, or 1 - minimum dimension size of selected representation.\ninteger, example: 25"
  },
  {
    "objectID": "modules/module_dimred_pca.html#authors",
    "href": "modules/module_dimred_pca.html#authors",
    "title": "Pca",
    "section": "Authors",
    "text": "Authors\n\nDries De Maeyer  (maintainer)"
  },
  {
    "objectID": "modules/module_velocity_scvelo.html",
    "href": "modules/module_velocity_scvelo.html",
    "title": "Scvelo",
    "section": "",
    "text": "ID: scvelo\nNamespace: velocity\n\n\n\nSource"
  },
  {
    "objectID": "modules/module_velocity_scvelo.html#example-commands",
    "href": "modules/module_velocity_scvelo.html#example-commands",
    "title": "Scvelo",
    "section": "Example commands",
    "text": "Example commands\nYou can run the pipeline using nextflow run.\n\nView help\nYou can use --help as a parameter to get an overview of the possible parameters.\nnextflow run openpipelines-bio/openpipeline \\\n  -r main_build -latest \\\n  -main-script target/nextflow/velocity/scvelo/main.nf \\\n  --help\n\n\nRun command\n\n\nExample of params.yaml\n\n# Inputs\ninput: # please fill in - example: \"path/to/file\"\n\n# Outputs\n# output: \"$id.$key.output.output\"\n\n# Filtering and normalization\n# min_counts: 123\n# min_counts_u: 123\n# min_cells: 123\n# min_cells_u: 123\n# min_shared_counts: 123\n# min_shared_cells: 123\n# n_top_genes: 123\nlog_transform: true\n\n# Fitting parameters\n# n_principal_components: 123\nn_neighbors: 30\n\n# Nextflow input-output arguments\npublish_dir: # please fill in - example: \"output/\"\n# param_list: \"my_params.yaml\"\n\nnextflow run openpipelines-bio/openpipeline \\\n  -r main_build -latest \\\n  -profile docker \\\n  -main-script target/nextflow/velocity/scvelo/main.nf \\\n  -params-file params.yaml\n\n\n\n\n\n\nNote\n\n\n\nReplace -profile docker with -profile podman or -profile singularity depending on the desired backend."
  },
  {
    "objectID": "modules/module_velocity_scvelo.html#argument-groups",
    "href": "modules/module_velocity_scvelo.html#argument-groups",
    "title": "Scvelo",
    "section": "Argument groups",
    "text": "Argument groups\n\nInputs\n\n\n\nName\nDescription\nAttributes\n\n\n\n\n--input\nVelocyto loom file.\nfile, required\n\n\n\n\n\nOutputs\n\n\n\n\n\n\n\n\nName\nDescription\nAttributes\n\n\n\n\n--output\nOutput directory. If it does not exist, will be created.\nfile, required\n\n\n\n\n\nFiltering and normalization\nArguments for filtering, normalization an log transform (see scvelo.pp.filter_and_normalize function)\n\n\n\n\n\n\n\n\nName\nDescription\nAttributes\n\n\n\n\n--min_counts\nMinimum number of counts required for a gene to pass filtering (spliced).\ninteger\n\n\n--min_counts_u\nMinimum number of counts required for a gene to pass filtering (unspliced).\ninteger\n\n\n--min_cells\nMinimum number of cells expressed required to pass filtering (spliced).\ninteger\n\n\n--min_cells_u\nMinimum number of cells expressed required to pass filtering (unspliced).\ninteger\n\n\n--min_shared_counts\nMinimum number of counts (both unspliced and spliced) required for a gene.\ninteger\n\n\n--min_shared_cells\nMinimum number of cells required to be expressed (both unspliced and spliced).\ninteger\n\n\n--n_top_genes\nNumber of genes to keep.\ninteger\n\n\n--log_transform\nDo not log transform counts.\nboolean, default: TRUE\n\n\n\n\n\nFitting parameters\nArguments for fitting the data\n\n\n\n\n\n\n\n\nName\nDescription\nAttributes\n\n\n\n\n--n_principal_components\nNumber of principal components to use for calculating moments.\ninteger\n\n\n--n_neighbors\nNumber of neighbors to use. First/second-order moments are computed for each cell across its nearest neighbors, where the neighbor graph is obtained from euclidean distances in PCA space.\ninteger, default: 30"
  },
  {
    "objectID": "modules/module_velocity_scvelo.html#authors",
    "href": "modules/module_velocity_scvelo.html#authors",
    "title": "Scvelo",
    "section": "Authors",
    "text": "Authors\n\nDries Schaumont   (maintainer)"
  },
  {
    "objectID": "modules/module_neighbors_find_neighbors.html",
    "href": "modules/module_neighbors_find_neighbors.html",
    "title": "Find neighbors",
    "section": "",
    "text": "ID: find_neighbors\nNamespace: neighbors\n\n\n\nSource\nThe neighbor search efficiency of this heavily relies on UMAP [McInnes18], which also provides a method for estimating connectivities of data points - the connectivity of the manifold (method==‘umap’). If method==‘gauss’, connectivities are computed according to [Coifman05], in the adaption of [Haghverdi16]."
  },
  {
    "objectID": "modules/module_neighbors_find_neighbors.html#example-commands",
    "href": "modules/module_neighbors_find_neighbors.html#example-commands",
    "title": "Find neighbors",
    "section": "Example commands",
    "text": "Example commands\nYou can run the pipeline using nextflow run.\n\nView help\nYou can use --help as a parameter to get an overview of the possible parameters.\nnextflow run openpipelines-bio/openpipeline \\\n  -r main_build -latest \\\n  -main-script target/nextflow/neighbors/find_neighbors/main.nf \\\n  --help\n\n\nRun command\n\n\nExample of params.yaml\n\n# Arguments\ninput: # please fill in - example: \"input.h5mu\"\nmodality: \"rna\"\nobsm_input: \"X_pca\"\n# output: \"$id.$key.output.h5mu\"\nuns_output: \"neighbors\"\nobsp_distances: \"distances\"\nobsp_connectivities: \"connectivities\"\nmetric: \"euclidean\"\nnum_neighbors: 15\nseed: 0\n\n# Nextflow input-output arguments\npublish_dir: # please fill in - example: \"output/\"\n# param_list: \"my_params.yaml\"\n\nnextflow run openpipelines-bio/openpipeline \\\n  -r main_build -latest \\\n  -profile docker \\\n  -main-script target/nextflow/neighbors/find_neighbors/main.nf \\\n  -params-file params.yaml\n\n\n\n\n\n\nNote\n\n\n\nReplace -profile docker with -profile podman or -profile singularity depending on the desired backend."
  },
  {
    "objectID": "modules/module_neighbors_find_neighbors.html#argument-group",
    "href": "modules/module_neighbors_find_neighbors.html#argument-group",
    "title": "Find neighbors",
    "section": "Argument group",
    "text": "Argument group\n\nArguments\n\n\n\n\n\n\n\n\nName\nDescription\nAttributes\n\n\n\n\n--input\nInput h5mu file\nfile, required, example: \"input.h5mu\"\n\n\n--obsm_input\nWhich .obsm slot to use as a starting PCA embedding.\nstring, default: \"X_pca\"\n\n\n--output\nOutput h5mu file containing the found neighbors.\nfile, example: \"output.h5mu\"\n\n\n--uns_output\nMandatory .uns slot to store various neighbor output objects.\nstring, default: \"neighbors\"\n\n\n--obsp_distances\nIn which .obsp slot to store the distance matrix between the resulting neighbors.\nstring, default: \"distances\"\n\n\n--obsp_connectivities\nIn which .obsp slot to store the connectivities matrix between the resulting neighbors.\nstring, default: \"connectivities\"\n\n\n--metric\nThe distance metric to be used in the generation of the nearest neighborhood network.\nstring, default: \"euclidean\"\n\n\n--num_neighbors\nThe size of local neighborhood (in terms of number of neighboring data points) used for manifold approximation. Larger values result in more global views of the manifold, while smaller values result in more local data being preserved. In general values should be in the range 2 to 100. If knn is True, number of nearest neighbors to be searched. If knn is False, a Gaussian kernel width is set to the distance of the n_neighbors neighbor.\ninteger, default: 15\n\n\n--seed\nA random seed.\ninteger, default: 0"
  },
  {
    "objectID": "modules/module_neighbors_find_neighbors.html#authors",
    "href": "modules/module_neighbors_find_neighbors.html#authors",
    "title": "Find neighbors",
    "section": "Authors",
    "text": "Authors\n\nDries De Maeyer  (maintainer)\nRobrecht Cannoodt   (contributor)"
  },
  {
    "objectID": "modules/module_filter_filter_with_counts.html",
    "href": "modules/module_filter_filter_with_counts.html",
    "title": "Filter with counts",
    "section": "",
    "text": "ID: filter_with_counts\nNamespace: filter\n\n\n\nSource\nThis is based on both the UMI counts, the gene counts and the mitochondrial genes (genes starting with mt/MT)"
  },
  {
    "objectID": "modules/module_filter_filter_with_counts.html#example-commands",
    "href": "modules/module_filter_filter_with_counts.html#example-commands",
    "title": "Filter with counts",
    "section": "Example commands",
    "text": "Example commands\nYou can run the pipeline using nextflow run.\n\nView help\nYou can use --help as a parameter to get an overview of the possible parameters.\nnextflow run openpipelines-bio/openpipeline \\\n  -r main_build -latest \\\n  -main-script target/nextflow/filter/filter_with_counts/main.nf \\\n  --help\n\n\nRun command\n\n\nExample of params.yaml\n\n# Inputs\ninput: # please fill in - example: \"input.h5mu\"\nmodality: \"rna\"\n# layer: \"raw_counts\"\n\n# Outputs\n# output: \"$id.$key.output.h5mu\"\ndo_subset: false\nobs_name_filter: \"filter_with_counts\"\nvar_name_filter: \"filter_with_counts\"\n\n# Arguments\n# min_counts: 200\n# max_counts: 5000000\n# min_genes_per_cell: 200\n# max_genes_per_cell: 1500000\n# min_cells_per_gene: 3\n# min_fraction_mito: 0\n# max_fraction_mito: 0.2\n\n# Nextflow input-output arguments\npublish_dir: # please fill in - example: \"output/\"\n# param_list: \"my_params.yaml\"\n\nnextflow run openpipelines-bio/openpipeline \\\n  -r main_build -latest \\\n  -profile docker \\\n  -main-script target/nextflow/filter/filter_with_counts/main.nf \\\n  -params-file params.yaml\n\n\n\n\n\n\nNote\n\n\n\nReplace -profile docker with -profile podman or -profile singularity depending on the desired backend."
  },
  {
    "objectID": "modules/module_filter_filter_with_counts.html#argument-groups",
    "href": "modules/module_filter_filter_with_counts.html#argument-groups",
    "title": "Filter with counts",
    "section": "Argument groups",
    "text": "Argument groups\n\nInputs\n\n\n\nName\nDescription\nAttributes\n\n\n\n\n--input\nInput h5mu file\nfile, required, example: \"input.h5mu\"\n\n\n\n\n\nOutputs\n\n\n\n\n\n\n\n\nName\nDescription\nAttributes\n\n\n\n\n--output\nOutput h5mu file.\nfile, example: \"output.h5mu\"\n\n\n--do_subset\nWhether to subset before storing the output.\nboolean_true\n\n\n--obs_name_filter\nIn which .obs slot to store a boolean array corresponding to which observations should be removed.\nstring, default: \"filter_with_counts\"\n\n\n--var_name_filter\nIn which .var slot to store a boolean array corresponding to which variables should be removed.\nstring, default: \"filter_with_counts\"\n\n\n\n\n\nArguments\n\n\n\n\n\n\n\n\nName\nDescription\nAttributes\n\n\n\n\n--min_counts\nMinimum number of counts captured per cell.\ninteger, example: 200\n\n\n--max_counts\nMaximum number of counts captured per cell.\ninteger, example: 5000000\n\n\n--min_genes_per_cell\nMinimum of non-zero values per cell.\ninteger, example: 200\n\n\n--max_genes_per_cell\nMaximum of non-zero values per cell.\ninteger, example: 1500000\n\n\n--min_cells_per_gene\nMinimum of non-zero values per gene.\ninteger, example: 3\n\n\n--min_fraction_mito\nMinimum fraction of UMIs that are mitochondrial.\ndouble, example: 0\n\n\n--max_fraction_mito\nMaximum fraction of UMIs that are mitochondrial.\ndouble, example: 0.2"
  },
  {
    "objectID": "modules/module_filter_filter_with_counts.html#authors",
    "href": "modules/module_filter_filter_with_counts.html#authors",
    "title": "Filter with counts",
    "section": "Authors",
    "text": "Authors\n\nDries De Maeyer  (author)\nRobrecht Cannoodt   (maintainer, author)"
  },
  {
    "objectID": "modules/module_convert_from_bdrhap_to_h5mu.html",
    "href": "modules/module_convert_from_bdrhap_to_h5mu.html",
    "title": "From bdrhap to h5mu",
    "section": "",
    "text": "ID: from_bdrhap_to_h5mu\nNamespace: convert\n\n\n\nSource"
  },
  {
    "objectID": "modules/module_convert_from_bdrhap_to_h5mu.html#example-commands",
    "href": "modules/module_convert_from_bdrhap_to_h5mu.html#example-commands",
    "title": "From bdrhap to h5mu",
    "section": "Example commands",
    "text": "Example commands\nYou can run the pipeline using nextflow run.\n\nView help\nYou can use --help as a parameter to get an overview of the possible parameters.\nnextflow run openpipelines-bio/openpipeline \\\n  -r main_build -latest \\\n  -main-script target/nextflow/convert/from_bdrhap_to_h5mu/main.nf \\\n  --help\n\n\nRun command\n\n\nExample of params.yaml\n\n# Inputs\nid: # please fill in - example: \"my_id\"\ninput: # please fill in - example: \"input_dir/\"\n\n# Outputs\n# output: \"$id.$key.output.h5mu\"\n\n# Nextflow input-output arguments\npublish_dir: # please fill in - example: \"output/\"\n# param_list: \"my_params.yaml\"\n\nnextflow run openpipelines-bio/openpipeline \\\n  -r main_build -latest \\\n  -profile docker \\\n  -main-script target/nextflow/convert/from_bdrhap_to_h5mu/main.nf \\\n  -params-file params.yaml\n\n\n\n\n\n\nNote\n\n\n\nReplace -profile docker with -profile podman or -profile singularity depending on the desired backend."
  },
  {
    "objectID": "modules/module_convert_from_bdrhap_to_h5mu.html#argument-groups",
    "href": "modules/module_convert_from_bdrhap_to_h5mu.html#argument-groups",
    "title": "From bdrhap to h5mu",
    "section": "Argument groups",
    "text": "Argument groups\n\nInputs\n\n\n\n\n\n\n\n\nName\nDescription\nAttributes\n\n\n\n\n--id\nA sample ID.\nstring, required, example: \"my_id\"\n\n\n--input\nThe output of a BD Rhapsody workflow.\nfile, required, example: \"input_dir\"\n\n\n\n\n\nOutputs\n\n\n\n\n\n\n\n\nName\nDescription\nAttributes\n\n\n\n\n--output\nOutput h5mu file.\nfile, required, example: \"output.h5mu\""
  },
  {
    "objectID": "modules/module_convert_from_bdrhap_to_h5mu.html#authors",
    "href": "modules/module_convert_from_bdrhap_to_h5mu.html#authors",
    "title": "From bdrhap to h5mu",
    "section": "Authors",
    "text": "Authors\n\nRobrecht Cannoodt   (maintainer)"
  },
  {
    "objectID": "modules/module_velocity_velocyto.html",
    "href": "modules/module_velocity_velocyto.html",
    "title": "Velocyto",
    "section": "",
    "text": "ID: velocyto\nNamespace: velocity\n\n\n\nSource"
  },
  {
    "objectID": "modules/module_velocity_velocyto.html#example-commands",
    "href": "modules/module_velocity_velocyto.html#example-commands",
    "title": "Velocyto",
    "section": "Example commands",
    "text": "Example commands\nYou can run the pipeline using nextflow run.\n\nView help\nYou can use --help as a parameter to get an overview of the possible parameters.\nnextflow run openpipelines-bio/openpipeline \\\n  -r main_build -latest \\\n  -main-script target/nextflow/velocity/velocyto/main.nf \\\n  --help\n\n\nRun command\n\n\nExample of params.yaml\n\n# Arguments\ninput: # please fill in - example: \"path/to/file\"\ntranscriptome: # please fill in - example: \"path/to/file\"\n# barcode: \"path/to/file\"\nwithout_umi: false\n# output: \"$id.$key.output.output\"\nlogic: \"Default\"\n\n# Nextflow input-output arguments\npublish_dir: # please fill in - example: \"output/\"\n# param_list: \"my_params.yaml\"\n\nnextflow run openpipelines-bio/openpipeline \\\n  -r main_build -latest \\\n  -profile docker \\\n  -main-script target/nextflow/velocity/velocyto/main.nf \\\n  -params-file params.yaml\n\n\n\n\n\n\nNote\n\n\n\nReplace -profile docker with -profile podman or -profile singularity depending on the desired backend."
  },
  {
    "objectID": "modules/module_velocity_velocyto.html#argument-group",
    "href": "modules/module_velocity_velocyto.html#argument-group",
    "title": "Velocyto",
    "section": "Argument group",
    "text": "Argument group\n\nArguments\n\n\n\n\n\n\n\n\nName\nDescription\nAttributes\n\n\n\n\n--input\nPath to BAM file\nfile, required\n\n\n--transcriptome\nPath to GTF file\nfile, required\n\n\n--barcode\nValid barcodes file, to filter the bam. If –bcfile is not specified all the cell barcodes will be included. Cell barcodes should be specified in the bcfile as the ‘CB’ tag for each read\nfile\n\n\n--without_umi\nfoo\nboolean_true\n\n\n--output\nVelocyto loom file\nfile, required\n\n\n--logic\nThe logic to use for the filtering.\nstring, default: \"Default\""
  },
  {
    "objectID": "modules/module_velocity_velocyto.html#authors",
    "href": "modules/module_velocity_velocyto.html#authors",
    "title": "Velocyto",
    "section": "Authors",
    "text": "Authors\n\nRobrecht Cannoodt   (maintainer)"
  },
  {
    "objectID": "modules/module_filter_do_filter.html",
    "href": "modules/module_filter_do_filter.html",
    "title": "Do filter",
    "section": "",
    "text": "ID: do_filter\nNamespace: filter\n\n\n\nSource"
  },
  {
    "objectID": "modules/module_filter_do_filter.html#example-commands",
    "href": "modules/module_filter_do_filter.html#example-commands",
    "title": "Do filter",
    "section": "Example commands",
    "text": "Example commands\nYou can run the pipeline using nextflow run.\n\nView help\nYou can use --help as a parameter to get an overview of the possible parameters.\nnextflow run openpipelines-bio/openpipeline \\\n  -r main_build -latest \\\n  -main-script target/nextflow/filter/do_filter/main.nf \\\n  --help\n\n\nRun command\n\n\nExample of params.yaml\n\n# Arguments\ninput: # please fill in - example: \"input.h5mu\"\nmodality: \"rna\"\n# obs_filter: [\"filter_with_x\"]\nvar_filter: [\"filter_with_x\"]\n# output: \"$id.$key.output.h5mu\"\n\n# Nextflow input-output arguments\npublish_dir: # please fill in - example: \"output/\"\n# param_list: \"my_params.yaml\"\n\nnextflow run openpipelines-bio/openpipeline \\\n  -r main_build -latest \\\n  -profile docker \\\n  -main-script target/nextflow/filter/do_filter/main.nf \\\n  -params-file params.yaml\n\n\n\n\n\n\nNote\n\n\n\nReplace -profile docker with -profile podman or -profile singularity depending on the desired backend."
  },
  {
    "objectID": "modules/module_filter_do_filter.html#argument-group",
    "href": "modules/module_filter_do_filter.html#argument-group",
    "title": "Do filter",
    "section": "Argument group",
    "text": "Argument group\n\nArguments\n\n\n\n\n\n\n\n\nName\nDescription\nAttributes\n\n\n\n\n--input\nInput h5mu file\nfile, required, example: \"input.h5mu\"\n\n\n--obs_filter\nWhich .obs columns to use to filter the observations by.\nstring, example: \"filter_with_x\"\n\n\n--var_filter\nWhich .var columns to use to filter the observations by.\nstring, default: \"filter_with_x\"\n\n\n--output\nOutput h5mu file.\nfile, example: \"output.h5mu\""
  },
  {
    "objectID": "modules/module_filter_do_filter.html#authors",
    "href": "modules/module_filter_do_filter.html#authors",
    "title": "Do filter",
    "section": "Authors",
    "text": "Authors\n\nRobrecht Cannoodt   (maintainer, contributor)"
  },
  {
    "objectID": "modules/workflow_ingestion_cellranger_mapping.html",
    "href": "modules/workflow_ingestion_cellranger_mapping.html",
    "title": "Cell Ranger mapping",
    "section": "",
    "text": "ID: cellranger_mapping\nNamespace: ingestion\n\n\n\nSource"
  },
  {
    "objectID": "modules/workflow_ingestion_cellranger_mapping.html#example-commands",
    "href": "modules/workflow_ingestion_cellranger_mapping.html#example-commands",
    "title": "Cell Ranger mapping",
    "section": "Example commands",
    "text": "Example commands\nYou can run the pipeline using nextflow run.\n\nView help\nYou can use --help as a parameter to get an overview of the possible parameters.\nnextflow run openpipelines-bio/openpipeline \\\n  -r main_build -latest \\\n  -main-script workflows/ingestion/cellranger_mapping/main.nf \\\n  --help\n\n\nRun command\n\n\nExample of params.yaml\n\n# Inputs\nid: # please fill in - example: \"foo\"\ninput: # please fill in - example: [\"sample_S1_L001_R1_001.fastq.gz\", \"sample_S1_L001_R2_001.fastq.gz\"]\nreference: # please fill in - example: \"reference.tar.gz\"\n\n# Outputs\n# output_raw: \"$id.$key.output_raw.output_raw\"\n# output_h5mu: \"$id.$key.output_h5mu.h5mu\"\nobsm_metrics: \"metrics_summary\"\n\n# Cell Ranger arguments\n# expect_cells: 3000\nchemistry: \"auto\"\nsecondary_analysis: false\ngenerate_bam: true\ninclude_introns: true\n\n# Nextflow input-output arguments\npublish_dir: # please fill in - example: \"output/\"\n# param_list: \"my_params.yaml\"\n\nnextflow run openpipelines-bio/openpipeline \\\n  -r main_build -latest \\\n  -profile docker \\\n  -main-script workflows/ingestion/cellranger_mapping/main.nf \\\n  -params-file params.yaml\n\n\n\n\n\n\nNote\n\n\n\nReplace -profile docker with -profile podman or -profile singularity depending on the desired backend."
  },
  {
    "objectID": "modules/workflow_ingestion_cellranger_mapping.html#argument-groups",
    "href": "modules/workflow_ingestion_cellranger_mapping.html#argument-groups",
    "title": "Cell Ranger mapping",
    "section": "Argument groups",
    "text": "Argument groups\n\nInputs\n\n\n\n\n\n\n\n\nName\nDescription\nAttributes\n\n\n\n\n--id\nID of the sample.\nstring, required, example: \"foo\"\n\n\n--input\nThe fastq.gz files to align. Can also be a single directory containing fastq.gz files.\nfile, required, example: \"sample_S1_L001_R1_001.fastq.gz\", example: \"sample_S1_L001_R2_001.fastq.gz\"\n\n\n--reference\nThe path to Cell Ranger reference tar.gz file.\nfile, required, example: \"reference.tar.gz\"\n\n\n\n\n\nOutputs\n\n\n\n\n\n\n\n\nName\nDescription\nAttributes\n\n\n\n\n--output_raw\nThe raw output folder.\nfile, required, example: \"output_dir\"\n\n\n--output_h5mu\nThe converted h5mu file.\nfile, required, example: \"output.h5mu\"\n\n\n--obsm_metrics\nName of the .obsm slot under which to QC metrics (if any).\nstring, default: \"metrics_summary\"\n\n\n\n\n\nCell Ranger arguments\n\n\n\n\n\n\n\n\nName\nDescription\nAttributes\n\n\n\n\n--expect_cells\nExpected number of recovered cells, used as input to cell calling algorithm.\ninteger, example: 3000\n\n\n--chemistry\nAssay configuration. - auto: autodetect mode - threeprime: Single Cell 3’ - fiveprime: Single Cell 5’ - SC3Pv1: Single Cell 3’ v1 - SC3Pv2: Single Cell 3’ v2 - SC3Pv3: Single Cell 3’ v3 - SC3Pv3LT: Single Cell 3’ v3 LT - SC3Pv3HT: Single Cell 3’ v3 HT - SC5P-PE: Single Cell 5’ paired-end - SC5P-R2: Single Cell 5’ R2-only - SC-FB: Single Cell Antibody-only 3’ v2 or 5’ See https://kb.10xgenomics.com/hc/en-us/articles/115003764132-How-does-Cell-Ranger-auto-detect-chemistry- for more information.\nstring, default: \"auto\"\n\n\n--secondary_analysis\nWhether or not to run the secondary analysis e.g. clustering.\nboolean, default: FALSE\n\n\n--generate_bam\nWhether to generate a BAM file.\nboolean, default: TRUE\n\n\n--include_introns\nInclude intronic reads in count (default=true unless –target-panel is specified in which case default=false)\nboolean, default: TRUE"
  },
  {
    "objectID": "modules/workflow_ingestion_cellranger_mapping.html#authors",
    "href": "modules/workflow_ingestion_cellranger_mapping.html#authors",
    "title": "Cell Ranger mapping",
    "section": "Authors",
    "text": "Authors\n\nAngela Pisco   (author)\nRobrecht Cannoodt   (author, maintainer)\nDries De Maeyer  (author)"
  },
  {
    "objectID": "modules/workflow_ingestion_cellranger_mapping.html#visualisation",
    "href": "modules/workflow_ingestion_cellranger_mapping.html#visualisation",
    "title": "Cell Ranger mapping",
    "section": "Visualisation",
    "text": "Visualisation\n\n\n\n\nflowchart LR\n    p0(Input)\n    p9(cellranger_count)\n    p16(cellranger_count_split)\n    p24(from_10xh5_to_h5mu)\n    p31(Output)\n    p0-->p9\n    p9-->p16\n    p16-->p24\n    p24-->p31"
  },
  {
    "objectID": "modules/index.html",
    "href": "modules/index.html",
    "title": "Components",
    "section": "",
    "text": "Order By\n       Default\n         \n          Name\n        \n     \n  \n    \n      \n      \n    \n\n\n\n\n\n\nName\n\n\nNamespace\n\n\nDescription\n\n\n\n\n\n\nBD Rhapsody\n\n\nIngestion\n\n\nA generic pipeline for running BD Rhapsody WTA or Targeted mapping, with support for AbSeq, VDJ and/or SMK.\n\n\n\n\nCell Ranger mapping\n\n\nIngestion\n\n\nA pipeline for running Cell Ranger mapping.\n\n\n\n\nCell Ranger post-processing\n\n\nIngestion\n\n\nPost-processing Cell Ranger datasets.\n\n\n\n\nConcat\n\n\nTabula sapiens\n\n\n\n\n\n\n\nConversion\n\n\nIngestion\n\n\nA pipeline to convert different file formats to .h5mu.\n\n\n\n\nDemux\n\n\nIngestion\n\n\nA generic pipeline for running bcl2fastq, bcl-convert or Cell Ranger mkfastq.\n\n\n\n\nFull pipeline\n\n\nMultiomics\n\n\nA pipeline to analyse multiple multiomics samples.\n\n\n\n\nIntegration\n\n\nMultiomics\n\n\nA pipeline for demultiplexing multimodal multi-sample RNA transcriptomics data.\n\n\n\n\nMake reference\n\n\nIngestion\n\n\nBuild a transcriptomics reference into one of many formats\n\n\n\n\nProcess\n\n\nTabula sapiens\n\n\n\n\n\n\n\nRna multisample\n\n\nMultiomics\n\n\nProcessing unimodal multi-sample RNA transcriptomics data.\n\n\n\n\nRna singlesample\n\n\nMultiomics\n\n\nProcessing unimodal single-sample RNA transcriptomics data.\n\n\n\n\n\n\nNo matching items"
  },
  {
    "objectID": "modules/index.html#modules",
    "href": "modules/index.html#modules",
    "title": "Components",
    "section": "Modules",
    "text": "Modules\n\n\n   \n     \n     \n       Order By\n       Default\n         \n          Name\n        \n     \n  \n    \n      \n      \n    \n\n\n\n\n\n\nName\n\n\nNamespace\n\n\nDescription\n\n\n\n\n\n\nAdd id\n\n\nMetadata\n\n\nAdd id of .obs.\n\n\n\n\nBD Rhapsody\n\n\nMapping\n\n\nA wrapper for the BD Rhapsody Analysis CWL v1.10.1 pipeline\n\n\n\n\nBbknn\n\n\nNeighbors\n\n\nBBKNN network generation\n\n\n\n\nBcl convert\n\n\nDemux\n\n\nConvert bcl files to fastq files using bcl-convert.\n\n\n\n\nBcl2fastq\n\n\nDemux\n\n\nConvert bcl files to fastq files using bcl2fastq\n\n\n\n\nBuild bdrhap reference\n\n\nReference\n\n\nCompile a reference into a STAR index compatible with the BD Rhapsody pipeline.\n\n\n\n\nBuild cellranger reference\n\n\nReference\n\n\nBuild a Cell Ranger-compatible reference folder from user-supplied genome FASTA and gene GTF files.\n\n\n\n\nCellbender remove background\n\n\nCorrection\n\n\nEliminating technical artifacts from high-throughput single-cell RNA sequencing data.\n\n\n\n\nCellranger arc aggr\n\n\nMultiomics\n\n\nAggregate\n\n\n\n\nCellranger arc count\n\n\nMultiomics\n\n\nCount\n\n\n\n\nCellranger cite seq\n\n\nMultiomics\n\n\nRun cite-seq using cellranger count\n\n\n\n\nCellranger count\n\n\nMapping\n\n\nAlign fastq files using Cell Ranger count.\n\n\n\n\nCellranger count split\n\n\nMapping\n\n\nSplit 10x Cell Ranger output directory into separate output fields.\n\n\n\n\nCellranger mkfastq\n\n\nDemux\n\n\nDemultiplex raw sequencing data\n\n\n\n\nCellranger multi\n\n\nMapping\n\n\nAlign fastq files using Cell Ranger multi.\n\n\n\n\nConcat\n\n\nDataflow\n\n\nConcatenates several uni-modal samples in .h5mu files into a single file\n\n\n\n\nDelete layer\n\n\nTransform\n\n\nDelete an anndata layer from one or more modalities\n\n\n\n\nDo filter\n\n\nFilter\n\n\nRemove observations and variables based on specified .obs and .var columns\n\n\n\n\nDownload file\n\n\nDownload\n\n\nDownload a file\n\n\n\n\nFastqc\n\n\nQc\n\n\nFastqc component, please see https://www.bioinformatics.babraham.ac.uk/projects/fastqc/.\n\n\n\n\nFilter 10xh5\n\n\nProcess 10xh5\n\n\nFilter a 10x h5 dataset\n\n\n\n\nFilter with counts\n\n\nFilter\n\n\nFilter scRNA-seq data based on the primary QC metrics.\n\n\n\n\nFilter with hvg\n\n\nFilter\n\n\nAnnotate highly variable genes [Satija15] [Zheng17] [Stuart19].\n\n\n\n\nFilter with scrublet\n\n\nFilter\n\n\nDoublet detection using the Scrublet method (Wolock, Lopez and Klein, 2019).\n\n\n\n\nFind neighbors\n\n\nNeighbors\n\n\nCompute a neighborhood graph of observations [McInnes18].\n\n\n\n\nFrom 10xh5 to h5mu\n\n\nConvert\n\n\nConverts a 10x h5 into an h5mu file\n\n\n\n\nFrom 10xmtx to h5mu\n\n\nConvert\n\n\nConverts a 10x mtx into an h5mu file\n\n\n\n\nFrom bd to 10x molecular barcode tags\n\n\nConvert\n\n\nConvert the molecular barcode sequence SAM tag from BD format (MA) to 10X format (UB)\n\n\n\n\nFrom bdrhap to h5mu\n\n\nConvert\n\n\nConvert the output of a BD Rhapsody WTA pipeline to a MuData h5 file\n\n\n\n\nFrom cellranger multi to h5mu\n\n\nConvert\n\n\nConverts the output from cellranger multi to a single .h5mu file.\n\n\n\n\nFrom h5ad to h5mu\n\n\nConvert\n\n\nConverts a single layer h5ad file into a single muon object\n\n\n\n\nFrom h5mu to h5ad\n\n\nConvert\n\n\nConverts a h5mu file into a h5ad file\n\n\n\n\nFrom velocyto to h5mu\n\n\nConvert\n\n\nConvert a velocyto .loom file to h5mu\n\n\n\n\nHarmonypy\n\n\nIntegrate\n\n\nPerforms Harmony integration based as described in https://github.com/immunogenomics/harmony.\n\n\n\n\nJoin csv\n\n\nMetadata\n\n\nJoin a csv containing metadata to the .obs or .var field of a mudata file.\n\n\n\n\nJoin uns to obs\n\n\nMetadata\n\n\nJoin a data frame in .uns containing metadata to the .obs of a mudata file.\n\n\n\n\nLeiden\n\n\nCluster\n\n\nCluster cells using the Leiden algorithm [Traag18] implemented in the Scanpy framework [Wolf18].\n\n\n\n\nLog1p\n\n\nTransform\n\n\nLogarithmize the data matrix.\n\n\n\n\nMake params\n\n\nFiles\n\n\nLooks for files in a directory and turn it in a params file.\n\n\n\n\nMake reference\n\n\nReference\n\n\nPreprocess and build a transcriptome reference.\n\n\n\n\nMerge\n\n\nDataflow\n\n\nCombine one or more single-modality .h5mu files together into one .h5mu file\n\n\n\n\nMermaid\n\n\nReport\n\n\nGenerates a network from mermaid code.\n\n\n\n\nMultiqc\n\n\nQc\n\n\nComponent for multiqc (https://multiqc.info/)\n\n\n\n\nNormalize total\n\n\nTransform\n\n\nNormalize counts per cell.\n\n\n\n\nPca\n\n\nDimred\n\n\nComputes PCA coordinates, loadings and variance decomposition.\n\n\n\n\nPublish\n\n\nTransfer\n\n\nPublish an artifact and optionally rename with parameters\n\n\n\n\nRegress out\n\n\nTransform\n\n\nRegress out (mostly) unwanted sources of variation.\n\n\n\n\nRun cellxgene\n\n\nInteractive\n\n\n\n\n\n\n\nRun cirrocumulus\n\n\nInteractive\n\n\n\n\n\n\n\nRun star and htseq\n\n\nMapping\n\n\nAlign sequencing data\n\n\n\n\nScale\n\n\nTransform\n\n\nScale data to unit variance and zero mean\n\n\n\n\nScanorama\n\n\nIntegrate\n\n\nUse Scanorama to integrate different experiments\n\n\n\n\nScvelo\n\n\nVelocity\n\n\n\n\n\n\n\nScvi\n\n\nIntegrate\n\n\nPerforms scvi integration as done in the human lung cell atlas https://github.com/LungCellAtlas/HLCA\n\n\n\n\nSpaceranger count\n\n\nMapping\n\n\nAlign fastqs and detect tissues\n\n\n\n\nSpaceranger mkfastq\n\n\nDemux\n\n\nDemultiplex raw sequencing data\n\n\n\n\nSplit modalities\n\n\nDataflow\n\n\nSplit the modalities from a single .h5mu multimodal sample into seperate .h5mu files.\n\n\n\n\nSubset h5mu\n\n\nFilter\n\n\nCreate a subset of a mudata file by selecting the first number of observations\n\n\n\n\nSync test resources\n\n\nDownload\n\n\nSynchronise the test resources from s3://openpipelines-data to resources_test\n\n\n\n\nTar extract\n\n\nCompression\n\n\nExtract files from a tar archive\n\n\n\n\nUmap\n\n\nDimred\n\n\nUMAP (Uniform Manifold Approximation and Projection) is a manifold learning technique suitable for visualizing high-dimensional data.\n\n\n\n\nVelocyto\n\n\nVelocity\n\n\nRuns the velocity analysis on a BAM file, outputting a loom file.\n\n\n\n\n\n\nNo matching items"
  },
  {
    "objectID": "modules/workflow_tabula_sapiens_concat.html",
    "href": "modules/workflow_tabula_sapiens_concat.html",
    "title": "Concat",
    "section": "",
    "text": "ID: concat\nNamespace: tabula_sapiens\n\n\n\nSource"
  },
  {
    "objectID": "modules/workflow_tabula_sapiens_concat.html#example-commands",
    "href": "modules/workflow_tabula_sapiens_concat.html#example-commands",
    "title": "Concat",
    "section": "Example commands",
    "text": "Example commands\nYou can run the pipeline using nextflow run.\n\nView help\nYou can use --help as a parameter to get an overview of the possible parameters.\nnextflow run czbiohub/utilities \\\n  -r main_build -latest \\\n  -main-script tabula_sapiens/concat/main.nf \\\n  --help\n\n\nRun command\n\n\nExample of params.yaml\n\n\n\nnextflow run czbiohub/utilities \\\n  -r main_build -latest \\\n  -profile docker \\\n  -main-script tabula_sapiens/concat/main.nf \\\n  -params-file params.yaml\n\n\n\n\n\n\nNote\n\n\n\nReplace -profile docker with -profile podman or -profile singularity depending on the desired backend."
  },
  {
    "objectID": "modules/workflow_tabula_sapiens_concat.html#argument-groups",
    "href": "modules/workflow_tabula_sapiens_concat.html#argument-groups",
    "title": "Concat",
    "section": "Argument groups",
    "text": "Argument groups\n\nInputs\n\n\n\n\n\n\n\n\nName\nDescription\nAttributes\n\n\n\n\n--id\nID of the sample.\nstring, required, example: \"sample\"\n\n\n--input_metadata\nMetadata to be joined to the .obs.\nfile, required, example: \"metadata.csv\"\n\n\n\n\n\nOutput parameters\n\n\n\n\n\n\n\n\nName\nDescription\nAttributes\n\n\n\n\n--output\nThe path to the combined h5mu output file.\nfile, required, default: \"$id.output.h5mu\""
  },
  {
    "objectID": "modules/workflow_tabula_sapiens_concat.html#authors",
    "href": "modules/workflow_tabula_sapiens_concat.html#authors",
    "title": "Concat",
    "section": "Authors",
    "text": "Authors\n\nAngela Pisco   (author)\nRobrecht Cannoodt   (author, maintainer)"
  },
  {
    "objectID": "modules/workflow_tabula_sapiens_concat.html#visualisation",
    "href": "modules/workflow_tabula_sapiens_concat.html#visualisation",
    "title": "Concat",
    "section": "Visualisation",
    "text": "Visualisation\n\n\n\n\nflowchart LR\n    p0(Input)\n    p7(add_id)\n    p15(join_csv)\n    p23(join_uns_to_obs)\n    p26(toSortedList)\n    p33(concat)\n    p41(from_h5mu_to_h5ad)\n    p44(Output)\n    p0-->p7\n    p7-->p15\n    p15-->p23\n    p23-->p26\n    p26-->p33\n    p33-->p41\n    p41-->p44"
  },
  {
    "objectID": "modules/module_convert_from_10xmtx_to_h5mu.html",
    "href": "modules/module_convert_from_10xmtx_to_h5mu.html",
    "title": "From 10xmtx to h5mu",
    "section": "",
    "text": "ID: from_10xmtx_to_h5mu\nNamespace: convert\n\n\n\nSource"
  },
  {
    "objectID": "modules/module_convert_from_10xmtx_to_h5mu.html#example-commands",
    "href": "modules/module_convert_from_10xmtx_to_h5mu.html#example-commands",
    "title": "From 10xmtx to h5mu",
    "section": "Example commands",
    "text": "Example commands\nYou can run the pipeline using nextflow run.\n\nView help\nYou can use --help as a parameter to get an overview of the possible parameters.\nnextflow run openpipelines-bio/openpipeline \\\n  -r main_build -latest \\\n  -main-script target/nextflow/convert/from_10xmtx_to_h5mu/main.nf \\\n  --help\n\n\nRun command\n\n\nExample of params.yaml\n\n# Arguments\ninput: # please fill in - example: \"input_dir_containing_gz_files\"\n# output: \"$id.$key.output.h5mu\"\n\n# Nextflow input-output arguments\npublish_dir: # please fill in - example: \"output/\"\n# param_list: \"my_params.yaml\"\n\nnextflow run openpipelines-bio/openpipeline \\\n  -r main_build -latest \\\n  -profile docker \\\n  -main-script target/nextflow/convert/from_10xmtx_to_h5mu/main.nf \\\n  -params-file params.yaml\n\n\n\n\n\n\nNote\n\n\n\nReplace -profile docker with -profile podman or -profile singularity depending on the desired backend."
  },
  {
    "objectID": "modules/module_convert_from_10xmtx_to_h5mu.html#argument-group",
    "href": "modules/module_convert_from_10xmtx_to_h5mu.html#argument-group",
    "title": "From 10xmtx to h5mu",
    "section": "Argument group",
    "text": "Argument group\n\nArguments\n\n\n\n\n\n\n\n\nName\nDescription\nAttributes\n\n\n\n\n--input\nInput mtx folder\nfile, required, example: \"input_dir_containing_gz_files\"\n\n\n--output\nOutput h5mu file.\nfile, example: \"output.h5mu\""
  },
  {
    "objectID": "modules/module_convert_from_10xmtx_to_h5mu.html#authors",
    "href": "modules/module_convert_from_10xmtx_to_h5mu.html#authors",
    "title": "From 10xmtx to h5mu",
    "section": "Authors",
    "text": "Authors\n\nRobrecht Cannoodt   (maintainer)"
  },
  {
    "objectID": "modules/module_demux_bcl2fastq.html",
    "href": "modules/module_demux_bcl2fastq.html",
    "title": "Bcl2fastq",
    "section": "",
    "text": "ID: bcl2fastq\nNamespace: demux\n\n\n\nSource"
  },
  {
    "objectID": "modules/module_demux_bcl2fastq.html#example-commands",
    "href": "modules/module_demux_bcl2fastq.html#example-commands",
    "title": "Bcl2fastq",
    "section": "Example commands",
    "text": "Example commands\nYou can run the pipeline using nextflow run.\n\nView help\nYou can use --help as a parameter to get an overview of the possible parameters.\nnextflow run openpipelines-bio/openpipeline \\\n  -r main_build -latest \\\n  -main-script target/nextflow/demux/bcl2fastq/main.nf \\\n  --help\n\n\nRun command\n\n\nExample of params.yaml\n\n# Arguments\ninput: # please fill in - example: \"bcl_dir\"\nsample_sheet: # please fill in - example: \"SampleSheet.csv\"\n# output: \"$id.$key.output.output\"\nseparate_reports: false\n# reports: \"$id.$key.reports.reports\"\nignore_missing: false\n\n# Nextflow input-output arguments\npublish_dir: # please fill in - example: \"output/\"\n# param_list: \"my_params.yaml\"\n\nnextflow run openpipelines-bio/openpipeline \\\n  -r main_build -latest \\\n  -profile docker \\\n  -main-script target/nextflow/demux/bcl2fastq/main.nf \\\n  -params-file params.yaml\n\n\n\n\n\n\nNote\n\n\n\nReplace -profile docker with -profile podman or -profile singularity depending on the desired backend."
  },
  {
    "objectID": "modules/module_demux_bcl2fastq.html#argument-group",
    "href": "modules/module_demux_bcl2fastq.html#argument-group",
    "title": "Bcl2fastq",
    "section": "Argument group",
    "text": "Argument group\n\nArguments\n\n\n\n\n\n\n\n\nName\nDescription\nAttributes\n\n\n\n\n--input\nInput run directory\nfile, required, example: \"bcl_dir\"\n\n\n--sample_sheet\nPointer to the sample sheet\nfile, required, example: \"SampleSheet.csv\"\n\n\n--output\nOutput directory containig fastq files\nfile, required, example: \"fastq_dir\"\n\n\n--separate_reports\nShould reports be stored in a separate dir. Should be used with the –reports argument.\nboolean_true\n\n\n--reports\nReports directory\nfile, default: \"reports\", example: \"reports_dir\""
  },
  {
    "objectID": "modules/module_demux_bcl2fastq.html#authors",
    "href": "modules/module_demux_bcl2fastq.html#authors",
    "title": "Bcl2fastq",
    "section": "Authors",
    "text": "Authors\n\nToni Verbeiren  (author, maintainer)"
  },
  {
    "objectID": "modules/module_integrate_harmonypy.html",
    "href": "modules/module_integrate_harmonypy.html",
    "title": "Harmonypy",
    "section": "",
    "text": "ID: harmonypy\nNamespace: integrate\n\n\n\nSource\nBased on an implementation in python from https://github.com/slowkow/harmonypy"
  },
  {
    "objectID": "modules/module_integrate_harmonypy.html#example-commands",
    "href": "modules/module_integrate_harmonypy.html#example-commands",
    "title": "Harmonypy",
    "section": "Example commands",
    "text": "Example commands\nYou can run the pipeline using nextflow run.\n\nView help\nYou can use --help as a parameter to get an overview of the possible parameters.\nnextflow run openpipelines-bio/openpipeline \\\n  -r main_build -latest \\\n  -main-script target/nextflow/integrate/harmonypy/main.nf \\\n  --help\n\n\nRun command\n\n\nExample of params.yaml\n\n# Arguments\ninput: # please fill in - example: \"path/to/file\"\n# output: \"$id.$key.output.output\"\nmodality: \"rna\"\nobsm_input: \"X_pca\"\nobsm_output: \"X_pca_integrated\"\ntheta: [2]\nobs_covariates: # please fill in - example: [\"batch\", \"sample\"]\n\n# Nextflow input-output arguments\npublish_dir: # please fill in - example: \"output/\"\n# param_list: \"my_params.yaml\"\n\nnextflow run openpipelines-bio/openpipeline \\\n  -r main_build -latest \\\n  -profile docker \\\n  -main-script target/nextflow/integrate/harmonypy/main.nf \\\n  -params-file params.yaml\n\n\n\n\n\n\nNote\n\n\n\nReplace -profile docker with -profile podman or -profile singularity depending on the desired backend."
  },
  {
    "objectID": "modules/module_integrate_harmonypy.html#argument-group",
    "href": "modules/module_integrate_harmonypy.html#argument-group",
    "title": "Harmonypy",
    "section": "Argument group",
    "text": "Argument group\n\nArguments\n\n\n\n\n\n\n\n\nName\nDescription\nAttributes\n\n\n\n\n--input\nInput h5mu file\nfile, required\n\n\n--output\nOutput h5mu file.\nfile, required\n\n\n--obsm_input\nWhich .obsm slot to use as a starting PCA embedding.\nstring, default: \"X_pca\"\n\n\n--obsm_output\nIn which .obsm slot to store the resulting integrated embedding.\nstring, default: \"X_pca_integrated\"\n\n\n--theta\nDiversity clustering penalty parameter. Specify for each variable in group.by.vars. theta=0 does not encourage any diversity. Larger values of theta result in more diverse clusters.\ndouble, default: 2\n\n\n--obs_covariates\nThe .obs field(s) that define the covariate(s) to regress out.\nstring, required, example: \"batch\", example: \"sample\""
  },
  {
    "objectID": "modules/module_integrate_harmonypy.html#authors",
    "href": "modules/module_integrate_harmonypy.html#authors",
    "title": "Harmonypy",
    "section": "Authors",
    "text": "Authors\n\nDries Schaumont   (maintainer)\nRobrecht Cannoodt   (contributor)"
  },
  {
    "objectID": "modules/module_report_mermaid.html",
    "href": "modules/module_report_mermaid.html",
    "title": "Mermaid",
    "section": "",
    "text": "ID: mermaid\nNamespace: report\n\n\n\nSource\nSee https://mermaid-js.github.io/mermaid/#/Tutorials. This component uses the external mermaid.ink service to generate visual networks"
  },
  {
    "objectID": "modules/module_report_mermaid.html#example-commands",
    "href": "modules/module_report_mermaid.html#example-commands",
    "title": "Mermaid",
    "section": "Example commands",
    "text": "Example commands\nYou can run the pipeline using nextflow run.\n\nView help\nYou can use --help as a parameter to get an overview of the possible parameters.\nnextflow run openpipelines-bio/openpipeline \\\n  -r main_build -latest \\\n  -main-script target/nextflow/report/mermaid/main.nf \\\n  --help\n\n\nRun command\n\n\nExample of params.yaml\n\n# Arguments\ninput: # please fill in - example: \"path/to/file\"\n# output: \"$id.$key.output.output\"\ntest: \"test.py\"\n\n# Nextflow input-output arguments\npublish_dir: # please fill in - example: \"output/\"\n# param_list: \"my_params.yaml\"\n\nnextflow run openpipelines-bio/openpipeline \\\n  -r main_build -latest \\\n  -profile docker \\\n  -main-script target/nextflow/report/mermaid/main.nf \\\n  -params-file params.yaml\n\n\n\n\n\n\nNote\n\n\n\nReplace -profile docker with -profile podman or -profile singularity depending on the desired backend."
  },
  {
    "objectID": "modules/module_report_mermaid.html#argument-group",
    "href": "modules/module_report_mermaid.html#argument-group",
    "title": "Mermaid",
    "section": "Argument group",
    "text": "Argument group\n\nArguments\n\n\n\n\n\n\n\n\nName\nDescription\nAttributes\n\n\n\n\n--input\nInput directory\nfile, required\n\n\n--output\nGenerated network as output.\nfile, required\n\n\n--test\nThe test file to be executed\nfile, default: \"test.py\""
  },
  {
    "objectID": "modules/module_report_mermaid.html#authors",
    "href": "modules/module_report_mermaid.html#authors",
    "title": "Mermaid",
    "section": "Authors",
    "text": "Authors\n\nDries De Maeyer  (maintainer)"
  },
  {
    "objectID": "modules/module_convert_from_bd_to_10x_molecular_barcode_tags.html",
    "href": "modules/module_convert_from_bd_to_10x_molecular_barcode_tags.html",
    "title": "From bd to 10x molecular barcode tags",
    "section": "",
    "text": "ID: from_bd_to_10x_molecular_barcode_tags\nNamespace: convert\n\n\n\nSource"
  },
  {
    "objectID": "modules/module_convert_from_bd_to_10x_molecular_barcode_tags.html#example-commands",
    "href": "modules/module_convert_from_bd_to_10x_molecular_barcode_tags.html#example-commands",
    "title": "From bd to 10x molecular barcode tags",
    "section": "Example commands",
    "text": "Example commands\nYou can run the pipeline using nextflow run.\n\nView help\nYou can use --help as a parameter to get an overview of the possible parameters.\nnextflow run openpipelines-bio/openpipeline \\\n  -r main_build -latest \\\n  -main-script target/nextflow/convert/from_bd_to_10x_molecular_barcode_tags/main.nf \\\n  --help\n\n\nRun command\n\n\nExample of params.yaml\n\n# Arguments\ninput: # please fill in - example: \"input.bam\"\n# output: \"$id.$key.output.sam\"\nbam: false\n# threads: 123\n\n# Nextflow input-output arguments\npublish_dir: # please fill in - example: \"output/\"\n# param_list: \"my_params.yaml\"\n\nnextflow run openpipelines-bio/openpipeline \\\n  -r main_build -latest \\\n  -profile docker \\\n  -main-script target/nextflow/convert/from_bd_to_10x_molecular_barcode_tags/main.nf \\\n  -params-file params.yaml\n\n\n\n\n\n\nNote\n\n\n\nReplace -profile docker with -profile podman or -profile singularity depending on the desired backend."
  },
  {
    "objectID": "modules/module_convert_from_bd_to_10x_molecular_barcode_tags.html#argument-group",
    "href": "modules/module_convert_from_bd_to_10x_molecular_barcode_tags.html#argument-group",
    "title": "From bd to 10x molecular barcode tags",
    "section": "Argument group",
    "text": "Argument group\n\nArguments\n\n\n\n\n\n\n\n\nName\nDescription\nAttributes\n\n\n\n\n--input\nInput SAM or BAM file.\nfile, required, example: \"input.bam\"\n\n\n--output\nOutput alignment file.\nfile, example: \"output.sam\"\n\n\n--bam\nOutput a BAM file.\nboolean_true\n\n\n--threads\nNumber of threads\ninteger"
  },
  {
    "objectID": "modules/module_convert_from_bd_to_10x_molecular_barcode_tags.html#authors",
    "href": "modules/module_convert_from_bd_to_10x_molecular_barcode_tags.html#authors",
    "title": "From bd to 10x molecular barcode tags",
    "section": "Authors",
    "text": "Authors\n\nDries Schaumont   (maintainer)"
  },
  {
    "objectID": "modules/module_filter_subset_h5mu.html",
    "href": "modules/module_filter_subset_h5mu.html",
    "title": "Subset h5mu",
    "section": "",
    "text": "ID: subset_h5mu\nNamespace: filter\n\n\n\nSource"
  },
  {
    "objectID": "modules/module_filter_subset_h5mu.html#example-commands",
    "href": "modules/module_filter_subset_h5mu.html#example-commands",
    "title": "Subset h5mu",
    "section": "Example commands",
    "text": "Example commands\nYou can run the pipeline using nextflow run.\n\nView help\nYou can use --help as a parameter to get an overview of the possible parameters.\nnextflow run openpipelines-bio/openpipeline \\\n  -r main_build -latest \\\n  -main-script target/nextflow/filter/subset_h5mu/main.nf \\\n  --help\n\n\nRun command\n\n\nExample of params.yaml\n\n# Arguments\ninput: # please fill in - example: \"input.h5mu\"\nmodality: \"rna\"\n# output: \"$id.$key.output.h5mu\"\n# number_of_observations: 5\n\n# Nextflow input-output arguments\npublish_dir: # please fill in - example: \"output/\"\n# param_list: \"my_params.yaml\"\n\nnextflow run openpipelines-bio/openpipeline \\\n  -r main_build -latest \\\n  -profile docker \\\n  -main-script target/nextflow/filter/subset_h5mu/main.nf \\\n  -params-file params.yaml\n\n\n\n\n\n\nNote\n\n\n\nReplace -profile docker with -profile podman or -profile singularity depending on the desired backend."
  },
  {
    "objectID": "modules/module_filter_subset_h5mu.html#argument-group",
    "href": "modules/module_filter_subset_h5mu.html#argument-group",
    "title": "Subset h5mu",
    "section": "Argument group",
    "text": "Argument group\n\nArguments\n\n\n\n\n\n\n\n\nName\nDescription\nAttributes\n\n\n\n\n--input\nInput h5mu file\nfile, required, example: \"input.h5mu\"\n\n\n--output\nOutput h5mu file.\nfile, example: \"output.h5mu\"\n\n\n--number_of_observations\nNumber of observations to be selected from the h5mu file.\ninteger, example: 5"
  },
  {
    "objectID": "modules/module_filter_subset_h5mu.html#authors",
    "href": "modules/module_filter_subset_h5mu.html#authors",
    "title": "Subset h5mu",
    "section": "Authors",
    "text": "Authors\n\nDries Schaumont   (maintainer)"
  },
  {
    "objectID": "modules/workflow_multiomics_integration.html",
    "href": "modules/workflow_multiomics_integration.html",
    "title": "Integration",
    "section": "",
    "text": "ID: integration\nNamespace: multiomics\n\n\n\nSource"
  },
  {
    "objectID": "modules/workflow_multiomics_integration.html#example-commands",
    "href": "modules/workflow_multiomics_integration.html#example-commands",
    "title": "Integration",
    "section": "Example commands",
    "text": "Example commands\nYou can run the pipeline using nextflow run.\n\nView help\nYou can use --help as a parameter to get an overview of the possible parameters.\nnextflow run openpipelines-bio/openpipeline \\\n  -r main_build -latest \\\n  -main-script workflows/multiomics/integration/main.nf \\\n  --help\n\n\nRun command\n\n\nExample of params.yaml\n\n# Inputs\nid: # please fill in - example: \"foo\"\ninput: # please fill in - example: \"dataset.h5mu\"\nlayer: \"log_normalized\"\nobs_covariates: # please fill in - example: [\"batch\", \"sample\"]\n\n# Outputs\n# output: \"$id.$key.output.h5mu\"\nobsm_pca: \"X_pca\"\nobsm_integrated: \"X_pca_integrated\"\nuns_neighbors: \"neighbors\"\nobsp_neighbor_distances: \"distances\"\nobsp_neighbor_connectivities: \"connectivities\"\nobs_cluster: \"leiden\"\nobsm_umap: \"X_umap\"\n\n# Nextflow input-output arguments\npublish_dir: # please fill in - example: \"output/\"\n# param_list: \"my_params.yaml\"\n\nnextflow run openpipelines-bio/openpipeline \\\n  -r main_build -latest \\\n  -profile docker \\\n  -main-script workflows/multiomics/integration/main.nf \\\n  -params-file params.yaml\n\n\n\n\n\n\nNote\n\n\n\nReplace -profile docker with -profile podman or -profile singularity depending on the desired backend."
  },
  {
    "objectID": "modules/workflow_multiomics_integration.html#argument-groups",
    "href": "modules/workflow_multiomics_integration.html#argument-groups",
    "title": "Integration",
    "section": "Argument groups",
    "text": "Argument groups\n\nInputs\n\n\n\n\n\n\n\n\nName\nDescription\nAttributes\n\n\n\n\n--id\nID of the sample.\nstring, required, example: \"foo\"\n\n\n--input\nPath to the sample.\nfile, required, example: \"dataset.h5mu\"\n\n\n--layer\nuse specified layer for expression values instead of the .X object from the modality.\nstring, default: \"log_normalized\"\n\n\n--obs_covariates\nThe .obs field(s) that define the covariate(s) to regress out.\nstring, required, example: \"batch\", example: \"sample\"\n\n\n\n\n\nOutputs\n\n\n\n\n\n\n\n\nName\nDescription\nAttributes\n\n\n\n\n--output\nDestination path to the output.\nfile, required, example: \"output.h5mu\"\n\n\n--obsm_pca\nIn which .obsm slot to store the resulting PCA embedding.\nstring, default: \"X_pca\"\n\n\n--obsm_integrated\nIn which .obsm slot to store the resulting integrated embedding.\nstring, default: \"X_pca_integrated\"\n\n\n--uns_neighbors\nIn which .uns slot to store various neighbor output objects.\nstring, default: \"neighbors\"\n\n\n--obsp_neighbor_distances\nIn which .obsp slot to store the distance matrix between the resulting neighbors.\nstring, default: \"distances\"\n\n\n--obsp_neighbor_connectivities\nIn which .obsp slot to store the connectivities matrix between the resulting neighbors.\nstring, default: \"connectivities\"\n\n\n--obs_cluster\nName of the .obs key under which to add the cluster labels.\nstring, default: \"leiden\"\n\n\n--obsm_umap\nIn which .obsm slot to store the resulting UMAP embedding.\nstring, default: \"X_umap\""
  },
  {
    "objectID": "modules/workflow_multiomics_integration.html#authors",
    "href": "modules/workflow_multiomics_integration.html#authors",
    "title": "Integration",
    "section": "Authors",
    "text": "Authors\n\nDries De Maeyer  (author)\nRobrecht Cannoodt   (author, maintainer)\nDries Schaumont   (author)"
  },
  {
    "objectID": "modules/workflow_multiomics_integration.html#visualisation",
    "href": "modules/workflow_multiomics_integration.html#visualisation",
    "title": "Integration",
    "section": "Visualisation",
    "text": "Visualisation\n\n\n\n\nflowchart LR\n    p0(Input)\n    p9(pca)\n    p17(harmonypy)\n    p25(find_neighbors)\n    p33(leiden)\n    p41(umap)\n    p48(Output)\n    p0-->p9\n    p9-->p17\n    p17-->p25\n    p25-->p33\n    p33-->p41\n    p41-->p48"
  },
  {
    "objectID": "modules/module_files_make_params.html",
    "href": "modules/module_files_make_params.html",
    "title": "Make params",
    "section": "",
    "text": "ID: make_params\nNamespace: files\n\n\n\nSource"
  },
  {
    "objectID": "modules/module_files_make_params.html#example-commands",
    "href": "modules/module_files_make_params.html#example-commands",
    "title": "Make params",
    "section": "Example commands",
    "text": "Example commands\nYou can run the pipeline using nextflow run.\n\nView help\nYou can use --help as a parameter to get an overview of the possible parameters.\nnextflow run openpipelines-bio/openpipeline \\\n  -r main_build -latest \\\n  -main-script target/nextflow/files/make_params/main.nf \\\n  --help\n\n\nRun command\n\n\nExample of params.yaml\n\n# Arguments\nbase_dir: # please fill in - example: \"/path/to/dir\"\npattern: # please fill in - example: \"*.fastq.gz\"\nn_dirname_drop: 0\nn_basename_id: 0\nid_name: \"id\"\npath_name: \"path\"\n# group_name: \"param_list\"\n# output: \"$id.$key.output.yaml\"\n\n# Nextflow input-output arguments\npublish_dir: # please fill in - example: \"output/\"\n# param_list: \"my_params.yaml\"\n\nnextflow run openpipelines-bio/openpipeline \\\n  -r main_build -latest \\\n  -profile docker \\\n  -main-script target/nextflow/files/make_params/main.nf \\\n  -params-file params.yaml\n\n\n\n\n\n\nNote\n\n\n\nReplace -profile docker with -profile podman or -profile singularity depending on the desired backend."
  },
  {
    "objectID": "modules/module_files_make_params.html#argument-group",
    "href": "modules/module_files_make_params.html#argument-group",
    "title": "Make params",
    "section": "Argument group",
    "text": "Argument group\n\nArguments\n\n\n\n\n\n\n\n\nName\nDescription\nAttributes\n\n\n\n\n--base_dir\nBase directory to search recursively\nfile, required, example: \"/path/to/dir\"\n\n\n--pattern\nAn optional regular expression. Only file names which match the regular expression will be matched.\nstring, required, example: \"*.fastq.gz\"\n\n\n--n_dirname_drop\nFor every matched file, the parent directory will be traversed N times.\ninteger, default: 0\n\n\n--n_basename_id\nThe unique identifiers will consist of at least N dirnames.\ninteger, default: 0\n\n\n--id_name\nThe name for storing the identifier field in the yaml.\nstring, default: \"id\"\n\n\n--path_name\nThe name for storing the path field in the yaml.\nstring, default: \"path\"\n\n\n--group_name\nTop level name for the group of entries.\nstring, example: \"param_list\"\n\n\n--output\nOutput YAML file.\nfile, required, example: \"params.yaml\""
  },
  {
    "objectID": "modules/module_files_make_params.html#authors",
    "href": "modules/module_files_make_params.html#authors",
    "title": "Make params",
    "section": "Authors",
    "text": "Authors\n\nAngela Pisco   (author)\nRobrecht Cannoodt   (maintainer, author)"
  },
  {
    "objectID": "modules/module_correction_cellbender_remove_background.html",
    "href": "modules/module_correction_cellbender_remove_background.html",
    "title": "Cellbender remove background",
    "section": "",
    "text": "ID: cellbender_remove_background\nNamespace: correction\n\n\n\nSource\nThis module removes counts due to ambient RNA molecules and random barcode swapping from (raw) UMI-based scRNA-seq count matrices. At the moment, only the count matrices produced by the CellRanger count pipeline is supported. Support for additional tools and protocols will be added in the future. A quick start tutorial can be found here.\nFleming et al. 2022, bioRxiv."
  },
  {
    "objectID": "modules/module_correction_cellbender_remove_background.html#example-commands",
    "href": "modules/module_correction_cellbender_remove_background.html#example-commands",
    "title": "Cellbender remove background",
    "section": "Example commands",
    "text": "Example commands\nYou can run the pipeline using nextflow run.\n\nView help\nYou can use --help as a parameter to get an overview of the possible parameters.\nnextflow run openpipelines-bio/openpipeline \\\n  -r main_build -latest \\\n  -main-script target/nextflow/correction/cellbender_remove_background/main.nf \\\n  --help\n\n\nRun command\n\n\nExample of params.yaml\n\n# Inputs\ninput: # please fill in - example: \"input.h5\"\nmodality: \"rna\"\n\n# Outputs\n# output: \"$id.$key.output.h5\"\nlayer_output: \"corrected\"\nobs_latent_rt_efficiency: \"latent_rt_efficiency\"\nobs_latent_cell_probability: \"latent_cell_probability\"\nobs_latent_scale: \"latent_scale\"\nvar_ambient_expression: \"ambient_expression\"\n\n# Arguments\n# expected_cells: 1000\n# total_droplets_included: 25000\nexpected_cells_from_qc: true\nmodel: \"full\"\nepochs: 150\nlow_count_threshold: 15\nz_dim: 100\nz_layers: [500]\ntraining_fraction: 0.9\nempty_drop_training_fraction: 0.5\nfpr: [0.01]\nexclude_antibody_capture: false\n# learning_rate: 1.0E-4\ncuda: false\n\n# Nextflow input-output arguments\npublish_dir: # please fill in - example: \"output/\"\n# param_list: \"my_params.yaml\"\n\nnextflow run openpipelines-bio/openpipeline \\\n  -r main_build -latest \\\n  -profile docker \\\n  -main-script target/nextflow/correction/cellbender_remove_background/main.nf \\\n  -params-file params.yaml\n\n\n\n\n\n\nNote\n\n\n\nReplace -profile docker with -profile podman or -profile singularity depending on the desired backend."
  },
  {
    "objectID": "modules/module_correction_cellbender_remove_background.html#argument-groups",
    "href": "modules/module_correction_cellbender_remove_background.html#argument-groups",
    "title": "Cellbender remove background",
    "section": "Argument groups",
    "text": "Argument groups\n\nInputs\n\n\n\n\n\n\n\n\nName\nDescription\nAttributes\n\n\n\n\n--input\nInput file.\nfile, required, example: \"input.h5\"\n\n\n--modality\nList of modalities to process.\nstring, default: \"rna\"\n\n\n\n\n\nOutputs\n\n\n\n\n\n\n\n\nName\nDescription\nAttributes\n\n\n\n\n--output\nFull count matrix as an h5mu file, with background RNA removed. This file contains all the original droplet barcodes.\nfile, required, example: \"output.h5\"\n\n\n--layer_output\nOutput layer\nstring, default: \"corrected\"\n\n\n\n\n\nArguments\n\n\n\n\n\n\n\n\nName\nDescription\nAttributes\n\n\n\n\n--expected_cells\nNumber of cells expected in the dataset (a rough estimate within a factor of 2 is sufficient).\ninteger, example: 1000\n\n\n--total_droplets_included\nThe number of droplets from the rank-ordered UMI plot that will be analyzed. The largest ‘total_droplets’ droplets will have their cell probabilities inferred as an output.\ninteger, example: 25000\n\n\n--expected_cells_from_qc\nWill use the Cell Ranger QC to determine the estimated number of cells\nboolean, default: TRUE\n\n\n--model\nWhich model is being used for count data. ‘simple’ does not model either ambient RNA or random barcode swapping (for debugging purposes – not recommended). ‘ambient’ assumes background RNA is incorporated into droplets. ‘swapping’ assumes background RNA comes from random barcode swapping. ‘full’ uses a combined ambient and swapping model.\nstring, default: \"full\"\n\n\n--epochs\nNumber of epochs to train.\ninteger, default: 150\n\n\n--low_count_threshold\nDroplets with UMI counts below this number are completely excluded from the analysis. This can help identify the correct prior for empty droplet counts in the rare case where empty counts are extremely high (over 200).\ninteger, default: 15\n\n\n--z_dim\nDimension of latent variable z.\ninteger, default: 100\n\n\n--z_layers\nDimension of hidden layers in the encoder for z.\ninteger, default: 500\n\n\n--training_fraction\nTraining detail: the fraction of the data used for training. The rest is never seen by the inference algorithm. Speeds up learning.\ndouble, default: 0.9\n\n\n--empty_drop_training_fraction\nTraining detail: the fraction of the training data each epoch that is drawn (randomly sampled) from surely empty droplets.\ndouble, default: 0.5\n\n\n--fpr\nTarget false positive rate in (0, 1). A false positive is a true signal count that is erroneously removed. More background removal is accompanied by more signal removal at high values of FPR. You can specify multiple values, which will create multiple output files.\ndouble, default: 0.01\n\n\n--exclude_antibody_capture\nIncluding the flag –exclude-antibody-capture will cause remove-background to operate on gene counts only, ignoring other features.\nboolean_true\n\n\n--learning_rate\nTraining detail: lower learning rate for inference. A OneCycle learning rate schedule is used, where the upper learning rate is ten times this value. (For this value, probably do not exceed 1e-3).\ndouble, example: 1e-04\n\n\n--cuda\nIncluding the flag –cuda will run the inference on a GPU.\nboolean_true"
  },
  {
    "objectID": "modules/module_correction_cellbender_remove_background.html#authors",
    "href": "modules/module_correction_cellbender_remove_background.html#authors",
    "title": "Cellbender remove background",
    "section": "Authors",
    "text": "Authors"
  },
  {
    "objectID": "modules/module_process_10xh5_filter_10xh5.html",
    "href": "modules/module_process_10xh5_filter_10xh5.html",
    "title": "Filter 10xh5",
    "section": "",
    "text": "ID: filter_10xh5\nNamespace: process_10xh5\n\n\n\nSource"
  },
  {
    "objectID": "modules/module_process_10xh5_filter_10xh5.html#example-commands",
    "href": "modules/module_process_10xh5_filter_10xh5.html#example-commands",
    "title": "Filter 10xh5",
    "section": "Example commands",
    "text": "Example commands\nYou can run the pipeline using nextflow run.\n\nView help\nYou can use --help as a parameter to get an overview of the possible parameters.\nnextflow run openpipelines-bio/openpipeline \\\n  -r main_build -latest \\\n  -main-script target/nextflow/process_10xh5/filter_10xh5/main.nf \\\n  --help\n\n\nRun command\n\n\nExample of params.yaml\n\n# Arguments\ninput: # please fill in - example: \"pbmc_1k_protein_v3_raw_feature_bc_matrix.h5\"\n# output: \"$id.$key.output.h5\"\nmin_library_size: 0\nmin_cells_per_gene: 0\n# keep_feature_types: [\"Antibody Capture\"]\nverbose: false\n\n# Nextflow input-output arguments\npublish_dir: # please fill in - example: \"output/\"\n# param_list: \"my_params.yaml\"\n\nnextflow run openpipelines-bio/openpipeline \\\n  -r main_build -latest \\\n  -profile docker \\\n  -main-script target/nextflow/process_10xh5/filter_10xh5/main.nf \\\n  -params-file params.yaml\n\n\n\n\n\n\nNote\n\n\n\nReplace -profile docker with -profile podman or -profile singularity depending on the desired backend."
  },
  {
    "objectID": "modules/module_process_10xh5_filter_10xh5.html#argument-group",
    "href": "modules/module_process_10xh5_filter_10xh5.html#argument-group",
    "title": "Filter 10xh5",
    "section": "Argument group",
    "text": "Argument group\n\nArguments\n\n\n\n\n\n\n\n\nName\nDescription\nAttributes\n\n\n\n\n--input\nAn h5 file from the 10x genomics website.\nfile, required, example: \"pbmc_1k_protein_v3_raw_feature_bc_matrix.h5\"\n\n\n--output\nOutput h5 file.\nfile, required, example: \"pbmc_1k_protein_v3_raw_feature_bc_matrix_filtered.h5\"\n\n\n--min_library_size\nMinimum library size.\ninteger, default: 0\n\n\n--min_cells_per_gene\nMinimum number of cells per gene.\ninteger, default: 0\n\n\n--keep_feature_types\nSpecify which feature types will never be filtered out\nstring, example: \"Antibody Capture\"\n\n\n--verbose\nIncrease verbosity\nboolean_true"
  },
  {
    "objectID": "modules/module_process_10xh5_filter_10xh5.html#authors",
    "href": "modules/module_process_10xh5_filter_10xh5.html#authors",
    "title": "Filter 10xh5",
    "section": "Authors",
    "text": "Authors\n\nRobrecht Cannoodt   (maintainer)"
  },
  {
    "objectID": "modules/workflow_ingestion_cellranger_postprocessing.html",
    "href": "modules/workflow_ingestion_cellranger_postprocessing.html",
    "title": "Cell Ranger post-processing",
    "section": "",
    "text": "ID: cellranger_postprocessing\nNamespace: ingestion\n\n\n\nSource"
  },
  {
    "objectID": "modules/workflow_ingestion_cellranger_postprocessing.html#example-commands",
    "href": "modules/workflow_ingestion_cellranger_postprocessing.html#example-commands",
    "title": "Cell Ranger post-processing",
    "section": "Example commands",
    "text": "Example commands\nYou can run the pipeline using nextflow run.\n\nView help\nYou can use --help as a parameter to get an overview of the possible parameters.\nnextflow run openpipelines-bio/openpipeline \\\n  -r main_build -latest \\\n  -main-script workflows/ingestion/cellranger_postprocessing/main.nf \\\n  --help\n\n\nRun command\n\n\nExample of params.yaml\n\n# Inputs\nid: # please fill in - example: \"foo\"\ninput: # please fill in - example: \"input.h5mu\"\n\n# Outputs\n# output: \"$id.$key.output.output\"\n\n# Correction arguments\nperform_correction: false\n\n# Filtering arguments\n# min_genes: 100\n# min_counts: 1000\n\n# Nextflow input-output arguments\npublish_dir: # please fill in - example: \"output/\"\n# param_list: \"my_params.yaml\"\n\nnextflow run openpipelines-bio/openpipeline \\\n  -r main_build -latest \\\n  -profile docker \\\n  -main-script workflows/ingestion/cellranger_postprocessing/main.nf \\\n  -params-file params.yaml\n\n\n\n\n\n\nNote\n\n\n\nReplace -profile docker with -profile podman or -profile singularity depending on the desired backend."
  },
  {
    "objectID": "modules/workflow_ingestion_cellranger_postprocessing.html#argument-groups",
    "href": "modules/workflow_ingestion_cellranger_postprocessing.html#argument-groups",
    "title": "Cell Ranger post-processing",
    "section": "Argument groups",
    "text": "Argument groups\n\nInputs\n\n\n\n\n\n\n\n\nName\nDescription\nAttributes\n\n\n\n\n--id\nID of the sample.\nstring, required, example: \"foo\"\n\n\n--input\nInput h5mu file created by running Cell Ranger and converting its output to h5mu.\nfile, required, example: \"input.h5mu\"\n\n\n\n\n\nOutputs\n\n\n\nName\nDescription\nAttributes\n\n\n\n\n--output\nThe converted h5mu file.\nfile\n\n\n\n\n\nCorrection arguments\n\n\n\n\n\n\n\n\nName\nDescription\nAttributes\n\n\n\n\n--perform_correction\nWhether or not to run CellBender to perform count correction.\nboolean_true\n\n\n\n\n\nFiltering arguments\n\n\n\n\n\n\n\n\nName\nDescription\nAttributes\n\n\n\n\n--min_genes\nMinimum number of counts required for a cell to pass filtering.\ninteger, example: 100\n\n\n--min_counts\nMinimum number of genes expressed required for a cell to pass filtering.\ninteger, example: 1000"
  },
  {
    "objectID": "modules/workflow_ingestion_cellranger_postprocessing.html#authors",
    "href": "modules/workflow_ingestion_cellranger_postprocessing.html#authors",
    "title": "Cell Ranger post-processing",
    "section": "Authors",
    "text": "Authors\n\nAngela Pisco   (author)\nRobrecht Cannoodt   (author, maintainer)"
  },
  {
    "objectID": "modules/workflow_ingestion_cellranger_postprocessing.html#visualisation",
    "href": "modules/workflow_ingestion_cellranger_postprocessing.html#visualisation",
    "title": "Cell Ranger post-processing",
    "section": "Visualisation",
    "text": "Visualisation\n\n\n\n\nflowchart LR\n    p0(Input)\n    p7(from_10xh5_to_h5mu)\n    p15(subset_h5mu)\n    p21(filter)\n    p26(cellbender_remove_background)\n    p31(mix)\n    p30(filter)\n    p32(filter)\n    p38(filter_with_counts)\n    p42(mix)\n    p41(filter)\n    p48(publish)\n    p54(Output)\n    p30-->p31\n    p31-->p32\n    p31-->p41\n    p41-->p42\n    p0-->p7\n    p7-->p15\n    p15-->p21\n    p15-->p30\n    p21-->p26\n    p26-->p31\n    p32-->p38\n    p38-->p42\n    p42-->p48\n    p48-->p54"
  },
  {
    "objectID": "modules/module_multiomics_cellranger_arc_aggr.html",
    "href": "modules/module_multiomics_cellranger_arc_aggr.html",
    "title": "Cellranger arc aggr",
    "section": "",
    "text": "ID: cellranger_arc_aggr\nNamespace: multiomics\n\n\n\nSource"
  },
  {
    "objectID": "modules/module_multiomics_cellranger_arc_aggr.html#example-commands",
    "href": "modules/module_multiomics_cellranger_arc_aggr.html#example-commands",
    "title": "Cellranger arc aggr",
    "section": "Example commands",
    "text": "Example commands\nYou can run the pipeline using nextflow run.\n\nView help\nYou can use --help as a parameter to get an overview of the possible parameters.\nnextflow run czbiohub/utilities \\\n  -r main_build -latest \\\n  -main-script target/nextflow/multiomics/cellranger_arc_aggr/main.nf \\\n  --help\n\n\nRun command\n\n\nExample of params.yaml\n\n\n\nnextflow run czbiohub/utilities \\\n  -r main_build -latest \\\n  -profile docker \\\n  -main-script target/nextflow/multiomics/cellranger_arc_aggr/main.nf \\\n  -params-file params.yaml\n\n\n\n\n\n\nNote\n\n\n\nReplace -profile docker with -profile podman or -profile singularity depending on the desired backend."
  },
  {
    "objectID": "modules/module_multiomics_cellranger_arc_aggr.html#argument-group",
    "href": "modules/module_multiomics_cellranger_arc_aggr.html#argument-group",
    "title": "Cellranger arc aggr",
    "section": "Argument group",
    "text": "Argument group\n\nArguments\n\n\n\n\n\n\n\n\nName\nDescription\nAttributes\n\n\n\n\n--data\nPath to the data\nfile, required, example: \"/path/to/data\"\n\n\n--reference_genome\nPath to the reference genome\nfile, required, example: \"/path/to/reference_genome\"\n\n\n--output\nPath to the output directory\nfile, required, example: \"/path/to/directory\"\n\n\n--run_id\nThe run ID\nstring, required\n\n\n--peaks\nPath to the bed file to use for peak calling\nfile, example: \"/path/to/bed\"\n\n\n--neurips\nUnknown\nboolean, default: FALSE"
  },
  {
    "objectID": "modules/module_multiomics_cellranger_arc_aggr.html#authors",
    "href": "modules/module_multiomics_cellranger_arc_aggr.html#authors",
    "title": "Cellranger arc aggr",
    "section": "Authors",
    "text": "Authors"
  },
  {
    "objectID": "modules/module_metadata_join_csv.html",
    "href": "modules/module_metadata_join_csv.html",
    "title": "Join csv",
    "section": "",
    "text": "ID: join_csv\nNamespace: metadata\n\n\n\nSource"
  },
  {
    "objectID": "modules/module_metadata_join_csv.html#example-commands",
    "href": "modules/module_metadata_join_csv.html#example-commands",
    "title": "Join csv",
    "section": "Example commands",
    "text": "Example commands\nYou can run the pipeline using nextflow run.\n\nView help\nYou can use --help as a parameter to get an overview of the possible parameters.\nnextflow run openpipelines-bio/openpipeline \\\n  -r main_build -latest \\\n  -main-script target/nextflow/metadata/join_csv/main.nf \\\n  --help\n\n\nRun command\n\n\nExample of params.yaml\n\n# MuData Input\ninput: # please fill in - example: \"input.h5mu\"\nmodality: \"rna\"\n# obs_key: \"foo\"\n# var_key: \"foo\"\n\n# MuData Output\n# output: \"$id.$key.output.h5mu\"\n\n# Metadata Input\ninput_csv: # please fill in - example: \"metadata.csv\"\ncsv_key: \"id\"\n\n# Nextflow input-output arguments\npublish_dir: # please fill in - example: \"output/\"\n# param_list: \"my_params.yaml\"\n\nnextflow run openpipelines-bio/openpipeline \\\n  -r main_build -latest \\\n  -profile docker \\\n  -main-script target/nextflow/metadata/join_csv/main.nf \\\n  -params-file params.yaml\n\n\n\n\n\n\nNote\n\n\n\nReplace -profile docker with -profile podman or -profile singularity depending on the desired backend."
  },
  {
    "objectID": "modules/module_metadata_join_csv.html#argument-groups",
    "href": "modules/module_metadata_join_csv.html#argument-groups",
    "title": "Join csv",
    "section": "Argument groups",
    "text": "Argument groups\n\nMuData Input\n\n\n\n\n\n\n\n\nName\nDescription\nAttributes\n\n\n\n\n--input\nInput h5mu file\nfile, required, example: \"input.h5mu\"\n\n\n--obs_key\nObs column name where the sample id can be found for each observation to join on. Useful when adding metadata to concatenated samples. Mutually exclusive with –var_key and –sample_id”\nstring\n\n\n--var_key\nVar column name where the sample id can be found for each observation to join on. Useful when adding metadata to concatenated samples. Mutually exclusive with –var_key and –sample_id.”\nstring\n\n\n\n\n\nMuData Output\n\n\n\n\n\n\n\n\nName\nDescription\nAttributes\n\n\n\n\n--output\nOutput h5mu file.\nfile, required, example: \"output.h5mu\"\n\n\n\n\n\nMetadata Input\n\n\n\n\n\n\n\n\nName\nDescription\nAttributes\n\n\n\n\n--input_csv\n.csv file containing metadata\nfile, required, example: \"metadata.csv\"\n\n\n--csv_key\ncolumn of the the csv that corresponds to the sample id.\nstring, default: \"id\""
  },
  {
    "objectID": "modules/module_metadata_join_csv.html#authors",
    "href": "modules/module_metadata_join_csv.html#authors",
    "title": "Join csv",
    "section": "Authors",
    "text": "Authors\n\nDries Schaumont   (author)"
  },
  {
    "objectID": "modules/workflow_ingestion_conversion.html",
    "href": "modules/workflow_ingestion_conversion.html",
    "title": "Conversion",
    "section": "",
    "text": "ID: conversion\nNamespace: ingestion\n\n\n\nSource"
  },
  {
    "objectID": "modules/workflow_ingestion_conversion.html#example-commands",
    "href": "modules/workflow_ingestion_conversion.html#example-commands",
    "title": "Conversion",
    "section": "Example commands",
    "text": "Example commands\nYou can run the pipeline using nextflow run.\n\nView help\nYou can use --help as a parameter to get an overview of the possible parameters.\nnextflow run openpipelines-bio/openpipeline \\\n  -r main_build -latest \\\n  -main-script workflows/ingestion/conversion/main.nf \\\n  --help\n\n\nRun command\n\n\nExample of params.yaml\n\n# Inputs\nid: # please fill in - example: \"foo\"\ninput: # please fill in - example: [\"input.h5mu\"]\ninput_type: # please fill in - example: \"foo\"\n\n# Outputs\n# output: \"$id.$key.output.h5mu\"\n\n# Conversion from h5ad\n# modality: [\"foo\"]\n\n# Nextflow input-output arguments\npublish_dir: # please fill in - example: \"output/\"\n# param_list: \"my_params.yaml\"\n\nnextflow run openpipelines-bio/openpipeline \\\n  -r main_build -latest \\\n  -profile docker \\\n  -main-script workflows/ingestion/conversion/main.nf \\\n  -params-file params.yaml\n\n\n\n\n\n\nNote\n\n\n\nReplace -profile docker with -profile podman or -profile singularity depending on the desired backend."
  },
  {
    "objectID": "modules/workflow_ingestion_conversion.html#argument-groups",
    "href": "modules/workflow_ingestion_conversion.html#argument-groups",
    "title": "Conversion",
    "section": "Argument groups",
    "text": "Argument groups\n\nInputs\n\n\n\n\n\n\n\n\nName\nDescription\nAttributes\n\n\n\n\n--id\nID of the sample.\nstring, required, example: \"foo\"\n\n\n--input\nPath to the sample.\nfile, required, example: \"input.h5mu\"\n\n\n--input_type\nType of the input file\nstring, required\n\n\n\n\n\nOutputs\n\n\n\n\n\n\n\n\nName\nDescription\nAttributes\n\n\n\n\n--output\nName or template for the output files.\nfile, example: \"output.h5mu\"\n\n\n\n\n\nConversion from h5ad\n\n\n\n\n\n\n\n\nName\nDescription\nAttributes\n\n\n\n\n--modality\nName of the modality where the h5ad is stored in the h5mu object.\nstring"
  },
  {
    "objectID": "modules/workflow_ingestion_conversion.html#authors",
    "href": "modules/workflow_ingestion_conversion.html#authors",
    "title": "Conversion",
    "section": "Authors",
    "text": "Authors\n\nDries Schaumont   (author, maintainer)\nDries De Maeyer  (author)"
  },
  {
    "objectID": "modules/workflow_ingestion_conversion.html#visualisation",
    "href": "modules/workflow_ingestion_conversion.html#visualisation",
    "title": "Conversion",
    "section": "Visualisation",
    "text": "Visualisation\n\n\n\n\nflowchart LR\n    p0(Input)\n    p3(filter)\n    p8(from_10xh5_to_h5mu)\n    p27(mix)\n    p11(filter)\n    p16(from_10xmtx_to_h5mu)\n    p19(filter)\n    p24(from_h5ad_to_h5mu)\n    p29(toSortedList)\n    p31(Output)\n    p0-->p3\n    p0-->p11\n    p0-->p19\n    p3-->p8\n    p8-->p27\n    p11-->p16\n    p16-->p27\n    p19-->p24\n    p24-->p27\n    p27-->p29\n    p29-->p31"
  },
  {
    "objectID": "modules/module_integrate_scanorama.html",
    "href": "modules/module_integrate_scanorama.html",
    "title": "Scanorama",
    "section": "",
    "text": "ID: scanorama\nNamespace: integrate\n\n\n\nSource"
  },
  {
    "objectID": "modules/module_integrate_scanorama.html#example-commands",
    "href": "modules/module_integrate_scanorama.html#example-commands",
    "title": "Scanorama",
    "section": "Example commands",
    "text": "Example commands\nYou can run the pipeline using nextflow run.\n\nView help\nYou can use --help as a parameter to get an overview of the possible parameters.\nnextflow run openpipelines-bio/openpipeline \\\n  -r main_build -latest \\\n  -main-script target/nextflow/integrate/scanorama/main.nf \\\n  --help\n\n\nRun command\n\n\nExample of params.yaml\n\n# Arguments\ninput: # please fill in - example: \"path/to/file\"\nmodality: \"rna\"\n# output: \"$id.$key.output.h5ad\"\nobs_batch: \"batch\"\nobsm_input: \"X_pca\"\nobsm_output: \"X_scanorama\"\nknn: 20\nbatch_size: 5000\nsigma: 15\napprox: true\nalpha: 0.1\n\n# Nextflow input-output arguments\npublish_dir: # please fill in - example: \"output/\"\n# param_list: \"my_params.yaml\"\n\nnextflow run openpipelines-bio/openpipeline \\\n  -r main_build -latest \\\n  -profile docker \\\n  -main-script target/nextflow/integrate/scanorama/main.nf \\\n  -params-file params.yaml\n\n\n\n\n\n\nNote\n\n\n\nReplace -profile docker with -profile podman or -profile singularity depending on the desired backend."
  },
  {
    "objectID": "modules/module_integrate_scanorama.html#argument-group",
    "href": "modules/module_integrate_scanorama.html#argument-group",
    "title": "Scanorama",
    "section": "Argument group",
    "text": "Argument group\n\nArguments\n\n\n\n\n\n\n\n\nName\nDescription\nAttributes\n\n\n\n\n--input\nInput h5mu file\nfile, required\n\n\n--output\nOutput .h5mu file\nfile, required, default: \"output.h5ad\"\n\n\n--obs_batch\nColumn name discriminating between your batches.\nstring, default: \"batch\"\n\n\n--obsm_input\nBasis obsm slot to run scanorama on.\nstring, default: \"X_pca\"\n\n\n--obsm_output\nThe name of the field in adata.obsm where the integrated embeddings will be stored after running this function. Defaults to X_scanorama.\nstring, default: \"X_scanorama\"\n\n\n--knn\nNumber of nearest neighbors to use for matching.\ninteger, default: 20\n\n\n--batch_size\nThe batch size used in the alignment vector computation. Useful when integrating very large (>100k samples) datasets. Set to large value that runs within available memory.\ninteger, default: 5000\n\n\n--sigma\nCorrection smoothing parameter on Gaussian kernel.\ndouble, default: 15\n\n\n--approx\nUse approximate nearest neighbors with Python annoy; greatly speeds up matching runtime.\nboolean, default: TRUE\n\n\n--alpha\nAlignment score minimum cutoff\ndouble, default: 0.1"
  },
  {
    "objectID": "modules/module_integrate_scanorama.html#authors",
    "href": "modules/module_integrate_scanorama.html#authors",
    "title": "Scanorama",
    "section": "Authors",
    "text": "Authors\n\nDries De Maeyer  (author)\nDries Schaumont   (maintainer)"
  },
  {
    "objectID": "modules/module_convert_from_h5mu_to_h5ad.html",
    "href": "modules/module_convert_from_h5mu_to_h5ad.html",
    "title": "From h5mu to h5ad",
    "section": "",
    "text": "ID: from_h5mu_to_h5ad\nNamespace: convert\n\n\n\nSource"
  },
  {
    "objectID": "modules/module_convert_from_h5mu_to_h5ad.html#example-commands",
    "href": "modules/module_convert_from_h5mu_to_h5ad.html#example-commands",
    "title": "From h5mu to h5ad",
    "section": "Example commands",
    "text": "Example commands\nYou can run the pipeline using nextflow run.\n\nView help\nYou can use --help as a parameter to get an overview of the possible parameters.\nnextflow run openpipelines-bio/openpipeline \\\n  -r main_build -latest \\\n  -main-script target/nextflow/convert/from_h5mu_to_h5ad/main.nf \\\n  --help\n\n\nRun command\n\n\nExample of params.yaml\n\n# Arguments\ninput: # please fill in - example: \"input.h5mu\"\nmodality: \"rna\"\n# output: \"$id.$key.output.h5ad\"\ncompression: \"gzip\"\n\n# Nextflow input-output arguments\npublish_dir: # please fill in - example: \"output/\"\n# param_list: \"my_params.yaml\"\n\nnextflow run openpipelines-bio/openpipeline \\\n  -r main_build -latest \\\n  -profile docker \\\n  -main-script target/nextflow/convert/from_h5mu_to_h5ad/main.nf \\\n  -params-file params.yaml\n\n\n\n\n\n\nNote\n\n\n\nReplace -profile docker with -profile podman or -profile singularity depending on the desired backend."
  },
  {
    "objectID": "modules/module_convert_from_h5mu_to_h5ad.html#argument-group",
    "href": "modules/module_convert_from_h5mu_to_h5ad.html#argument-group",
    "title": "From h5mu to h5ad",
    "section": "Argument group",
    "text": "Argument group\n\nArguments\n\n\n\n\n\n\n\n\nName\nDescription\nAttributes\n\n\n\n\n--input\nInput MuData file\nfile, required, default: \"input.h5mu\"\n\n\n--output\nOutput AnnData file.\nfile, default: \"output.h5ad\"\n\n\n--compression\nThe compression format to be used on the final h5ad object.\nstring, default: \"gzip\""
  },
  {
    "objectID": "modules/module_convert_from_h5mu_to_h5ad.html#authors",
    "href": "modules/module_convert_from_h5mu_to_h5ad.html#authors",
    "title": "From h5mu to h5ad",
    "section": "Authors",
    "text": "Authors\n\nRobrecht Cannoodt   (maintainer)"
  },
  {
    "objectID": "modules/workflow_ingestion_bd_rhapsody.html",
    "href": "modules/workflow_ingestion_bd_rhapsody.html",
    "title": "BD Rhapsody",
    "section": "",
    "text": "ID: bd_rhapsody\nNamespace: ingestion\n\n\n\nSource\nA wrapper for the BD Rhapsody Analysis CWL v1.10.1 pipeline.\nThis pipeline can be used for a targeted analysis (with --mode targeted) or for a whole transcriptome analysis (with --mode wta).\nThe reference_genome and transcriptome_annotation files can be generated with the make_reference pipeline. Alternatively, BD also provides standard references which can be downloaded from these locations:"
  },
  {
    "objectID": "modules/workflow_ingestion_bd_rhapsody.html#example-commands",
    "href": "modules/workflow_ingestion_bd_rhapsody.html#example-commands",
    "title": "BD Rhapsody",
    "section": "Example commands",
    "text": "Example commands\nYou can run the pipeline using nextflow run.\n\nView help\nYou can use --help as a parameter to get an overview of the possible parameters.\nnextflow run openpipelines-bio/openpipeline \\\n  -r main_build -latest \\\n  -main-script workflows/ingestion/bd_rhapsody/main.nf \\\n  --help\n\n\nRun command\n\n\nExample of params.yaml\n\n# Inputs\nmode: # please fill in - example: \"wta\"\nid: # please fill in - example: \"foo\"\ninput: # please fill in - example: [\"input.fastq.gz\"]\nreference: # please fill in - example: [\"reference_genome.tar.gz|reference.fasta\"]\n# transcriptome_annotation: \"transcriptome.gtf\"\n# abseq_reference: [\"abseq_reference.fasta\"]\n# supplemental_reference: [\"supplemental_reference.fasta\"]\nsample_prefix: \"sample\"\n\n# Outputs\n# output_raw: \"$id.$key.output_raw.output_raw\"\n# output_h5mu: \"$id.$key.output_h5mu.h5mu\"\n\n# Putative cell calling settings\n# putative_cell_call: \"mRNA\"\n# exact_cell_count: 10000\ndisable_putative_calling: false\n\n# Subsample arguments\n# subsample: 0.01\n# subsample_seed: 3445\n\n# Multiplex arguments\n# sample_tags_version: \"human\"\n# tag_names: [\"4-mySample\", \"9-myOtherSample\", \"6-alsoThisSample\"]\n\n# VDJ arguments\n# vdj_version: \"human\"\n\n# CWL-runner arguments\nparallel: true\ntimestamps: false\ndryrun: false\n\n# Nextflow input-output arguments\npublish_dir: # please fill in - example: \"output/\"\n# param_list: \"my_params.yaml\"\n\nnextflow run openpipelines-bio/openpipeline \\\n  -r main_build -latest \\\n  -profile docker \\\n  -main-script workflows/ingestion/bd_rhapsody/main.nf \\\n  -params-file params.yaml\n\n\n\n\n\n\nNote\n\n\n\nReplace -profile docker with -profile podman or -profile singularity depending on the desired backend."
  },
  {
    "objectID": "modules/workflow_ingestion_bd_rhapsody.html#argument-groups",
    "href": "modules/workflow_ingestion_bd_rhapsody.html#argument-groups",
    "title": "BD Rhapsody",
    "section": "Argument groups",
    "text": "Argument groups\n\nInputs\n\n\n\n\n\n\n\n\nName\nDescription\nAttributes\n\n\n\n\n--mode\nWhether to run a whole transcriptome analysis (WTA) or a targeted analysis.\nstring, required, example: \"wta\"\n\n\n--id\nID of the sample.\nstring, required, example: \"foo\"\n\n\n--input\nPath to your read files in the FASTQ.GZ format. You may specify as many R1/R2 read pairs as you want.\nfile, required, example: \"input.fastq.gz\"\n\n\n--reference\nRefence to map to. For --mode wta, this is the path to STAR index as a tar.gz file. For --mode targeted, this is the path to mRNA reference file for pre-designed, supplemental, or custom panel, in FASTA format\nfile, required, example: \"reference_genome.tar.gz&#124;reference.fasta\"\n\n\n--transcriptome_annotation\nPath to GTF annotation file (only for --mode wta).\nfile, example: \"transcriptome.gtf\"\n\n\n--abseq_reference\nPath to the AbSeq reference file in FASTA format. Only needed if BD AbSeq Ab-Oligos are used.\nfile, example: \"abseq_reference.fasta\"\n\n\n--supplemental_reference\nPath to the supplemental reference file in FASTA format. Only needed if there are additional transgene sequences used in the experiment (only for --mode wta).\nfile, example: \"supplemental_reference.fasta\"\n\n\n--sample_prefix\nSpecify a run name to use as the output file base name. Use only letters, numbers, or hyphens. Do not use special characters or spaces.\nstring, default: \"sample\"\n\n\n\n\n\nOutputs\n\n\n\n\n\n\n\n\nName\nDescription\nAttributes\n\n\n\n\n--output_raw\nThe BD Rhapsody output folder as it comes out of the BD Rhapsody pipeline\nfile, required, example: \"output_dir\"\n\n\n--output_h5mu\nThe converted h5mu file.\nfile, required, example: \"output.h5mu\"\n\n\n\n\n\nPutative cell calling settings\n\n\n\n\n\n\n\n\nName\nDescription\nAttributes\n\n\n\n\n--putative_cell_call\nSpecify the dataset to be used for putative cell calling. For putative cell calling using an AbSeq dataset, please provide an AbSeq_Reference fasta file above.\nstring, example: \"mRNA\"\n\n\n--exact_cell_count\nExact cell count - Set a specific number (>=1) of cells as putative, based on those with the highest error-corrected read count\ninteger, example: 10000\n\n\n--disable_putative_calling\nDisable Refined Putative Cell Calling - Determine putative cells using only the basic algorithm (minimum second derivative along the cumulative reads curve). The refined algorithm attempts to remove false positives and recover false negatives, but may not be ideal for certain complex mixtures of cell types. Does not apply if Exact Cell Count is set.\nboolean_true\n\n\n\n\n\nSubsample arguments\n\n\n\n\n\n\n\n\nName\nDescription\nAttributes\n\n\n\n\n--subsample\nA number >1 or fraction (0 < n < 1) to indicate the number or percentage of reads to subsample.\ndouble, example: 0.01\n\n\n--subsample_seed\nA seed for replicating a previous subsampled run.\ninteger, example: 3445\n\n\n\n\n\nMultiplex arguments\n\n\n\n\n\n\n\n\nName\nDescription\nAttributes\n\n\n\n\n--sample_tags_version\nSpecify if multiplexed run.\nstring, example: \"human\"\n\n\n--tag_names\nTag_Names (optional) - Specify the tag number followed by ‘-’ and the desired sample name to appear in Sample_Tag_Metrics.csv. Do not use the special characters: &, (), [], {}, <>, ?, |\nstring, example: \"4-mySample\", example: \"9-myOtherSample\", example: \"6-alsoThisSample\"\n\n\n\n\n\nVDJ arguments\n\n\n\nName\nDescription\nAttributes\n\n\n\n\n--vdj_version\nSpecify if VDJ run.\nstring, example: \"human\"\n\n\n\n\n\nCWL-runner arguments\n\n\n\n\n\n\n\n\nName\nDescription\nAttributes\n\n\n\n\n--parallel\nRun jobs in parallel.\nboolean, default: TRUE\n\n\n--timestamps\nAdd timestamps to the errors, warnings, and notifications.\nboolean_true\n\n\n--dryrun\nIf true, the output directory will only contain the CWL input files, but the pipeline itself will not be executed.\nboolean_true"
  },
  {
    "objectID": "modules/workflow_ingestion_bd_rhapsody.html#authors",
    "href": "modules/workflow_ingestion_bd_rhapsody.html#authors",
    "title": "BD Rhapsody",
    "section": "Authors",
    "text": "Authors\n\nRobrecht Cannoodt   (maintainer)"
  },
  {
    "objectID": "modules/workflow_ingestion_bd_rhapsody.html#visualisation",
    "href": "modules/workflow_ingestion_bd_rhapsody.html#visualisation",
    "title": "BD Rhapsody",
    "section": "Visualisation",
    "text": "Visualisation\n\n\n\n\nflowchart LR\n    p0(Input)\n    p8(bd_rhapsody)\n    p16(from_bdrhap_to_h5mu)\n    p22(Output)\n    p0-->p8\n    p8-->p16\n    p16-->p22"
  },
  {
    "objectID": "modules/module_transform_delete_layer.html",
    "href": "modules/module_transform_delete_layer.html",
    "title": "Delete layer",
    "section": "",
    "text": "ID: delete_layer\nNamespace: transform\n\n\n\nSource"
  },
  {
    "objectID": "modules/module_transform_delete_layer.html#example-commands",
    "href": "modules/module_transform_delete_layer.html#example-commands",
    "title": "Delete layer",
    "section": "Example commands",
    "text": "Example commands\nYou can run the pipeline using nextflow run.\n\nView help\nYou can use --help as a parameter to get an overview of the possible parameters.\nnextflow run openpipelines-bio/openpipeline \\\n  -r main_build -latest \\\n  -main-script target/nextflow/transform/delete_layer/main.nf \\\n  --help\n\n\nRun command\n\n\nExample of params.yaml\n\n# Arguments\ninput: # please fill in - example: \"input.h5mu\"\nmodality: \"rna\"\nlayer: # please fill in - example: [\"foo\"]\n# output: \"$id.$key.output.h5mu\"\nmissing_ok: false\n\n# Nextflow input-output arguments\npublish_dir: # please fill in - example: \"output/\"\n# param_list: \"my_params.yaml\"\n\nnextflow run openpipelines-bio/openpipeline \\\n  -r main_build -latest \\\n  -profile docker \\\n  -main-script target/nextflow/transform/delete_layer/main.nf \\\n  -params-file params.yaml\n\n\n\n\n\n\nNote\n\n\n\nReplace -profile docker with -profile podman or -profile singularity depending on the desired backend."
  },
  {
    "objectID": "modules/module_transform_delete_layer.html#argument-group",
    "href": "modules/module_transform_delete_layer.html#argument-group",
    "title": "Delete layer",
    "section": "Argument group",
    "text": "Argument group\n\nArguments\n\n\n\n\n\n\n\n\nName\nDescription\nAttributes\n\n\n\n\n--input\nInput h5mu file\nfile, required, example: \"input.h5mu\"\n\n\n--layer\nInput layer to remove\nstring, required\n\n\n--output\nOutput h5mu file.\nfile, required, default: \"output.h5mu\"\n\n\n--missing_ok\nDo not raise an error if the layer does not exist for all modalities.\nboolean_true"
  },
  {
    "objectID": "modules/module_transform_delete_layer.html#authors",
    "href": "modules/module_transform_delete_layer.html#authors",
    "title": "Delete layer",
    "section": "Authors",
    "text": "Authors\n\nDries Schaumont   (maintainer)"
  },
  {
    "objectID": "modules/module_neighbors_bbknn.html",
    "href": "modules/module_neighbors_bbknn.html",
    "title": "Bbknn",
    "section": "",
    "text": "ID: bbknn\nNamespace: neighbors\n\n\n\nSource"
  },
  {
    "objectID": "modules/module_neighbors_bbknn.html#example-commands",
    "href": "modules/module_neighbors_bbknn.html#example-commands",
    "title": "Bbknn",
    "section": "Example commands",
    "text": "Example commands\nYou can run the pipeline using nextflow run.\n\nView help\nYou can use --help as a parameter to get an overview of the possible parameters.\nnextflow run openpipelines-bio/openpipeline \\\n  -r main_build -latest \\\n  -main-script target/nextflow/neighbors/bbknn/main.nf \\\n  --help\n\n\nRun command\n\n\nExample of params.yaml\n\n# Arguments\n# input: \"path/to/file\"\nmodality: \"rna\"\nobsm_input: \"X_pca\"\nobs_batch: \"batch\"\n# output: \"$id.$key.output.output\"\nuns_output: \"neighbors\"\nobsp_distances: \"distances\"\nobsp_connectivities: \"connectivities\"\nn_neighbors_within_batch: 3\nn_pcs: 50\n# n_trim: 123\n\n# Nextflow input-output arguments\npublish_dir: # please fill in - example: \"output/\"\n# param_list: \"my_params.yaml\"\n\nnextflow run openpipelines-bio/openpipeline \\\n  -r main_build -latest \\\n  -profile docker \\\n  -main-script target/nextflow/neighbors/bbknn/main.nf \\\n  -params-file params.yaml\n\n\n\n\n\n\nNote\n\n\n\nReplace -profile docker with -profile podman or -profile singularity depending on the desired backend."
  },
  {
    "objectID": "modules/module_neighbors_bbknn.html#argument-group",
    "href": "modules/module_neighbors_bbknn.html#argument-group",
    "title": "Bbknn",
    "section": "Argument group",
    "text": "Argument group\n\nArguments\n\n\n\n\n\n\n\n\nName\nDescription\nAttributes\n\n\n\n\n--input\nInput h5mu file\nfile\n\n\n--obsm_input\nThe dimensionality reduction in .obsm to use for neighbour detection. Defaults to X_pca.\nstring, default: \"X_pca\"\n\n\n--obs_batch\n.obs column name discriminating between your batches.\nstring, default: \"batch\"\n\n\n--output\nOutput .h5mu file.\nfile, required\n\n\n--uns_output\nMandatory .uns slot to store various neighbor output objects.\nstring, default: \"neighbors\"\n\n\n--obsp_distances\nIn which .obsp slot to store the distance matrix between the resulting neighbors.\nstring, default: \"distances\"\n\n\n--obsp_connectivities\nIn which .obsp slot to store the connectivities matrix between the resulting neighbors.\nstring, default: \"connectivities\"\n\n\n--n_neighbors_within_batch\nHow many top neighbours to report for each batch; total number of neighbours in the initial k-nearest-neighbours computation will be this number times the number of batches.\ninteger, default: 3\n\n\n--n_pcs\nHow many dimensions (in case of PCA, principal components) to use in the analysis.\ninteger, default: 50\n\n\n--n_trim\nTrim the neighbours of each cell to these many top connectivities. May help with population independence and improve the tidiness of clustering. The lower the value the more independent the individual populations, at the cost of more conserved batch effect. If None (default), sets the parameter value automatically to 10 times neighbors_within_batch times the number of batches. Set to 0 to skip.\ninteger"
  },
  {
    "objectID": "modules/module_neighbors_bbknn.html#authors",
    "href": "modules/module_neighbors_bbknn.html#authors",
    "title": "Bbknn",
    "section": "Authors",
    "text": "Authors\n\nDries De Maeyer  (author)\nDries Schaumont   (maintainer)"
  },
  {
    "objectID": "modules/module_mapping_cellranger_multi.html",
    "href": "modules/module_mapping_cellranger_multi.html",
    "title": "Cellranger multi",
    "section": "",
    "text": "ID: cellranger_multi\nNamespace: mapping\n\n\n\nSource"
  },
  {
    "objectID": "modules/module_mapping_cellranger_multi.html#example-commands",
    "href": "modules/module_mapping_cellranger_multi.html#example-commands",
    "title": "Cellranger multi",
    "section": "Example commands",
    "text": "Example commands\nYou can run the pipeline using nextflow run.\n\nView help\nYou can use --help as a parameter to get an overview of the possible parameters.\nnextflow run openpipelines-bio/openpipeline \\\n  -r main_build -latest \\\n  -main-script target/nextflow/mapping/cellranger_multi/main.nf \\\n  --help\n\n\nRun command\n\n\nExample of params.yaml\n\n# Outputs\n# output: \"$id.$key.output.output\"\n\n# Input files\ninput: # please fill in - example: [\"mysample_S1_L001_R1_001.fastq.gz\", \"mysample_S1_L001_R2_001.fastq.gz\"]\ngex_reference: # please fill in - example: \"reference_genome.tar.gz\"\n# vdj_reference: \"reference_vdj.tar.gz\"\n# feature_reference: \"feature_reference.csv\"\n\n# Library arguments\nlibrary_id: # please fill in - example: [\"mysample1\"]\nlibrary_type: # please fill in - example: [\"Gene Expression\"]\n# library_subsample: [\"0.5\"]\n# library_lanes: [\"1-4\"]\n\n# Gene expression arguments\n# gex_expect_cells: 3000\ngex_chemistry: \"auto\"\ngex_secondary_analysis: false\ngex_generate_bam: true\ngex_include_introns: true\n\n# Cell multiplexing parameters\n# cell_multiplex_sample_id: \"foo\"\n# cell_multiplex_oligo_ids: \"foo\"\n# cell_multiplex_description: \"foo\"\n\n# Executor arguments\ndryrun: false\n\n# Nextflow input-output arguments\npublish_dir: # please fill in - example: \"output/\"\n# param_list: \"my_params.yaml\"\n\nnextflow run openpipelines-bio/openpipeline \\\n  -r main_build -latest \\\n  -profile docker \\\n  -main-script target/nextflow/mapping/cellranger_multi/main.nf \\\n  -params-file params.yaml\n\n\n\n\n\n\nNote\n\n\n\nReplace -profile docker with -profile podman or -profile singularity depending on the desired backend."
  },
  {
    "objectID": "modules/module_mapping_cellranger_multi.html#argument-groups",
    "href": "modules/module_mapping_cellranger_multi.html#argument-groups",
    "title": "Cellranger multi",
    "section": "Argument groups",
    "text": "Argument groups\n\nInput files\n\n\n\n\n\n\n\n\nName\nDescription\nAttributes\n\n\n\n\n--input\nThe FASTQ files to be analyzed. FASTQ files should conform to the naming conventions of bcl2fastq and mkfastq: [Sample Name]_S[Sample Index]_L00[Lane Number]_[Read Type]_001.fastq.gz\nfile, required, example: \"mysample_S1_L001_R1_001.fastq.gz\", example: \"mysample_S1_L001_R2_001.fastq.gz\"\n\n\n--gex_reference\nGenome refence index built by Cell Ranger mkref.\nfile, required, example: \"reference_genome.tar.gz\"\n\n\n--vdj_reference\nVDJ refence index built by Cell Ranger mkref.\nfile, example: \"reference_vdj.tar.gz\"\n\n\n--feature_reference\nPath to the Feature reference CSV file, declaring Feature Barcode constructs and associated barcodes. Required only for Antibody Capture or CRISPR Guide Capture libraries. See https://support.10xgenomics.com/single-cell-gene-expression/software/pipelines/latest/using/feature-bc-analysis#feature-ref for more information.\nfile, example: \"feature_reference.csv\"\n\n\n\n\n\nLibrary arguments\n\n\n\n\n\n\n\n\nName\nDescription\nAttributes\n\n\n\n\n--library_id\nThe Illumina sample name to analyze. This must exactly match the ‘Sample Name’ part of the FASTQ files specified in the --input argument.\nstring, required, example: \"mysample1\"\n\n\n--library_type\nThe underlying feature type of the library. Possible values: “Gene Expression”, “VDJ”, “VDJ-T”, “VDJ-B”, “Antibody Capture”, “CRISPR Guide Capture”, “Multiplexing Capture”\nstring, required, example: \"Gene Expression\"\n\n\n--library_subsample\nOptional. The rate at which reads from the provided FASTQ files are sampled. Must be strictly greater than 0 and less than or equal to 1.\nstring, example: \"0.5\"\n\n\n--library_lanes\nLanes associated with this sample. Defaults to using all lanes.\nstring, example: \"1-4\"\n\n\n\n\n\nGene expression arguments\nArguments relevant to the analysis of gene expression data.\n\n\n\n\n\n\n\n\nName\nDescription\nAttributes\n\n\n\n\n--gex_expect_cells\nExpected number of recovered cells, used as input to cell calling algorithm.\ninteger, example: 3000\n\n\n--gex_chemistry\nAssay configuration. - auto: autodetect mode - threeprime: Single Cell 3’ - fiveprime: Single Cell 5’ - SC3Pv1: Single Cell 3’ v1 - SC3Pv2: Single Cell 3’ v2 - SC3Pv3: Single Cell 3’ v3 - SC3Pv3LT: Single Cell 3’ v3 LT - SC3Pv3HT: Single Cell 3’ v3 HT - SC5P-PE: Single Cell 5’ paired-end - SC5P-R2: Single Cell 5’ R2-only - SC-FB: Single Cell Antibody-only 3’ v2 or 5’ See https://kb.10xgenomics.com/hc/en-us/articles/115003764132-How-does-Cell-Ranger-auto-detect-chemistry- for more information.\nstring, default: \"auto\"\n\n\n--gex_secondary_analysis\nWhether or not to run the secondary analysis e.g. clustering.\nboolean, default: FALSE\n\n\n--gex_generate_bam\nWhether to generate a BAM file.\nboolean, default: TRUE\n\n\n--gex_include_introns\nInclude intronic reads in count (default=true unless –target-panel is specified in which case default=false)\nboolean, default: TRUE\n\n\n\n\n\nCell multiplexing parameters\nArguments related to cell multiplexing.\n\n\n\n\n\n\n\n\nName\nDescription\nAttributes\n\n\n\n\n--cell_multiplex_sample_id\nA name to identify a multiplexed sample. Must be alphanumeric with hyphens and/or underscores, and less than 64 characters. Required for Cell Multiplexing libraries.\nstring\n\n\n--cell_multiplex_oligo_ids\nThe Cell Multiplexing oligo IDs used to multiplex this sample. If multiple CMOs were used for a sample, separate IDs with a pipe (e.g., CMO301|CMO302). Required for Cell Multiplexing libraries.\nstring\n\n\n--cell_multiplex_description\nA description for the sample.\nstring\n\n\n\n\n\nOutputs\n\n\n\n\n\n\n\n\nName\nDescription\nAttributes\n\n\n\n\n--output\nThe folder to store the alignment results.\nfile, required, example: \"/path/to/output\"\n\n\n\n\n\nExecutor arguments\n\n\n\n\n\n\n\n\nName\nDescription\nAttributes\n\n\n\n\n--dryrun\nIf true, the output directory will only contain the CWL input files, but the pipeline itself will not be executed.\nboolean_true"
  },
  {
    "objectID": "modules/module_mapping_cellranger_multi.html#authors",
    "href": "modules/module_mapping_cellranger_multi.html#authors",
    "title": "Cellranger multi",
    "section": "Authors",
    "text": "Authors\n\nAngela Pisco   (author)\nRobrecht Cannoodt   (author, maintainer)\nDries De Maeyer  (author)"
  },
  {
    "objectID": "modules/module_reference_make_reference.html",
    "href": "modules/module_reference_make_reference.html",
    "title": "Make reference",
    "section": "",
    "text": "ID: make_reference\nNamespace: reference\n\n\n\nSource\nExample input files are: - genome_fasta: https://ftp.ebi.ac.uk/pub/databases/gencode/Gencode_human/release_41/GRCh38.primary_assembly.genome.fa.gz - transcriptome_gtf: https://ftp.ebi.ac.uk/pub/databases/gencode/Gencode_human/release_41/gencode.v41.annotation.gtf.gz - ercc: https://assets.thermofisher.com/TFS-Assets/LSG/manuals/ERCC92.zip"
  },
  {
    "objectID": "modules/module_reference_make_reference.html#example-commands",
    "href": "modules/module_reference_make_reference.html#example-commands",
    "title": "Make reference",
    "section": "Example commands",
    "text": "Example commands\nYou can run the pipeline using nextflow run.\n\nView help\nYou can use --help as a parameter to get an overview of the possible parameters.\nnextflow run openpipelines-bio/openpipeline \\\n  -r main_build -latest \\\n  -main-script target/nextflow/reference/make_reference/main.nf \\\n  --help\n\n\nRun command\n\n\nExample of params.yaml\n\n# Arguments\ngenome_fasta: # please fill in - example: \"genome_fasta.fa.gz\"\ntranscriptome_gtf: # please fill in - example: \"transcriptome.gtf.gz\"\n# ercc: \"ercc.zip\"\n# subset_regex: \"(ERCC-00002|chr1)\"\n# output_fasta: \"$id.$key.output_fasta.gz\"\n# output_gtf: \"$id.$key.output_gtf.gz\"\n\n# Nextflow input-output arguments\npublish_dir: # please fill in - example: \"output/\"\n# param_list: \"my_params.yaml\"\n\nnextflow run openpipelines-bio/openpipeline \\\n  -r main_build -latest \\\n  -profile docker \\\n  -main-script target/nextflow/reference/make_reference/main.nf \\\n  -params-file params.yaml\n\n\n\n\n\n\nNote\n\n\n\nReplace -profile docker with -profile podman or -profile singularity depending on the desired backend."
  },
  {
    "objectID": "modules/module_reference_make_reference.html#argument-group",
    "href": "modules/module_reference_make_reference.html#argument-group",
    "title": "Make reference",
    "section": "Argument group",
    "text": "Argument group\n\nArguments\n\n\n\n\n\n\n\n\nName\nDescription\nAttributes\n\n\n\n\n--genome_fasta\nReference genome fasta. Example:\nfile, required, example: \"genome_fasta.fa.gz\"\n\n\n--transcriptome_gtf\nReference transcriptome annotation.\nfile, required, example: \"transcriptome.gtf.gz\"\n\n\n--ercc\nERCC sequence and annotation file.\nfile, example: \"ercc.zip\"\n\n\n--subset_regex\nWill subset the reference chromosomes using the given regex.\nstring, example: \"(ERCC-00002&#124;chr1)\"\n\n\n--output_fasta\nOutput genome sequence fasta.\nfile, required, example: \"genome_sequence.fa.gz\"\n\n\n--output_gtf\nOutput transcriptome annotation gtf.\nfile, required, example: \"transcriptome_annotation.gtf.gz\""
  },
  {
    "objectID": "modules/module_reference_make_reference.html#authors",
    "href": "modules/module_reference_make_reference.html#authors",
    "title": "Make reference",
    "section": "Authors",
    "text": "Authors\n\nAngela Pisco   (author)\nRobrecht Cannoodt   (author, maintainer)"
  },
  {
    "objectID": "modules/module_metadata_join_uns_to_obs.html",
    "href": "modules/module_metadata_join_uns_to_obs.html",
    "title": "Join uns to obs",
    "section": "",
    "text": "ID: join_uns_to_obs\nNamespace: metadata\n\n\n\nSource"
  },
  {
    "objectID": "modules/module_metadata_join_uns_to_obs.html#example-commands",
    "href": "modules/module_metadata_join_uns_to_obs.html#example-commands",
    "title": "Join uns to obs",
    "section": "Example commands",
    "text": "Example commands\nYou can run the pipeline using nextflow run.\n\nView help\nYou can use --help as a parameter to get an overview of the possible parameters.\nnextflow run openpipelines-bio/openpipeline \\\n  -r main_build -latest \\\n  -main-script target/nextflow/metadata/join_uns_to_obs/main.nf \\\n  --help\n\n\nRun command\n\n\nExample of params.yaml\n\n# Arguments\ninput: # please fill in - example: \"input.h5mu\"\nmodality: \"rna\"\nuns_key: # please fill in - example: \"foo\"\n# output: \"$id.$key.output.h5mu\"\n\n# Nextflow input-output arguments\npublish_dir: # please fill in - example: \"output/\"\n# param_list: \"my_params.yaml\"\n\nnextflow run openpipelines-bio/openpipeline \\\n  -r main_build -latest \\\n  -profile docker \\\n  -main-script target/nextflow/metadata/join_uns_to_obs/main.nf \\\n  -params-file params.yaml\n\n\n\n\n\n\nNote\n\n\n\nReplace -profile docker with -profile podman or -profile singularity depending on the desired backend."
  },
  {
    "objectID": "modules/module_metadata_join_uns_to_obs.html#argument-group",
    "href": "modules/module_metadata_join_uns_to_obs.html#argument-group",
    "title": "Join uns to obs",
    "section": "Argument group",
    "text": "Argument group\n\nArguments\n\n\n\n\n\n\n\n\nName\nDescription\nAttributes\n\n\n\n\n--input\nInput h5mu file\nfile, required, example: \"input.h5mu\"\n\n\n--output\nOutput h5mu file.\nfile, required, example: \"output.h5mu\""
  },
  {
    "objectID": "modules/module_metadata_join_uns_to_obs.html#authors",
    "href": "modules/module_metadata_join_uns_to_obs.html#authors",
    "title": "Join uns to obs",
    "section": "Authors",
    "text": "Authors"
  },
  {
    "objectID": "modules/module_interactive_run_cellxgene.html",
    "href": "modules/module_interactive_run_cellxgene.html",
    "title": "Run cellxgene",
    "section": "",
    "text": "ID: run_cellxgene\nNamespace: interactive\n\n\n\nSource"
  },
  {
    "objectID": "modules/module_interactive_run_cellxgene.html#example-commands",
    "href": "modules/module_interactive_run_cellxgene.html#example-commands",
    "title": "Run cellxgene",
    "section": "Example commands",
    "text": "Example commands\nYou can run the pipeline using nextflow run.\n\nView help\nYou can use --help as a parameter to get an overview of the possible parameters.\nnextflow run openpipelines-bio/openpipeline \\\n  -r main_build -latest \\\n  -main-script target/nextflow/interactive/run_cellxgene/main.nf \\\n  --help\n\n\nRun command\n\n\nExample of params.yaml\n\n# Arguments\ninput: \"./\"\nport: \"5005\"\n\n# Nextflow input-output arguments\npublish_dir: # please fill in - example: \"output/\"\n# param_list: \"my_params.yaml\"\n\nnextflow run openpipelines-bio/openpipeline \\\n  -r main_build -latest \\\n  -profile docker \\\n  -main-script target/nextflow/interactive/run_cellxgene/main.nf \\\n  -params-file params.yaml\n\n\n\n\n\n\nNote\n\n\n\nReplace -profile docker with -profile podman or -profile singularity depending on the desired backend."
  },
  {
    "objectID": "modules/module_interactive_run_cellxgene.html#argument-group",
    "href": "modules/module_interactive_run_cellxgene.html#argument-group",
    "title": "Run cellxgene",
    "section": "Argument group",
    "text": "Argument group\n\nArguments\n\n\n\nName\nDescription\nAttributes\n\n\n\n\n--input\nDirectory to mount\nfile, default: \".\"\n\n\n--port\nPort to use\nstring, default: \"5005\""
  },
  {
    "objectID": "modules/module_interactive_run_cellxgene.html#authors",
    "href": "modules/module_interactive_run_cellxgene.html#authors",
    "title": "Run cellxgene",
    "section": "Authors",
    "text": "Authors"
  },
  {
    "objectID": "modules/module_transform_normalize_total.html",
    "href": "modules/module_transform_normalize_total.html",
    "title": "Normalize total",
    "section": "",
    "text": "ID: normalize_total\nNamespace: transform\n\n\n\nSource\nNormalize each cell by total counts over all genes, so that every cell has the same total count after normalization. If choosing target_sum=1e6, this is CPM normalization.\nIf exclude_highly_expressed=True, very highly expressed genes are excluded from the computation of the normalization factor (size factor) for each cell. This is meaningful as these can strongly influence the resulting normalized values for all other genes [Weinreb17]."
  },
  {
    "objectID": "modules/module_transform_normalize_total.html#example-commands",
    "href": "modules/module_transform_normalize_total.html#example-commands",
    "title": "Normalize total",
    "section": "Example commands",
    "text": "Example commands\nYou can run the pipeline using nextflow run.\n\nView help\nYou can use --help as a parameter to get an overview of the possible parameters.\nnextflow run openpipelines-bio/openpipeline \\\n  -r main_build -latest \\\n  -main-script target/nextflow/transform/normalize_total/main.nf \\\n  --help\n\n\nRun command\n\n\nExample of params.yaml\n\n# Arguments\ninput: # please fill in - example: \"input.h5mu\"\nmodality: \"rna\"\n# input_layer: \"foo\"\n# output: \"$id.$key.output.h5mu\"\n# output_layer: \"foo\"\ntarget_sum: 10000\nexclude_highly_expressed: false\n\n# Nextflow input-output arguments\npublish_dir: # please fill in - example: \"output/\"\n# param_list: \"my_params.yaml\"\n\nnextflow run openpipelines-bio/openpipeline \\\n  -r main_build -latest \\\n  -profile docker \\\n  -main-script target/nextflow/transform/normalize_total/main.nf \\\n  -params-file params.yaml\n\n\n\n\n\n\nNote\n\n\n\nReplace -profile docker with -profile podman or -profile singularity depending on the desired backend."
  },
  {
    "objectID": "modules/module_transform_normalize_total.html#argument-group",
    "href": "modules/module_transform_normalize_total.html#argument-group",
    "title": "Normalize total",
    "section": "Argument group",
    "text": "Argument group\n\nArguments\n\n\n\n\n\n\n\n\nName\nDescription\nAttributes\n\n\n\n\n--input\nInput h5mu file\nfile, required, example: \"input.h5mu\"\n\n\n--input_layer\nInput layer to use. By default, X is normalized\nstring\n\n\n--output\nOutput h5mu file.\nfile, required, default: \"output.h5mu\"\n\n\n--output_layer\nOutput layer to use. By default, use X.\nstring\n\n\n--target_sum\nIf None, after normalization, each observation (cell) has a total count equal to the median of total counts for observations (cells) before normalization.\ninteger, default: 10000\n\n\n--exclude_highly_expressed\nExclude (very) highly expressed genes for the computation of the normalization factor (size factor) for each cell. A gene is considered highly expressed, if it has more than max_fraction of the total counts in at least one cell. The not-excluded genes will sum up to target_sum.\nboolean_true"
  },
  {
    "objectID": "modules/module_transform_normalize_total.html#authors",
    "href": "modules/module_transform_normalize_total.html#authors",
    "title": "Normalize total",
    "section": "Authors",
    "text": "Authors\n\nDries De Maeyer  (maintainer)\nRobrecht Cannoodt   (contributor)"
  },
  {
    "objectID": "modules/module_convert_from_cellranger_multi_to_h5mu.html",
    "href": "modules/module_convert_from_cellranger_multi_to_h5mu.html",
    "title": "From cellranger multi to h5mu",
    "section": "",
    "text": "ID: from_cellranger_multi_to_h5mu\nNamespace: convert\n\n\n\nSource\nCurrently does not allow parsing the output from cell barcode demultiplexing."
  },
  {
    "objectID": "modules/module_convert_from_cellranger_multi_to_h5mu.html#example-commands",
    "href": "modules/module_convert_from_cellranger_multi_to_h5mu.html#example-commands",
    "title": "From cellranger multi to h5mu",
    "section": "Example commands",
    "text": "Example commands\nYou can run the pipeline using nextflow run.\n\nView help\nYou can use --help as a parameter to get an overview of the possible parameters.\nnextflow run openpipelines-bio/openpipeline \\\n  -r main_build -latest \\\n  -main-script target/nextflow/convert/from_cellranger_multi_to_h5mu/main.nf \\\n  --help\n\n\nRun command\n\n\nExample of params.yaml\n\n# Arguments\ninput: # please fill in - example: \"input_dir_containing_modalities\"\n# output: \"$id.$key.output.h5mu\"\nuns_metrics: \"metrics_cellranger\"\n\n# Nextflow input-output arguments\npublish_dir: # please fill in - example: \"output/\"\n# param_list: \"my_params.yaml\"\n\nnextflow run openpipelines-bio/openpipeline \\\n  -r main_build -latest \\\n  -profile docker \\\n  -main-script target/nextflow/convert/from_cellranger_multi_to_h5mu/main.nf \\\n  -params-file params.yaml\n\n\n\n\n\n\nNote\n\n\n\nReplace -profile docker with -profile podman or -profile singularity depending on the desired backend."
  },
  {
    "objectID": "modules/module_convert_from_cellranger_multi_to_h5mu.html#argument-group",
    "href": "modules/module_convert_from_cellranger_multi_to_h5mu.html#argument-group",
    "title": "From cellranger multi to h5mu",
    "section": "Argument group",
    "text": "Argument group\n\nArguments\n\n\n\n\n\n\n\n\nName\nDescription\nAttributes\n\n\n\n\n--input\nInput folder. Must contain the output from a cellranger multi run.\nfile, required, example: \"input_dir_containing_modalities\"\n\n\n--output\nOutput h5mu file.\nfile, example: \"output.h5mu\"\n\n\n--uns_metrics\nName of the .uns slot under which to QC metrics (if any).\nstring, default: \"metrics_cellranger\""
  },
  {
    "objectID": "modules/module_convert_from_cellranger_multi_to_h5mu.html#authors",
    "href": "modules/module_convert_from_cellranger_multi_to_h5mu.html#authors",
    "title": "From cellranger multi to h5mu",
    "section": "Authors",
    "text": "Authors\n\nDries Schaumont   (maintainer)"
  },
  {
    "objectID": "modules/module_dataflow_split_modalities.html",
    "href": "modules/module_dataflow_split_modalities.html",
    "title": "Split modalities",
    "section": "",
    "text": "ID: split_modalities\nNamespace: dataflow\n\n\n\nSource"
  },
  {
    "objectID": "modules/module_dataflow_split_modalities.html#example-commands",
    "href": "modules/module_dataflow_split_modalities.html#example-commands",
    "title": "Split modalities",
    "section": "Example commands",
    "text": "Example commands\nYou can run the pipeline using nextflow run.\n\nView help\nYou can use --help as a parameter to get an overview of the possible parameters.\nnextflow run openpipelines-bio/openpipeline \\\n  -r main_build -latest \\\n  -main-script target/nextflow/dataflow/split_modalities/main.nf \\\n  --help\n\n\nRun command\n\n\nExample of params.yaml\n\n# Arguments\ninput: # please fill in - example: \"sample_path\"\n# output: \"$id.$key.output.output\"\n# output_types: \"$id.$key.output_types.csv\"\ncompression: \"gzip\"\n\n# Nextflow input-output arguments\npublish_dir: # please fill in - example: \"output/\"\n# param_list: \"my_params.yaml\"\n\nnextflow run openpipelines-bio/openpipeline \\\n  -r main_build -latest \\\n  -profile docker \\\n  -main-script target/nextflow/dataflow/split_modalities/main.nf \\\n  -params-file params.yaml\n\n\n\n\n\n\nNote\n\n\n\nReplace -profile docker with -profile podman or -profile singularity depending on the desired backend."
  },
  {
    "objectID": "modules/module_dataflow_split_modalities.html#argument-group",
    "href": "modules/module_dataflow_split_modalities.html#argument-group",
    "title": "Split modalities",
    "section": "Argument group",
    "text": "Argument group\n\nArguments\n\n\n\n\n\n\n\n\nName\nDescription\nAttributes\n\n\n\n\n--input\nPath to a single .h5mu file.\nfile, required, default: \"sample_path\"\n\n\n--output\nOutput directory containing multiple h5mu files.\nfile, required, example: \"/path/to/output\"\n\n\n--output_types\nA csv containing the base filename and modality type per output file.\nfile, required, example: \"types.csv\"\n\n\n--compression\nThe compression format to be used on the final h5mu object.\nstring, default: \"gzip\""
  },
  {
    "objectID": "modules/module_dataflow_split_modalities.html#authors",
    "href": "modules/module_dataflow_split_modalities.html#authors",
    "title": "Split modalities",
    "section": "Authors",
    "text": "Authors\n\nDries Schaumont   (maintainer)\nRobrecht Cannoodt   (contributor)"
  },
  {
    "objectID": "modules/module_transform_scale.html",
    "href": "modules/module_transform_scale.html",
    "title": "Scale",
    "section": "",
    "text": "ID: scale\nNamespace: transform\n\n\n\nSource"
  },
  {
    "objectID": "modules/module_transform_scale.html#example-commands",
    "href": "modules/module_transform_scale.html#example-commands",
    "title": "Scale",
    "section": "Example commands",
    "text": "Example commands\nYou can run the pipeline using nextflow run.\n\nView help\nYou can use --help as a parameter to get an overview of the possible parameters.\nnextflow run openpipelines-bio/openpipeline \\\n  -r main_build -latest \\\n  -main-script target/nextflow/transform/scale/main.nf \\\n  --help\n\n\nRun command\n\n\nExample of params.yaml\n\n# Arguments\ninput: # please fill in - example: \"input.h5mu\"\nmodality: \"rna\"\n# max_value: 123.0\nzero_center: true\n# output: \"$id.$key.output.h5mu\"\n\n# Nextflow input-output arguments\npublish_dir: # please fill in - example: \"output/\"\n# param_list: \"my_params.yaml\"\n\nnextflow run openpipelines-bio/openpipeline \\\n  -r main_build -latest \\\n  -profile docker \\\n  -main-script target/nextflow/transform/scale/main.nf \\\n  -params-file params.yaml\n\n\n\n\n\n\nNote\n\n\n\nReplace -profile docker with -profile podman or -profile singularity depending on the desired backend."
  },
  {
    "objectID": "modules/module_transform_scale.html#argument-group",
    "href": "modules/module_transform_scale.html#argument-group",
    "title": "Scale",
    "section": "Argument group",
    "text": "Argument group\n\nArguments\n\n\n\n\n\n\n\n\nName\nDescription\nAttributes\n\n\n\n\n--input\nInput h5mu file.\nfile, required, example: \"input.h5mu\"\n\n\n--modality\nList of modalities to process.\nstring, default: \"rna\"\n\n\n--max_value\nClip (truncate) to this value after scaling. Does not clip by default.\ndouble\n\n\n--zero_center\nIf False, omit zero-centering variables, which allows to handle sparse input efficiently.\nboolean, default: TRUE\n\n\n--output\nOutput h5mu file.\nfile, required, default: \"output.h5mu\""
  },
  {
    "objectID": "modules/module_transform_scale.html#authors",
    "href": "modules/module_transform_scale.html#authors",
    "title": "Scale",
    "section": "Authors",
    "text": "Authors\n\nDries Schaumont   (maintainer)"
  },
  {
    "objectID": "modules/workflow_ingestion_make_reference.html",
    "href": "modules/workflow_ingestion_make_reference.html",
    "title": "Make reference",
    "section": "",
    "text": "ID: make_reference\nNamespace: ingestion\n\n\n\nSource"
  },
  {
    "objectID": "modules/workflow_ingestion_make_reference.html#example-commands",
    "href": "modules/workflow_ingestion_make_reference.html#example-commands",
    "title": "Make reference",
    "section": "Example commands",
    "text": "Example commands\nYou can run the pipeline using nextflow run.\n\nView help\nYou can use --help as a parameter to get an overview of the possible parameters.\nnextflow run openpipelines-bio/openpipeline \\\n  -r main_build -latest \\\n  -main-script workflows/ingestion/make_reference/main.nf \\\n  --help\n\n\nRun command\n\n\nExample of params.yaml\n\n# Inputs\nid: # please fill in - example: \"foo\"\ngenome_fasta: # please fill in - example: \"https://ftp.ebi.ac.uk/pub/databases/gencode/Gencode_human/release_41/GRCh38.primary_assembly.genome.fa.gz\"\ntranscriptome_gtf: # please fill in - example: \"https://ftp.ebi.ac.uk/pub/databases/gencode/Gencode_human/release_41/gencode.v41.annotation.gtf.gz\"\n# ercc: \"https://assets.thermofisher.com/TFS-Assets/LSG/manuals/ERCC92.zip\"\n\n# Outputs\ntarget: [\"raw\"]\n# output_fasta: \"$id.$key.output_fasta.gz\"\n# output_gtf: \"$id.$key.output_gtf.gz\"\n# output_cellranger: \"$id.$key.output_cellranger.gz\"\n# output_bd_rhapsody: \"$id.$key.output_bd_rhapsody.gz\"\n\n# Arguments\n# subset_regex: \"(ERCC-00002|chr1)\"\n\n# Nextflow input-output arguments\npublish_dir: # please fill in - example: \"output/\"\n# param_list: \"my_params.yaml\"\n\nnextflow run openpipelines-bio/openpipeline \\\n  -r main_build -latest \\\n  -profile docker \\\n  -main-script workflows/ingestion/make_reference/main.nf \\\n  -params-file params.yaml\n\n\n\n\n\n\nNote\n\n\n\nReplace -profile docker with -profile podman or -profile singularity depending on the desired backend."
  },
  {
    "objectID": "modules/workflow_ingestion_make_reference.html#argument-groups",
    "href": "modules/workflow_ingestion_make_reference.html#argument-groups",
    "title": "Make reference",
    "section": "Argument groups",
    "text": "Argument groups\n\nInputs\n\n\n\n\n\n\n\n\nName\nDescription\nAttributes\n\n\n\n\n--id\nID of the reference.\nstring, required, example: \"foo\"\n\n\n--genome_fasta\nReference genome fasta.\nfile, required, example: \"https:/ftp.ebi.ac.uk/pub/databases/gencode/Gencode_human/release_41/GRCh38.primary_assembly.genome.fa.gz\"\n\n\n--transcriptome_gtf\nReference transcriptome annotation.\nfile, required, example: \"https:/ftp.ebi.ac.uk/pub/databases/gencode/Gencode_human/release_41/gencode.v41.annotation.gtf.gz\"\n\n\n--ercc\nERCC sequence and annotation file.\nfile, example: \"https:/assets.thermofisher.com/TFS-Assets/LSG/manuals/ERCC92.zip\"\n\n\n\n\n\nOutputs\n\n\n\n\n\n\n\n\nName\nDescription\nAttributes\n\n\n\n\n--target\nWhich reference indices to generate.\nstring, default: \"raw\"\n\n\n--output_fasta\nOutput genome sequence fasta.\nfile, example: \"genome_sequence.fa.gz\"\n\n\n--output_gtf\nOutput transcriptome annotation gtf.\nfile, example: \"transcriptome_annotation.gtf.gz\"\n\n\n--output_cellranger\nOutput index\nfile, example: \"index.tar.gz\"\n\n\n--output_bd_rhapsody\nOutput index\nfile, example: \"index.tar.gz\"\n\n\n\n\n\nArguments\n\n\n\n\n\n\n\n\nName\nDescription\nAttributes\n\n\n\n\n--subset_regex\nWill subset the reference chromosomes using the given regex.\nstring, example: \"(ERCC-00002&#124;chr1)\""
  },
  {
    "objectID": "modules/workflow_ingestion_make_reference.html#authors",
    "href": "modules/workflow_ingestion_make_reference.html#authors",
    "title": "Make reference",
    "section": "Authors",
    "text": "Authors\n\nAngela Pisco   (author)\nRobrecht Cannoodt   (author, maintainer)"
  },
  {
    "objectID": "modules/workflow_ingestion_make_reference.html#visualisation",
    "href": "modules/workflow_ingestion_make_reference.html#visualisation",
    "title": "Make reference",
    "section": "Visualisation",
    "text": "Visualisation\n\n\n\n\nflowchart LR\n    p0(Input)\n    p9(make_reference)\n    p13(filter)\n    p18(build_cellranger_reference)\n    p34(join)\n    p23(filter)\n    p28(build_bdrhap_reference)\n    p35(join)\n    p36(join)\n    p41(Output)\n    p34-->p35\n    p35-->p36\n    p0-->p9\n    p9-->p13\n    p13-->p18\n    p18-->p34\n    p9-->p23\n    p23-->p28\n    p28-->p35\n    p0-->p36\n    p9-->p34\n    p36-->p41"
  },
  {
    "objectID": "modules/module_reference_build_bdrhap_reference.html",
    "href": "modules/module_reference_build_bdrhap_reference.html",
    "title": "Build bdrhap reference",
    "section": "",
    "text": "ID: build_bdrhap_reference\nNamespace: reference\n\n\n\nSource"
  },
  {
    "objectID": "modules/module_reference_build_bdrhap_reference.html#example-commands",
    "href": "modules/module_reference_build_bdrhap_reference.html#example-commands",
    "title": "Build bdrhap reference",
    "section": "Example commands",
    "text": "Example commands\nYou can run the pipeline using nextflow run.\n\nView help\nYou can use --help as a parameter to get an overview of the possible parameters.\nnextflow run openpipelines-bio/openpipeline \\\n  -r main_build -latest \\\n  -main-script target/nextflow/reference/build_bdrhap_reference/main.nf \\\n  --help\n\n\nRun command\n\n\nExample of params.yaml\n\n# Arguments\ngenome_fasta: # please fill in - example: \"genome_sequence.fa.gz\"\ntranscriptome_gtf: # please fill in - example: \"transcriptome_annotation.gtf.gz\"\n# output: \"$id.$key.output.gz\"\n\n# Nextflow input-output arguments\npublish_dir: # please fill in - example: \"output/\"\n# param_list: \"my_params.yaml\"\n\nnextflow run openpipelines-bio/openpipeline \\\n  -r main_build -latest \\\n  -profile docker \\\n  -main-script target/nextflow/reference/build_bdrhap_reference/main.nf \\\n  -params-file params.yaml\n\n\n\n\n\n\nNote\n\n\n\nReplace -profile docker with -profile podman or -profile singularity depending on the desired backend."
  },
  {
    "objectID": "modules/module_reference_build_bdrhap_reference.html#argument-group",
    "href": "modules/module_reference_build_bdrhap_reference.html#argument-group",
    "title": "Build bdrhap reference",
    "section": "Argument group",
    "text": "Argument group\n\nArguments\n\n\n\n\n\n\n\n\nName\nDescription\nAttributes\n\n\n\n\n--genome_fasta\nReference genome fasta.\nfile, required, example: \"genome_sequence.fa.gz\"\n\n\n--transcriptome_gtf\nReference transcriptome annotation.\nfile, required, example: \"transcriptome_annotation.gtf.gz\"\n\n\n--output\nStar index\nfile, required, example: \"star_index.tar.gz\""
  },
  {
    "objectID": "modules/module_reference_build_bdrhap_reference.html#authors",
    "href": "modules/module_reference_build_bdrhap_reference.html#authors",
    "title": "Build bdrhap reference",
    "section": "Authors",
    "text": "Authors\n\nAngela Pisco   (author)\nRobrecht Cannoodt   (author, maintainer)"
  },
  {
    "objectID": "modules/module_interactive_run_cirrocumulus.html",
    "href": "modules/module_interactive_run_cirrocumulus.html",
    "title": "Run cirrocumulus",
    "section": "",
    "text": "ID: run_cirrocumulus\nNamespace: interactive\n\n\n\nSource"
  },
  {
    "objectID": "modules/module_interactive_run_cirrocumulus.html#example-commands",
    "href": "modules/module_interactive_run_cirrocumulus.html#example-commands",
    "title": "Run cirrocumulus",
    "section": "Example commands",
    "text": "Example commands\nYou can run the pipeline using nextflow run.\n\nView help\nYou can use --help as a parameter to get an overview of the possible parameters.\nnextflow run openpipelines-bio/openpipeline \\\n  -r main_build -latest \\\n  -main-script target/nextflow/interactive/run_cirrocumulus/main.nf \\\n  --help\n\n\nRun command\n\n\nExample of params.yaml\n\n# Arguments\ninput: \"./\"\nport: \"5005\"\n\n# Nextflow input-output arguments\npublish_dir: # please fill in - example: \"output/\"\n# param_list: \"my_params.yaml\"\n\nnextflow run openpipelines-bio/openpipeline \\\n  -r main_build -latest \\\n  -profile docker \\\n  -main-script target/nextflow/interactive/run_cirrocumulus/main.nf \\\n  -params-file params.yaml\n\n\n\n\n\n\nNote\n\n\n\nReplace -profile docker with -profile podman or -profile singularity depending on the desired backend."
  },
  {
    "objectID": "modules/module_interactive_run_cirrocumulus.html#argument-group",
    "href": "modules/module_interactive_run_cirrocumulus.html#argument-group",
    "title": "Run cirrocumulus",
    "section": "Argument group",
    "text": "Argument group\n\nArguments\n\n\n\nName\nDescription\nAttributes\n\n\n\n\n--input\nDirectory to mount\nfile, default: \".\"\n\n\n--port\nPort to use\nstring, default: \"5005\""
  },
  {
    "objectID": "modules/module_interactive_run_cirrocumulus.html#authors",
    "href": "modules/module_interactive_run_cirrocumulus.html#authors",
    "title": "Run cirrocumulus",
    "section": "Authors",
    "text": "Authors"
  },
  {
    "objectID": "modules/workflow_tabula_sapiens_process.html",
    "href": "modules/workflow_tabula_sapiens_process.html",
    "title": "Process",
    "section": "",
    "text": "ID: process\nNamespace: tabula_sapiens\n\n\n\nSource"
  },
  {
    "objectID": "modules/workflow_tabula_sapiens_process.html#example-commands",
    "href": "modules/workflow_tabula_sapiens_process.html#example-commands",
    "title": "Process",
    "section": "Example commands",
    "text": "Example commands\nYou can run the pipeline using nextflow run.\n\nView help\nYou can use --help as a parameter to get an overview of the possible parameters.\nnextflow run czbiohub/utilities \\\n  -r main_build -latest \\\n  -main-script tabula_sapiens/process/main.nf \\\n  --help\n\n\nRun command\n\n\nExample of params.yaml\n\n\n\nnextflow run czbiohub/utilities \\\n  -r main_build -latest \\\n  -profile docker \\\n  -main-script tabula_sapiens/process/main.nf \\\n  -params-file params.yaml\n\n\n\n\n\n\nNote\n\n\n\nReplace -profile docker with -profile podman or -profile singularity depending on the desired backend."
  },
  {
    "objectID": "modules/workflow_tabula_sapiens_process.html#argument-group",
    "href": "modules/workflow_tabula_sapiens_process.html#argument-group",
    "title": "Process",
    "section": "Argument group",
    "text": "Argument group\n\nInputs\n\n\n\n\n\n\n\n\nName\nDescription\nAttributes\n\n\n\n\n--id\nID of the sample.\nstring, required, example: \"foo\"\n\n\n--input\nThe fastq.gz files to align. Can also be a single directory containing fastq.gz files.\nfile, required, example: \"sample_S1_L001_R1_001.fastq.gz\", example: \"sample_S1_L001_R2_001.fastq.gz\"\n\n\n--reference\nThe path to Cell Ranger reference tar.gz file.\nfile, required, example: \"reference.tar.gz\"\n\n\n--output_raw\nThe output h5mu.\nfile, default: \"$id.output_raw\"\n\n\n--output_h5mu\nThe output h5mu.\nfile, default: \"$id.output_h5mu.h5mu\""
  },
  {
    "objectID": "modules/workflow_tabula_sapiens_process.html#authors",
    "href": "modules/workflow_tabula_sapiens_process.html#authors",
    "title": "Process",
    "section": "Authors",
    "text": "Authors\n\nAngela Pisco   (author)\nRobrecht Cannoodt   (author, maintainer)"
  },
  {
    "objectID": "modules/workflow_tabula_sapiens_process.html#visualisation",
    "href": "modules/workflow_tabula_sapiens_process.html#visualisation",
    "title": "Process",
    "section": "Visualisation",
    "text": "Visualisation\n\n\n\n\nflowchart LR\n    p0(Input)\n    p7(cellranger_count)\n    p14(cellranger_count_split)\n    p22(from_10xh5_to_h5mu)\n    p29(cellbender_remove_background)\n    p37(filter_with_counts)\n    p41(Output)\n    p0-->p7\n    p7-->p14\n    p14-->p22\n    p22-->p29\n    p29-->p37\n    p37-->p41"
  },
  {
    "objectID": "modules/module_mapping_cellranger_count.html",
    "href": "modules/module_mapping_cellranger_count.html",
    "title": "Cellranger count",
    "section": "",
    "text": "ID: cellranger_count\nNamespace: mapping\n\n\n\nSource"
  },
  {
    "objectID": "modules/module_mapping_cellranger_count.html#example-commands",
    "href": "modules/module_mapping_cellranger_count.html#example-commands",
    "title": "Cellranger count",
    "section": "Example commands",
    "text": "Example commands\nYou can run the pipeline using nextflow run.\n\nView help\nYou can use --help as a parameter to get an overview of the possible parameters.\nnextflow run openpipelines-bio/openpipeline \\\n  -r main_build -latest \\\n  -main-script target/nextflow/mapping/cellranger_count/main.nf \\\n  --help\n\n\nRun command\n\n\nExample of params.yaml\n\n# Inputs\ninput: # please fill in - example: [\"sample_S1_L001_R1_001.fastq.gz\", \"sample_S1_L001_R2_001.fastq.gz\"]\nreference: # please fill in - example: \"reference.tar.gz\"\n\n# Outputs\n# output: \"$id.$key.output.output\"\n\n# Arguments\n# expect_cells: 3000\nchemistry: \"auto\"\nsecondary_analysis: false\ngenerate_bam: true\ninclude_introns: true\n\n# Nextflow input-output arguments\npublish_dir: # please fill in - example: \"output/\"\n# param_list: \"my_params.yaml\"\n\nnextflow run openpipelines-bio/openpipeline \\\n  -r main_build -latest \\\n  -profile docker \\\n  -main-script target/nextflow/mapping/cellranger_count/main.nf \\\n  -params-file params.yaml\n\n\n\n\n\n\nNote\n\n\n\nReplace -profile docker with -profile podman or -profile singularity depending on the desired backend."
  },
  {
    "objectID": "modules/module_mapping_cellranger_count.html#argument-groups",
    "href": "modules/module_mapping_cellranger_count.html#argument-groups",
    "title": "Cellranger count",
    "section": "Argument groups",
    "text": "Argument groups\n\nInputs\n\n\n\n\n\n\n\n\nName\nDescription\nAttributes\n\n\n\n\n--input\nThe fastq.gz files to align. Can also be a single directory containing fastq.gz files.\nfile, required, example: \"sample_S1_L001_R1_001.fastq.gz\", example: \"sample_S1_L001_R2_001.fastq.gz\"\n\n\n--reference\nThe path to Cell Ranger reference tar.gz file.\nfile, required, example: \"reference.tar.gz\"\n\n\n\n\n\nOutputs\n\n\n\n\n\n\n\n\nName\nDescription\nAttributes\n\n\n\n\n--output\nThe folder to store the alignment results.\nfile, required, example: \"/path/to/output\"\n\n\n\n\n\nArguments\n\n\n\n\n\n\n\n\nName\nDescription\nAttributes\n\n\n\n\n--expect_cells\nExpected number of recovered cells, used as input to cell calling algorithm.\ninteger, example: 3000\n\n\n--chemistry\nAssay configuration. - auto: autodetect mode - threeprime: Single Cell 3’ - fiveprime: Single Cell 5’ - SC3Pv1: Single Cell 3’ v1 - SC3Pv2: Single Cell 3’ v2 - SC3Pv3: Single Cell 3’ v3 - SC3Pv3LT: Single Cell 3’ v3 LT - SC3Pv3HT: Single Cell 3’ v3 HT - SC5P-PE: Single Cell 5’ paired-end - SC5P-R2: Single Cell 5’ R2-only - SC-FB: Single Cell Antibody-only 3’ v2 or 5’ See https://kb.10xgenomics.com/hc/en-us/articles/115003764132-How-does-Cell-Ranger-auto-detect-chemistry- for more information.\nstring, default: \"auto\"\n\n\n--secondary_analysis\nWhether or not to run the secondary analysis e.g. clustering.\nboolean, default: FALSE\n\n\n--generate_bam\nWhether to generate a BAM file.\nboolean, default: TRUE\n\n\n--include_introns\nInclude intronic reads in count (default=true unless –target-panel is specified in which case default=false)\nboolean, default: TRUE"
  },
  {
    "objectID": "modules/module_mapping_cellranger_count.html#authors",
    "href": "modules/module_mapping_cellranger_count.html#authors",
    "title": "Cellranger count",
    "section": "Authors",
    "text": "Authors\n\nAngela Pisco   (author)\nSamuel D’Souza  (author)\nRobrecht Cannoodt   (author, maintainer)"
  },
  {
    "objectID": "modules/workflow_multiomics_rna_singlesample.html",
    "href": "modules/workflow_multiomics_rna_singlesample.html",
    "title": "Rna singlesample",
    "section": "",
    "text": "ID: rna_singlesample\nNamespace: multiomics\n\n\n\nSource"
  },
  {
    "objectID": "modules/workflow_multiomics_rna_singlesample.html#example-commands",
    "href": "modules/workflow_multiomics_rna_singlesample.html#example-commands",
    "title": "Rna singlesample",
    "section": "Example commands",
    "text": "Example commands\nYou can run the pipeline using nextflow run.\n\nView help\nYou can use --help as a parameter to get an overview of the possible parameters.\nnextflow run openpipelines-bio/openpipeline \\\n  -r main_build -latest \\\n  -main-script workflows/multiomics/rna_singlesample/main.nf \\\n  --help\n\n\nRun command\n\n\nExample of params.yaml\n\n# Arguments\nid: # please fill in - example: \"foo\"\ninput: # please fill in - example: \"dataset.h5mu\"\n# output: \"$id.$key.output.h5mu\"\n\n# Nextflow input-output arguments\npublish_dir: # please fill in - example: \"output/\"\n# param_list: \"my_params.yaml\"\n\nnextflow run openpipelines-bio/openpipeline \\\n  -r main_build -latest \\\n  -profile docker \\\n  -main-script workflows/multiomics/rna_singlesample/main.nf \\\n  -params-file params.yaml\n\n\n\n\n\n\nNote\n\n\n\nReplace -profile docker with -profile podman or -profile singularity depending on the desired backend."
  },
  {
    "objectID": "modules/workflow_multiomics_rna_singlesample.html#argument-group",
    "href": "modules/workflow_multiomics_rna_singlesample.html#argument-group",
    "title": "Rna singlesample",
    "section": "Argument group",
    "text": "Argument group\n\nArguments\n\n\n\n\n\n\n\n\nName\nDescription\nAttributes\n\n\n\n\n--id\nID of the sample.\nstring, required, example: \"foo\"\n\n\n--input\nPath to the sample.\nfile, required, example: \"dataset.h5mu\"\n\n\n--output\nDestination path to the output.\nfile, required, example: \"output.h5mu\""
  },
  {
    "objectID": "modules/workflow_multiomics_rna_singlesample.html#authors",
    "href": "modules/workflow_multiomics_rna_singlesample.html#authors",
    "title": "Rna singlesample",
    "section": "Authors",
    "text": "Authors\n\nDries De Maeyer  (author)\nRobrecht Cannoodt   (author, maintainer)\nDries Schaumont   (author)"
  },
  {
    "objectID": "modules/workflow_multiomics_rna_singlesample.html#visualisation",
    "href": "modules/workflow_multiomics_rna_singlesample.html#visualisation",
    "title": "Rna singlesample",
    "section": "Visualisation",
    "text": "Visualisation\n\n\n\n\nflowchart LR\n    p0(Input)\n    p8(filter_with_counts)\n    p15(do_filter)\n    p23(filter_with_scrublet)\n    p29(Output)\n    p0-->p8\n    p8-->p15\n    p15-->p23\n    p23-->p29"
  },
  {
    "objectID": "modules/module_convert_from_10xh5_to_h5mu.html",
    "href": "modules/module_convert_from_10xh5_to_h5mu.html",
    "title": "From 10xh5 to h5mu",
    "section": "",
    "text": "ID: from_10xh5_to_h5mu\nNamespace: convert\n\n\n\nSource"
  },
  {
    "objectID": "modules/module_convert_from_10xh5_to_h5mu.html#example-commands",
    "href": "modules/module_convert_from_10xh5_to_h5mu.html#example-commands",
    "title": "From 10xh5 to h5mu",
    "section": "Example commands",
    "text": "Example commands\nYou can run the pipeline using nextflow run.\n\nView help\nYou can use --help as a parameter to get an overview of the possible parameters.\nnextflow run openpipelines-bio/openpipeline \\\n  -r main_build -latest \\\n  -main-script target/nextflow/convert/from_10xh5_to_h5mu/main.nf \\\n  --help\n\n\nRun command\n\n\nExample of params.yaml\n\n# Inputs\ninput: # please fill in - example: \"raw_feature_bc_matrix.h5\"\n# input_metrics_summary: \"metrics_cellranger.h5\"\n\n# Outputs\n# output: \"$id.$key.output.h5mu\"\nuns_metrics: \"metrics_cellranger\"\n\n# Arguments\n# min_genes: 100\n# min_counts: 1000\n\n# Nextflow input-output arguments\npublish_dir: # please fill in - example: \"output/\"\n# param_list: \"my_params.yaml\"\n\nnextflow run openpipelines-bio/openpipeline \\\n  -r main_build -latest \\\n  -profile docker \\\n  -main-script target/nextflow/convert/from_10xh5_to_h5mu/main.nf \\\n  -params-file params.yaml\n\n\n\n\n\n\nNote\n\n\n\nReplace -profile docker with -profile podman or -profile singularity depending on the desired backend."
  },
  {
    "objectID": "modules/module_convert_from_10xh5_to_h5mu.html#argument-groups",
    "href": "modules/module_convert_from_10xh5_to_h5mu.html#argument-groups",
    "title": "From 10xh5 to h5mu",
    "section": "Argument groups",
    "text": "Argument groups\n\nInputs\n\n\n\n\n\n\n\n\nName\nDescription\nAttributes\n\n\n\n\n--input\nA 10x h5 file as generated by Cell Ranger.\nfile, required, example: \"raw_feature_bc_matrix.h5\"\n\n\n--input_metrics_summary\nA metrics summary csv file as generated by Cell Ranger.\nfile, example: \"metrics_cellranger.h5\"\n\n\n\n\n\nOutputs\n\n\n\n\n\n\n\n\nName\nDescription\nAttributes\n\n\n\n\n--output\nOutput h5mu file.\nfile, example: \"output.h5mu\"\n\n\n--uns_metrics\nName of the .uns slot under which to QC metrics (if any).\nstring, default: \"metrics_cellranger\"\n\n\n\n\n\nArguments\n\n\n\n\n\n\n\n\nName\nDescription\nAttributes\n\n\n\n\n--min_genes\nMinimum number of counts required for a cell to pass filtering.\ninteger, example: 100\n\n\n--min_counts\nMinimum number of genes expressed required for a cell to pass filtering.\ninteger, example: 1000"
  },
  {
    "objectID": "modules/module_convert_from_10xh5_to_h5mu.html#authors",
    "href": "modules/module_convert_from_10xh5_to_h5mu.html#authors",
    "title": "From 10xh5 to h5mu",
    "section": "Authors",
    "text": "Authors\n\nRobrecht Cannoodt   (maintainer)"
  },
  {
    "objectID": "modules/module_transform_log1p.html",
    "href": "modules/module_transform_log1p.html",
    "title": "Log1p",
    "section": "",
    "text": "ID: log1p\nNamespace: transform\n\n\n\nSource\nComputes X = log(X + 1), where log denotes the natural logarithm unless a different base is given"
  },
  {
    "objectID": "modules/module_transform_log1p.html#example-commands",
    "href": "modules/module_transform_log1p.html#example-commands",
    "title": "Log1p",
    "section": "Example commands",
    "text": "Example commands\nYou can run the pipeline using nextflow run.\n\nView help\nYou can use --help as a parameter to get an overview of the possible parameters.\nnextflow run openpipelines-bio/openpipeline \\\n  -r main_build -latest \\\n  -main-script target/nextflow/transform/log1p/main.nf \\\n  --help\n\n\nRun command\n\n\nExample of params.yaml\n\n# Arguments\ninput: # please fill in - example: \"input.h5mu\"\nmodality: \"rna\"\n# input_layer: \"foo\"\n# output_layer: \"foo\"\n# output: \"$id.$key.output.h5mu\"\n# base: 2\n\n# Nextflow input-output arguments\npublish_dir: # please fill in - example: \"output/\"\n# param_list: \"my_params.yaml\"\n\nnextflow run openpipelines-bio/openpipeline \\\n  -r main_build -latest \\\n  -profile docker \\\n  -main-script target/nextflow/transform/log1p/main.nf \\\n  -params-file params.yaml\n\n\n\n\n\n\nNote\n\n\n\nReplace -profile docker with -profile podman or -profile singularity depending on the desired backend."
  },
  {
    "objectID": "modules/module_transform_log1p.html#argument-group",
    "href": "modules/module_transform_log1p.html#argument-group",
    "title": "Log1p",
    "section": "Argument group",
    "text": "Argument group\n\nArguments\n\n\n\n\n\n\n\n\nName\nDescription\nAttributes\n\n\n\n\n--input\nInput h5mu file\nfile, required, example: \"input.h5mu\"\n\n\n--input_layer\nInput layer to use. If None, X is normalized\nstring\n\n\n--output_layer\nOutput layer to use. By default, use X.\nstring\n\n\n--output\nOutput h5mu file.\nfile, required, default: \"output.h5mu\""
  },
  {
    "objectID": "modules/module_transform_log1p.html#authors",
    "href": "modules/module_transform_log1p.html#authors",
    "title": "Log1p",
    "section": "Authors",
    "text": "Authors\n\nDries De Maeyer  (maintainer)\nRobrecht Cannoodt   (contributor)"
  },
  {
    "objectID": "modules/module_qc_fastqc.html",
    "href": "modules/module_qc_fastqc.html",
    "title": "Fastqc",
    "section": "",
    "text": "ID: fastqc\nNamespace: qc\n\n\n\nSource\nThis component can take one or more files (by means of shell globbing) or a complete directory"
  },
  {
    "objectID": "modules/module_qc_fastqc.html#example-commands",
    "href": "modules/module_qc_fastqc.html#example-commands",
    "title": "Fastqc",
    "section": "Example commands",
    "text": "Example commands\nYou can run the pipeline using nextflow run.\n\nView help\nYou can use --help as a parameter to get an overview of the possible parameters.\nnextflow run openpipelines-bio/openpipeline \\\n  -r main_build -latest \\\n  -main-script target/nextflow/qc/fastqc/main.nf \\\n  --help\n\n\nRun command\n\n\nExample of params.yaml\n\n# Arguments\nmode: \"files\"\ninput: # please fill in - example: \"fastq_dir/\"\n# output: \"$id.$key.output.output\"\n\n# Nextflow input-output arguments\npublish_dir: # please fill in - example: \"output/\"\n# param_list: \"my_params.yaml\"\n\nnextflow run openpipelines-bio/openpipeline \\\n  -r main_build -latest \\\n  -profile docker \\\n  -main-script target/nextflow/qc/fastqc/main.nf \\\n  -params-file params.yaml\n\n\n\n\n\n\nNote\n\n\n\nReplace -profile docker with -profile podman or -profile singularity depending on the desired backend."
  },
  {
    "objectID": "modules/module_qc_fastqc.html#argument-group",
    "href": "modules/module_qc_fastqc.html#argument-group",
    "title": "Fastqc",
    "section": "Argument group",
    "text": "Argument group\n\nArguments\n\n\n\n\n\n\n\n\nName\nDescription\nAttributes\n\n\n\n\n--mode\nThe mode in which the component works. Can be either files or dir.\nstring, default: \"files\"\n\n\n--input\nDirectory containing input fastq files.\nfile, required, example: \"fastq_dir\"\n\n\n--output\nOutput directory to write reports to.\nfile, required, example: \"qc\""
  },
  {
    "objectID": "modules/module_qc_fastqc.html#authors",
    "href": "modules/module_qc_fastqc.html#authors",
    "title": "Fastqc",
    "section": "Authors",
    "text": "Authors"
  },
  {
    "objectID": "modules/module_demux_cellranger_mkfastq.html",
    "href": "modules/module_demux_cellranger_mkfastq.html",
    "title": "Cellranger mkfastq",
    "section": "",
    "text": "ID: cellranger_mkfastq\nNamespace: demux\n\n\n\nSource"
  },
  {
    "objectID": "modules/module_demux_cellranger_mkfastq.html#example-commands",
    "href": "modules/module_demux_cellranger_mkfastq.html#example-commands",
    "title": "Cellranger mkfastq",
    "section": "Example commands",
    "text": "Example commands\nYou can run the pipeline using nextflow run.\n\nView help\nYou can use --help as a parameter to get an overview of the possible parameters.\nnextflow run openpipelines-bio/openpipeline \\\n  -r main_build -latest \\\n  -main-script target/nextflow/demux/cellranger_mkfastq/main.nf \\\n  --help\n\n\nRun command\n\n\nExample of params.yaml\n\n# Arguments\ninput: # please fill in - example: \"/path/to/bcl\"\nsample_sheet: # please fill in - example: \"SampleSheet.csv\"\n# output: \"$id.$key.output.output\"\nseparate_reports: false\n# reports: \"$id.$key.reports.reports\"\n# cores: 2\n# memory: 10\n\n# Nextflow input-output arguments\npublish_dir: # please fill in - example: \"output/\"\n# param_list: \"my_params.yaml\"\n\nnextflow run openpipelines-bio/openpipeline \\\n  -r main_build -latest \\\n  -profile docker \\\n  -main-script target/nextflow/demux/cellranger_mkfastq/main.nf \\\n  -params-file params.yaml\n\n\n\n\n\n\nNote\n\n\n\nReplace -profile docker with -profile podman or -profile singularity depending on the desired backend."
  },
  {
    "objectID": "modules/module_demux_cellranger_mkfastq.html#argument-group",
    "href": "modules/module_demux_cellranger_mkfastq.html#argument-group",
    "title": "Cellranger mkfastq",
    "section": "Argument group",
    "text": "Argument group\n\nArguments\n\n\n\n\n\n\n\n\nName\nDescription\nAttributes\n\n\n\n\n--input\nPath to the (untarred) BCL files. Expects ‘RunParameters.xml’ at ‘./’.\nfile, required, example: \"/path/to/bcl\"\n\n\n--sample_sheet\nThe path to the sample sheet.\nfile, required, example: \"SampleSheet.csv\"\n\n\n--output\nThe folder to store the demux results\nfile, required, default: \"fastqs\", example: \"/path/to/output\"\n\n\n--separate_reports\nShould reports be stored in a separate dir. Should be used with the –reports argument.\nboolean_true\n\n\n--reports\nReports directory\nfile, default: \"reports\", example: \"reports_dir\"\n\n\n--cores\nSet max cores the pipeline may request at one time.\ninteger, example: 2\n\n\n--memory\nSet max GB the pipeline may request at one time.\ninteger, example: 10"
  },
  {
    "objectID": "modules/module_demux_cellranger_mkfastq.html#authors",
    "href": "modules/module_demux_cellranger_mkfastq.html#authors",
    "title": "Cellranger mkfastq",
    "section": "Authors",
    "text": "Authors\n\nAngela Pisco   (author)\nSamuel D’Souza  (author)\nRobrecht Cannoodt   (author, maintainer)"
  }
]