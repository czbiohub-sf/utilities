{
    "$schema": "http://json-schema.org/draft-07/schema",
    "title": "process_smartseq2_auto",
    "description": "Map all SmartSeq2 Fastq files in a directory.\n\nSteps in the workflow:\n\n  * Look for all `*.fastq.gz` files in the `input_dir` which\n    match the regular expression in `fastq_regex`.\n  * Extract the sample id from the path name using the same `fastq_regex` and `sample_id_replacement`.\n  * Detect cell ids from the path name using the `fastq_regex` and `cell_id_replacement`.\n  * Write the list of samples as a yaml in the output directory.\n  * Map the reads using Star\n  * Sort counts with samtools\n  * Convert to count table with HTSeq\n  * Compute QC metrics with MultiQC\n  * Output one h5mu file per sample\n\nConcatenating the invididual h5mu files into one h5mu file is a separate pipeline.\n",
    "type": "object",
    "definitions": {
      "input directory" : {
        "title": "Input directory",
        "type": "object",
        "description": "Arguments related to how to search for `\".fastq.gz\"` files inside the input directory.\nOnly files matching the `fastq_regex` are retained.\n",
        "properties": {
          "input_dir": {
            "type": "string",
            "description": "A directory containing one or more smartseq2 plates.",
            "default": ""
          },
          "fastq_regex": {
            "type": "string",
            "description": "Only files matching this regular expression will be retained.","help_text": "Only files matching this regular expression will be retained.\nFor more details on the notation of regular expression, see the \nJava Docs on [Regular expressions](https://docs.oracle.com/javase/7/docs/api/java/util/regex/Pattern.html).\n","hidden": true,
            "default": "(.*/)?(.*)(_[A-P][0-9]{1,2})(_.*)?_R[12](_001)?.fastq.gz"
          },
          "sample_id_replacement": {
            "type": "string",
            "description": "Which groups from the fastq regex to use as the sample ID. ","help_text": "Which groups from the fastq regex to use as the sample ID. \nAssuming a fastq file is detected at `dir1/dir2/sample_id_A1_foo_R1.fastq.gz`,\nthe outputs of several regexes is listed:\n\n  * `$1` -\u003e `dir1/dir2`\n  * `$1$2` -\u003e `dir1/dir2/sample_id`\n  * `$2` -\u003e `sample_id`\n","hidden": true,
            "default": "$1"
          },
          "cell_id_replacement": {
            "type": "string",
            "description": "Which groups from the fastq regex to use as the cell ID. ","help_text": "Which groups from the fastq regex to use as the cell ID. \nAssuming a fastq file is detected at `dir1/dir2/sample_id_A1_foo_R1.fastq.gz`,\nthe outputs of several regexes is listed:\n\n  * `$1$2$3` -\u003e `dir1/dir2/sample_id_A1`\n  * `$1$2$3$4` -\u003e `dir1/dir2/sample_id_A1_foo`\n","hidden": true,
            "default": "$1$2$3"
          }
          
        }
      },
      "reference" : {
        "title": "Reference",
        "type": "object",
        "description": "The reference to map the reads to.\nIdeally, this reference was created with the [Make reference](https://openpipelines.bio/components/workflows/ingestion/make_reference.html)\npipeline in OpenPipelines.\n",
        "properties": {
          "reference_index": {
            "type": "string",
            "description": "Path to the reference built by star_build_reference. Corresponds to the --genomeDir argument in the STAR command.",
            "default": ""
          },
          "reference_gtf": {
            "type": "string",
            "description": "Path to the gtf reference file.",
            "default": ""
          }
          
        }
      },
      "output directory" : {
        "title": "Output directory",
        "type": "object",
        "description": "The resulting h5mu will be stored in the `publish_dir`. \nThis workflow will replicate the same folder structure of where the fastq files were found relative\nto the `input_dir`.\n",
        "properties": {
          "publish_dir": {
            "type": "string",
            "description": "Path to an output directory.",
            "default": ""
          }
          
        }
      },
      "operational arguments" : {
        "title": "Operational arguments",
        "type": "object",
        "description": "Arguments related to the operational side of the pipeline processing.",
        "properties": {
          "id": {
            "type": "string",
            "description": "Dummy id. Will be removed in the future.","hidden": true,
            "default": "output"
          }
          
        }
      },
      "nextflow input-output arguments" : {
        "title": "Nextflow input-output arguments",
        "type": "object",
        "description": "Input/output parameters for Nextflow itself. Please note that both publishDir and publish_dir are supported but at least one has to be configured.",
        "properties": {
          "publish_dir": {
            "type": "string",
            "description": "Path to an output directory.",
            "default": ""
          },
          "param_list": {
            "type": "string",
            "description": "Allows inputting multiple parameter sets to initialise a Nextflow channel. A `param_list` can either be a list of maps, a csv file, a json file, a yaml file, or simply a yaml blob.","help_text": "Allows inputting multiple parameter sets to initialise a Nextflow channel. A `param_list` can either be a list of maps, a csv file, a json file, a yaml file, or simply a yaml blob.\n\n* A list of maps (as-is) where the keys of each map corresponds to the arguments of the pipeline. Example: in a `nextflow.config` file: `param_list: [ [\u0027id\u0027: \u0027foo\u0027, \u0027input\u0027: \u0027foo.txt\u0027], [\u0027id\u0027: \u0027bar\u0027, \u0027input\u0027: \u0027bar.txt\u0027] ]`.\n* A csv file should have column names which correspond to the different arguments of this pipeline. Example: `--param_list data.csv` with columns `id,input`.\n* A json or a yaml file should be a list of maps, each of which has keys corresponding to the arguments of the pipeline. Example: `--param_list data.json` with contents `[ {\u0027id\u0027: \u0027foo\u0027, \u0027input\u0027: \u0027foo.txt\u0027}, {\u0027id\u0027: \u0027bar\u0027, \u0027input\u0027: \u0027bar.txt\u0027} ]`.\n* A yaml blob can also be passed directly as a string. Example: `--param_list \"[ {\u0027id\u0027: \u0027foo\u0027, \u0027input\u0027: \u0027foo.txt\u0027}, {\u0027id\u0027: \u0027bar\u0027, \u0027input\u0027: \u0027bar.txt\u0027} ]\"`.\n\nWhen passing a csv, json or yaml file, relative path names are relativized to the location of the parameter file. No relativation is performed when `param_list` is a list of maps (as-is) or a yaml blob.","hidden": true,
            "default": ""
          }
          
        }
      }
    },
    "allOf": [
      {
        "$ref": "#/definitions/input directory"
      },
      {
        "$ref": "#/definitions/reference"
      },
      {
        "$ref": "#/definitions/output directory"
      },
      {
        "$ref": "#/definitions/operational arguments"
      },
      {
        "$ref": "#/definitions/nextflow input-output arguments"
      }
      ]
}
